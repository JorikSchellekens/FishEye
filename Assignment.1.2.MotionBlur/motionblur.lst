


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   11 00000000         ; Parameters:
   12 00000000         ; R0 = row
   13 00000000         ; R1 = column
   14 00000000         ; R2 = image address
   15 00000000         ; Stack > width and height
   16 00000000         ; Stack must be cleared by caller
   17 00000000         ; Returns:
   18 00000000         ; R0 = RGBvalue
   19 00000000 E92D4000        STMFD            SP!, {LR}
   20 00000004         
   21 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   22 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   23 0000000C         
   24 0000000C E8BD4000        LDMFD            SP!, {LR}
   25 00000010 E12FFF1E        BX               LR
   26 00000014         
   27 00000014         rowColToIndex
   28 00000014         ; converts row and colum to index
   29 00000014         ; Parameters
   30 00000014         ; R0 = row
   31 00000014         ; R1 = col
   32 00000014         ; Stack > width and height
   33 00000014         ; Stack must be cleared by caller
   34 00000014         ; Return Values
   35 00000014         ; R0 addressIndex
   36 00000014 E52D2004        PUSH             {R2}
   37 00000018 E59D2004        LDR              R2, [SP, #4] ; width
   38 0000001C E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   39 00000020 E49D2004        POP              {R2}
   40 00000024 E12FFF1E        BX               LR
   41 00000028         
   42 00000028         putPixel
   43 00000028         ; Stores a given RGB to a pixel at row, col
   44 00000028         ; Parameters
   45 00000028         ; R0 = row
   46 00000028         ; R1 = col
   47 00000028         ; R2 = picture address
   48 00000028         ; R3 = RGB
   49 00000028         ; Stack > width and height
   50 00000028         ; Stack must be cleared by caller



ARM Macro Assembler    Page 2 


   51 00000028         
   52 00000028 E92D4000        STMFD            SP!, {LR}
   53 0000002C         
   54 0000002C EBFFFFF8        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   55 00000030 E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   56 00000034         
   57 00000034 E8BD4000        LDMFD            SP!, {LR}
   58 00000038 E12FFF1E        BX               LR
   59 0000003C         
   60 0000003C         adjustPixel
   61 0000003C         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   62 0000003C         ; Applies a given contrast and brightness value
   63 0000003C         ; Parameters:
   64 0000003C         ; R0 = RGB
   65 0000003C         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   66 0000003C         ; R3 = brightness
   67 0000003C         
   68 0000003C E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   69 00000040         
   70 00000040 E3A018FF        LDR              R1, = 0x00FF0000 
                                                            ; mask = redMask
   71 00000044 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   72 00000048 EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   73 0000004C EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   74 00000050         
   75 00000050 E3A01CFF        LDR              R1, = 0x0000FF00
   76 00000054 EB000012        BL               getValueFromMask
   77 00000058 EB000006        BL               adjustColor
   78 0000005C EB000018        BL               setValueFromMask
   79 00000060         
   80 00000060 E3A010FF        LDR              R1, = 0x000000FF
   81 00000064 EB00000E        BL               getValueFromMask
   82 00000068 EB000002        BL               adjustColor
   83 0000006C EB000014        BL               setValueFromMask
   84 00000070         
   85 00000070 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   86 00000074 E12FFF1E        BX               LR
   87 00000078         
   88 00000078         adjustColor
   89 00000078         ; val = adjustColor(color, contrast, brightness)
   90 00000078         ; applies the brightness contrast formula
   91 00000078         ; Paramters:
   92 00000078         ; R2 = color



ARM Macro Assembler    Page 3 


   93 00000078         ; Stack > contrast, brightness that order.
   94 00000078         ; Return Values
   95 00000078         ; R2 = color
   96 00000078         ; Stack > contrast, brightness that order.
   97 00000078 E92D0030        STMFD            SP!, {R4, R5}
   98 0000007C E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
   99 00000080 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  100 00000084 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  101 00000088 E1A02222        LSR              R2, R2, #4  ; color /= 16
  102 0000008C E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  103 00000090 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  104 00000094 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  105 00000098 C3A020FF        LDRGT            R2, =255    ; color = 255
  106 0000009C E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  107 000000A0 E12FFF1E        BX               LR
  108 000000A4         
  109 000000A4         getValueFromMask
  110 000000A4         ; Gets the color value under a congruent mask
  111 000000A4         ; Expects masks of type FF
  112 000000A4         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  113 000000A4         ; Parameters
  114 000000A4         ; R0 = RGB
  115 000000A4         ; R1 = mask
  116 000000A4         ; Return Values
  117 000000A4         ; R1 = mask
  118 000000A4         ; R0 = colorValue
  119 000000A4 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  120 000000A8 E52D1004        PUSH             {R1}
  121 000000AC         getMaskWhile
  122 000000AC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  123 000000B0 2A000001        BCS              endGetMaskWhile ; {
  124 000000B4 E1A00220        LSR              R0, R0, #4  ; value >> 4
  125 000000B8 EAFFFFFB        B                getMaskWhile ; }
  126 000000BC         endGetMaskWhile
  127 000000BC E49D1004        POP              {R1}
  128 000000C0 E12FFF1E        BX               LR
  129 000000C4         
  130 000000C4         setValueFromMask
  131 000000C4         ; Sets the color value under a congruent mask
  132 000000C4         ; Expects masks of type FF
  133 000000C4         ; Takes in a value and a location in form FF
  134 000000C4         ; Parameters
  135 000000C4         ; R0 = RGB
  136 000000C4         ; R1 = mask
  137 000000C4         ; R2 = colorValue
  138 000000C4         ; Return Values
  139 000000C4         ; R0 = RGB
  140 000000C4 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color



ARM Macro Assembler    Page 4 


  141 000000C8         setMaskWhile
  142 000000C8 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  143 000000CC 2A000001        BCS              endSetMaskWhile ; {
  144 000000D0 E1A02202        LSL              R2, R2, #4  ; value >> 4
  145 000000D4 EAFFFFFB        B                setMaskWhile ; }
  146 000000D8         endSetMaskWhile                      ;
  147 000000D8 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  148 000000DC E12FFF1E        BX               LR
  149 000000E0         
  150 000000E0         averageN
  151 000000E0         ; Takes in five RGB values and computes their blur value
                       .
  152 000000E0         ; Parameters:
  153 000000E0         ; Stack > RGB value count    | 0 < count
  154 000000E0         ; Stack > count RGB values
  155 000000E0         ; Returns:
  156 000000E0         ; R0 = average
  157 000000E0         
  158 000000E0 E8BD0001        LDMFD            SP!, {R0}
  159 000000E4 E92D407E        STMFD            SP!, {R1 - R6, LR}
  160 000000E8 E3A04006        LDR              R4, =6
  161 000000EC E1A03000        MOV              R3, R0
  162 000000F0 E0845003        ADD              R5, R4, R3
  163 000000F4 E3A06000        LDR              R6, =0
  164 000000F8 E3A02000        LDR              R2, =0
  165 000000FC E3A018FF        LDR              R1, =0x00FF0000
  166 00000100 EB000007        BL               averageColor
  167 00000104 E3A01CFF        LDR              R1, =0x0000FF00
  168 00000108 EB000005        BL               averageColor
  169 0000010C E3A010FF        LDR              R1, =0x000000FF
  170 00000110 EB000003        BL               averageColor
  171 00000114 E1A00006        MOV              R0, R6
  172 00000118 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  173 0000011C E92D0002        STMFD            SP!, {R1}
  174 00000120 E12FFF1E        BX               LR
  175 00000124         
  176 00000124         averageColor
  177 00000124         forN
  178 00000124 E1550004        CMP              R5, R4
  179 00000128 0A000006        BEQ              endForN
  180 0000012C E79D0105        LDR              R0, [SP, R5, LSL #2]
  181 00000130 E52DE004        PUSH             {LR}
  182 00000134 EBFFFFDA        BL               getValueFromMask
  183 00000138 E49DE004        POP              {LR}
  184 0000013C E0822000        ADD              R2, R2, R0
  185 00000140 E2555001        SUBS             R5, R5, #1
  186 00000144 EAFFFFF6        B                forN
  187 00000148         endForN
  188 00000148 E52D1004        PUSH             {R1}
  189 0000014C E1A00002        MOV              R0, R2
  190 00000150 E1A01003        MOV              R1, R3
  191 00000154 E52DE004        PUSH             {LR}
  192 00000158 EB00000E        BL               divide
  193 0000015C E49DE004        POP              {LR}
  194 00000160 E3510000        CMP              R1, #0
  195 00000164 43A01000        LDRMI            R1, =0
  196 00000168 E35100FF        CMP              R1, #255



ARM Macro Assembler    Page 5 


  197 0000016C C3A010FF        LDRGT            R1, =255
  198 00000170 E1A00006        MOV              R0, R6
  199 00000174 E1A02001        MOV              R2, R1
  200 00000178 E49D1004        POP              {R1}
  201 0000017C E52DE004        PUSH             {LR}
  202 00000180 EBFFFFCF        BL               setValueFromMask
  203 00000184 E49DE004        POP              {LR}
  204 00000188 E1A06000        MOV              R6, R0
  205 0000018C E3A02000        LDR              R2, =0
  206 00000190 E0845003        ADD              R5, R4, R3
  207 00000194 E12FFF1E        BX               LR
  208 00000198         
  209 00000198         ; taken from my group work in the labs
  210 00000198         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  211 00000198 E92D400C        STMFD            SP!, {R2, R3, LR}
  212 0000019C         
  213 0000019C E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  214 000001A0 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  215 000001A4         
  216 000001A4 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  217 000001A8 059F00A4        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  218 000001AC 059F10A0        LDREQ            R1, =-1     ;load -1 into quoti
                                                            ent
  219 000001B0 0A000026        BEQ              stop        ;stop
  220 000001B4         
  221 000001B4         alignLoop                            ;else
  222 000001B4 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  223 000001B8 BA000002        BLT              endAlignLoop ;{
  224 000001BC E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  225 000001C0 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  226 000001C4 EAFFFFFA        B                alignLoop   ;}
  227 000001C8         endAlignLoop
  228 000001C8         
  229 000001C8         THEREVENGEOFTHEALIGNLOOP             ;{
  230 000001C8 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  231 000001CC E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  232 000001D0 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n
                                                            ot set{ 
  233 000001D4 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  234 000001D8 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  235 000001DC 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  236 000001E0 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 



ARM Macro Assembler    Page 6 


  237 000001E4         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  238 000001E4 E1A01002        MOV              R1, R2
  239 000001E8 E8BD400C        LDMFD            SP!, {R2, R3, LR}
  240 000001EC E12FFF1E        BX               LR
  241 000001F0         
  242 000001F0         
  243 000001F0         start
  244 000001F0         
  245 000001F0 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  246 000001F4 E1A04000        MOV              R4, R0      ; copy destination
  247 000001F8 E3A05000        LDR              R5, =pictureCopy
  248 000001FC EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  249 00000200 E1A06000        MOV              R6, R0
  250 00000204 EBFFFFFE        BL               getPicWidth
  251 00000208 E52D0004        PUSH             {R0}
  252 0000020C         
  253 0000020C E2466001        SUB              R6, R6, #1
  254 00000210         moveLoopI
  255 00000210 EBFFFFFE        BL               getPicWidth
  256 00000214 E1B07000        MOVS             R7, R0
  257 00000218 E2477001        SUB              R7, R7, #1
  258 0000021C         
  259 0000021C         moveLoopJ
  260 0000021C E1A00006        MOV              R0, R6
  261 00000220 E1A01007        MOV              R1, R7
  262 00000224         
  263 00000224 E1A02004        MOV              R2, R4
  264 00000228 EBFFFF74        BL               getPixel
  265 0000022C E1A03000        MOV              R3, R0
  266 00000230         
  267 00000230 E1A00006        MOV              R0, R6
  268 00000234 E51F223C        LDR              R2, pictureCopy
  269 00000238 EBFFFF7A        BL               putPixel
  270 0000023C         
  271 0000023C E2577001        SUBS             R7, R7, #1
  272 00000240 AAFFFFF5        BGE              moveLoopJ
  273 00000244         endMoveLoopJ
  274 00000244         
  275 00000244 E2566001        SUBS             R6, R6, #1
  276 00000248 AAFFFFF0        BGE              moveLoopI
  277 0000024C         endMoveLoopI
  278 0000024C         
  279 0000024C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  280 00000250         
  281 00000250 EAFFFFFE 
                       stop    B                stop
  282 00000254         
  283 00000254         
  284 00000254                 END
              FFFFFFFF 
              00000000 
Command Line: --debug --xref --apcs=interwork --depend=.\motionblur.d -o.\motio
nblur.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="



ARM Macro Assembler    Page 7 


NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mot
ionblur.lst MotionBlur.s
