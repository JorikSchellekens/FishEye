


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000         
   12 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   13 00000000         ; Parameters:
   14 00000000         ; R0 = row
   15 00000000         ; R1 = column
   16 00000000         ; R2 = image address
   17 00000000         ; Stack must be cleared by caller
   18 00000000         ; Returns:
   19 00000000         ; R0 = RGBvalue
   20 00000000 E92D4000        STMFD            SP!, {LR}
   21 00000004         
   22 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   23 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   24 0000000C         
   25 0000000C E8BD4000        LDMFD            SP!, {LR}
   26 00000010 E12FFF1E        BX               LR
   27 00000014         
   28 00000014         rowColToIndex
   29 00000014         ; converts row and colum to index
   30 00000014         ; Parameters
   31 00000014         ; R0 = row
   32 00000014         ; R1 = col
   33 00000014         ; Stack must be cleared by caller
   34 00000014         ; Return Values
   35 00000014         ; R0 addressIndex
   36 00000014 E92D4004        PUSH             {R2, LR}
   37 00000018 E1A02000        MOV              R2, R0
   38 0000001C EBFFFFFE        BL               getPicWidth
   39 00000020 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   40 00000024 E8BD4004        POP              {R2, LR}
   41 00000028 E12FFF1E        BX               LR
   42 0000002C         
   43 0000002C         putPixel
   44 0000002C         ; Stores a given RGB to a pixel at row, col
   45 0000002C         ; Parameters
   46 0000002C         ; R0 = row
   47 0000002C         ; R1 = col
   48 0000002C         ; R2 = picture address



ARM Macro Assembler    Page 2 


   49 0000002C         ; R3 = RGB
   50 0000002C         ; Stack must be cleared by caller
   51 0000002C         
   52 0000002C E92D4000        STMFD            SP!, {LR}
   53 00000030         
   54 00000030 EBFFFFF7        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   55 00000034 E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   56 00000038         
   57 00000038 E8BD4000        LDMFD            SP!, {LR}
   58 0000003C E12FFF1E        BX               LR
   59 00000040         
   60 00000040         adjustPixel
   61 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   62 00000040         ; Applies a given contrast and brightness value
   63 00000040         ; Parameters:
   64 00000040         ; R0 = RGB
   65 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   66 00000040         ; R3 = brightness
   67 00000040         
   68 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   69 00000044         
   70 00000044 E3A018FF        LDR              R1, = 0x00FF0000 
                                                            ; mask = redMask
   71 00000048 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   72 0000004C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   73 00000050 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   74 00000054         
   75 00000054 E3A01CFF        LDR              R1, = 0x0000FF00
   76 00000058 EB000012        BL               getValueFromMask
   77 0000005C EB000006        BL               adjustColor
   78 00000060 EB000018        BL               setValueFromMask
   79 00000064         
   80 00000064 E3A010FF        LDR              R1, = 0x000000FF
   81 00000068 EB00000E        BL               getValueFromMask
   82 0000006C EB000002        BL               adjustColor
   83 00000070 EB000014        BL               setValueFromMask
   84 00000074         
   85 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   86 00000078 E12FFF1E        BX               LR
   87 0000007C         
   88 0000007C         adjustColor
   89 0000007C         ; val = adjustColor(color, contrast, brightness)
   90 0000007C         ; applies the brightness contrast formula



ARM Macro Assembler    Page 3 


   91 0000007C         ; Paramters:
   92 0000007C         ; R2 = color
   93 0000007C         ; Stack > contrast, brightness that order.
   94 0000007C         ; Return Values
   95 0000007C         ; R2 = color
   96 0000007C         ; Stack > contrast, brightness that order.
   97 0000007C E92D0030        STMFD            SP!, {R4, R5}
   98 00000080 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
   99 00000084 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  100 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  101 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
  102 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  103 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  104 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  105 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  106 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  107 000000A4 E12FFF1E        BX               LR
  108 000000A8         
  109 000000A8         getValueFromMask
  110 000000A8         ; Gets the color value under a congruent mask
  111 000000A8         ; Expects masks of type FF
  112 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  113 000000A8         ; Parameters
  114 000000A8         ; R0 = RGB
  115 000000A8         ; R1 = mask
  116 000000A8         ; Return Values
  117 000000A8         ; R1 = mask
  118 000000A8         ; R0 = colorValue
  119 000000A8 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  120 000000AC E52D1004        PUSH             {R1}
  121 000000B0         getMaskWhile
  122 000000B0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  123 000000B4 2A000001        BCS              endGetMaskWhile ; {
  124 000000B8 E1A00220        LSR              R0, R0, #4  ; value >> 4
  125 000000BC EAFFFFFB        B                getMaskWhile ; }
  126 000000C0         endGetMaskWhile
  127 000000C0 E49D1004        POP              {R1}
  128 000000C4 E12FFF1E        BX               LR
  129 000000C8         
  130 000000C8         setValueFromMask
  131 000000C8         ; Sets the color value under a congruent mask
  132 000000C8         ; Expects masks of type FF
  133 000000C8         ; Takes in a value and a location in form FF
  134 000000C8         ; Parameters
  135 000000C8         ; R0 = RGB
  136 000000C8         ; R1 = mask
  137 000000C8         ; R2 = colorValue
  138 000000C8         ; Return Values
  139 000000C8         ; R0 = RGB



ARM Macro Assembler    Page 4 


  140 000000C8 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  141 000000CC         setMaskWhile
  142 000000CC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  143 000000D0 2A000001        BCS              endSetMaskWhile ; {
  144 000000D4 E1A02202        LSL              R2, R2, #4  ; value >> 4
  145 000000D8 EAFFFFFB        B                setMaskWhile ; }
  146 000000DC         endSetMaskWhile                      ;
  147 000000DC E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  148 000000E0 E12FFF1E        BX               LR
  149 000000E4         
  150 000000E4         averageN
  151 000000E4         ; Takes in five RGB values and computes their blur value
                       .
  152 000000E4         ; Parameters:
  153 000000E4         ; Stack > RGB value count    | 0 < count
  154 000000E4         ; Stack > count RGB values
  155 000000E4         ; Returns:
  156 000000E4         ; R0 = average
  157 000000E4         
  158 000000E4 E89D0001        LDMFD            SP, {R0}
  159 000000E8 E92D407E        STMFD            SP!, {R1 - R6, LR}
  160 000000EC E3A04007        LDR              R4, =7
  161 000000F0 E1A03000        MOV              R3, R0
  162 000000F4 E0845003        ADD              R5, R4, R3
  163 000000F8 E3A06000        LDR              R6, =0
  164 000000FC E3A02000        LDR              R2, =0
  165 00000100 E3A018FF        LDR              R1, =0x00FF0000
  166 00000104 EB000006        BL               averageColor
  167 00000108 E3A01CFF        LDR              R1, =0x0000FF00
  168 0000010C EB000004        BL               averageColor
  169 00000110 E3A010FF        LDR              R1, =0x000000FF
  170 00000114 EB000002        BL               averageColor
  171 00000118 E1A00006        MOV              R0, R6
  172 0000011C E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  173 00000120 E12FFF1E        BX               LR
  174 00000124         
  175 00000124         averageColor
  176 00000124         forN
  177 00000124 E1550004        CMP              R5, R4
  178 00000128 0A000006        BEQ              endForN
  179 0000012C E79D0105        LDR              R0, [SP, R5, LSL #2]
  180 00000130 E52DE004        PUSH             {LR}
  181 00000134 EBFFFFDB        BL               getValueFromMask
  182 00000138 E49DE004        POP              {LR}
  183 0000013C E0822000        ADD              R2, R2, R0
  184 00000140 E2555001        SUBS             R5, R5, #1
  185 00000144 EAFFFFF6        B                forN
  186 00000148         endForN
  187 00000148 E52D1004        PUSH             {R1}
  188 0000014C E1A00002        MOV              R0, R2
  189 00000150 E1A01003        MOV              R1, R3
  190 00000154 E52DE004        PUSH             {LR}
  191 00000158 EB00000E        BL               divide
  192 0000015C E49DE004        POP              {LR}
  193 00000160 E3510000        CMP              R1, #0
  194 00000164 43A01000        LDRMI            R1, =0



ARM Macro Assembler    Page 5 


  195 00000168 E35100FF        CMP              R1, #255
  196 0000016C C3A010FF        LDRGT            R1, =255
  197 00000170 E1A00006        MOV              R0, R6
  198 00000174 E1A02001        MOV              R2, R1
  199 00000178 E49D1004        POP              {R1}
  200 0000017C E52DE004        PUSH             {LR}
  201 00000180 EBFFFFD0        BL               setValueFromMask
  202 00000184 E49DE004        POP              {LR}
  203 00000188 E1A06000        MOV              R6, R0
  204 0000018C E3A02000        LDR              R2, =0
  205 00000190 E0845003        ADD              R5, R4, R3
  206 00000194 E12FFF1E        BX               LR
  207 00000198         
  208 00000198         ; taken from my group work in the labs
  209 00000198         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  210 00000198 E92D400C        STMFD            SP!, {R2, R3, LR}
  211 0000019C         
  212 0000019C E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  213 000001A0 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  214 000001A4         
  215 000001A4 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  216 000001A8 059F01A4        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  217 000001AC 059F11A0        LDREQ            R1, =-1     ;load -1 into quoti
                                                            ent
  218 000001B0 0A000066        BEQ              stop        ;stop
  219 000001B4         
  220 000001B4         alignLoop                            ;else
  221 000001B4 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  222 000001B8 BA000002        BLT              endAlignLoop ;{
  223 000001BC E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  224 000001C0 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  225 000001C4 EAFFFFFA        B                alignLoop   ;}
  226 000001C8         endAlignLoop
  227 000001C8         
  228 000001C8         THEREVENGEOFTHEALIGNLOOP             ;{
  229 000001C8 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  230 000001CC E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  231 000001D0 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n
                                                            ot set{ 
  232 000001D4 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  233 000001D8 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  234 000001DC 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient



ARM Macro Assembler    Page 6 


  235 000001E0 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 
  236 000001E4         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  237 000001E4 E1A01002        MOV              R1, R2
  238 000001E8 E8BD400C        LDMFD            SP!, {R2, R3, LR}
  239 000001EC E12FFF1E        BX               LR
  240 000001F0         
  241 000001F0         
  242 000001F0         start
  243 000001F0 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  244 000001F4 E1A04000        MOV              R4, R0      ; copy destination
  245 000001F8 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  246 000001FC E1A06000        MOV              R6, R0
  247 00000200         
  248 00000200         copyImage
  249 00000200 E2466001        SUB              R6, R6, #1
  250 00000204         moveLoopI
  251 00000204 EBFFFFFE        BL               getPicWidth
  252 00000208 E1B07000        MOVS             R7, R0
  253 0000020C E2477001        SUB              R7, R7, #1
  254 00000210         
  255 00000210         moveLoopJ
  256 00000210 E1A00006        MOV              R0, R6
  257 00000214 E1A01007        MOV              R1, R7
  258 00000218         
  259 00000218 E1A02004        MOV              R2, R4
  260 0000021C EBFFFF77        BL               getPixel
  261 00000220 E1A03000        MOV              R3, R0
  262 00000224         
  263 00000224 E1A00006        MOV              R0, R6
  264 00000228 E59F2128        LDR              R2, =copyAddress
  265 0000022C EBFFFF7E        BL               putPixel
  266 00000230         
  267 00000230 E2577001        SUBS             R7, R7, #1
  268 00000234 AAFFFFF5        BGE              moveLoopJ
  269 00000238         endMoveLoopJ
  270 00000238         
  271 00000238 E2566001        SUBS             R6, R6, #1
  272 0000023C AAFFFFF0        BGE              moveLoopI
  273 00000240         endMoveLoopI
  274 00000240         
  275 00000240         
  276 00000240         ;; /////////////////////////////////////////////////////
                       /////////////////////
  277 00000240 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  278 00000244 E1A06000        MOV              R6, R0
  279 00000248         
  280 00000248 E2466001        SUB              R6, R6, #1
  281 0000024C         move2LoopI
  282 0000024C EBFFFFFE        BL               getPicWidth
  283 00000250 E1B07000        MOVS             R7, R0
  284 00000254 E2477001        SUB              R7, R7, #1
  285 00000258         
  286 00000258         move2LoopJ



ARM Macro Assembler    Page 7 


  287 00000258         
  288 00000258 E3A09001        LDR              R9, =1      ; count = 1 (curren
                                                            t pixel)
  289 0000025C         
  290 0000025C E59F80F8        LDR              R8, =radius
  291 00000260 E5988000        LDR              R8, [R8]
  292 00000264 E1A0A006        MOV              R10, R6
  293 00000268 E1A0B007        MOV              R11, R7
  294 0000026C         
  295 0000026C E1A00006        MOV              R0, R6      ;
  296 00000270 E1A01007        MOV              R1, R7      ;
  297 00000274 E1A02004        MOV              R2, R4      ;
  298 00000278 EBFFFF60        BL               getPixel    ; 
  299 0000027C E52D0004        PUSH             {R0}
  300 00000280         
  301 00000280         topLoop
  302 00000280 4A00000B        BMI              endTopLoop
  303 00000284 E2566001        SUBS             R6, R6, #1
  304 00000288 4A000007        BMI              topFinally
  305 0000028C E2577001        SUBS             R7, R7, #1
  306 00000290 4A000005        BMI              topFinally
  307 00000294 E1A00006        MOV              R0, R6      ;
  308 00000298 E1A01007        MOV              R1, R7      ;
  309 0000029C E59F20B4        LDR              R2, =copyAddress ;
  310 000002A0 EBFFFF56        BL               getPixel    ; 
  311 000002A4 E52D0004        PUSH             {R0}
  312 000002A8 E2899001        ADD              R9, R9, #1
  313 000002AC         topFinally
  314 000002AC E2588001        SUBS             R8, R8, #1
  315 000002B0 1AFFFFF2        BNE              topLoop
  316 000002B4         endTopLoop
  317 000002B4         
  318 000002B4 E59F80A0        LDR              R8, =radius
  319 000002B8 E5988000        LDR              R8, [R8]
  320 000002BC E1A0600A        MOV              R6, R10
  321 000002C0 E1A0700B        MOV              R7, R11
  322 000002C4         
  323 000002C4         bottomLoop
  324 000002C4 4A00000F        BMI              endBottomLoop
  325 000002C8 E2866001        ADD              R6, R6, #1
  326 000002CC EBFFFFFE        BL               getPicHeight
  327 000002D0 E1560000        CMP              R6, R0
  328 000002D4 AA000009        BGE              bottomFinally
  329 000002D8 E2877001        ADD              R7, R7, #1
  330 000002DC EBFFFFFE        BL               getPicWidth
  331 000002E0 E1570000        CMP              R7, R0
  332 000002E4 AA000005        BGE              bottomFinally
  333 000002E8 E1A00006        MOV              R0, R6      ;
  334 000002EC E1A01007        MOV              R1, R7      ;
  335 000002F0 E59F2060        LDR              R2, =copyAddress ;
  336 000002F4 EBFFFF41        BL               getPixel    ; 
  337 000002F8 E52D0004        PUSH             {R0}
  338 000002FC E2899001        ADD              R9, R9, #1
  339 00000300         bottomFinally
  340 00000300 E2588001        SUBS             R8, R8, #1
  341 00000304 1AFFFFEE        BNE              bottomLoop
  342 00000308         endBottomLoop
  343 00000308         
  344 00000308 E52D9004        PUSH             {R9}



ARM Macro Assembler    Page 8 


  345 0000030C EBFFFF74        BL               averageN
  346 00000310         
  347 00000310         
  348 00000310 E1A0600A        MOV              R6, R10
  349 00000314 E1A0700B        MOV              R7, R11
  350 00000318         
  351 00000318 E1A03000        MOV              R3, R0
  352 0000031C E1A00006        MOV              R0, R6
  353 00000320 E1A01007        MOV              R1, R7
  354 00000324 E1A02004        MOV              R2, R4
  355 00000328 EBFFFF3F        BL               putPixel
  356 0000032C         
  357 0000032C         
  358 0000032C E49D9004        POP              {R9}
  359 00000330         clearStack
  360 00000330 E49DC004        POP              {R12}
  361 00000334 E2599001        SUBS             R9, R9, #1
  362 00000338 1AFFFFFC        BNE              clearStack
  363 0000033C         
  364 0000033C         
  365 0000033C E2577001        SUBS             R7, R7, #1  ; column --
  366 00000340 AAFFFFC4        BGE              move2LoopJ
  367 00000344         endMove2LoopJ
  368 00000344         
  369 00000344 E2566001        SUBS             R6, R6, #1
  370 00000348 AAFFFFBF        BGE              move2LoopI
  371 0000034C         endMove2LoopI
  372 0000034C         
  373 0000034C         
  374 0000034C         
  375 0000034C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  376 00000350         
  377 00000350 EAFFFFFE 
                       stop    B                stop
  378 00000354         
  379 00000354         
  380 00000354 FFFFFFFF 
              A1016300 
              00000000 
              00000000         AREA             Variables, DATA, READWRITE
  381 00000000         
  382 00000000 00000003 
                       radius  DCD              3
  383 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\motionblur.d -o.\motio
nblur.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mot
ionblur.lst MotionBlur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file MotionBlur.s
   Uses
      None
Comment: MotionBlur unused
THEENDOFTHEREVENGEOFTHEALIGNLOOP 000001E4

Symbol: THEENDOFTHEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 236 in file MotionBlur.s
   Uses
      At line 231 in file MotionBlur.s
Comment: THEENDOFTHEREVENGEOFTHEALIGNLOOP used once
THEREVENGEOFTHEALIGNLOOP 000001C8

Symbol: THEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 228 in file MotionBlur.s
   Uses
      At line 235 in file MotionBlur.s
Comment: THEREVENGEOFTHEALIGNLOOP used once
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 88 in file MotionBlur.s
   Uses
      At line 72 in file MotionBlur.s
      At line 77 in file MotionBlur.s
      At line 82 in file MotionBlur.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 60 in file MotionBlur.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 000001B4

Symbol: alignLoop
   Definitions
      At line 220 in file MotionBlur.s
   Uses
      At line 225 in file MotionBlur.s
Comment: alignLoop used once
averageColor 00000124

Symbol: averageColor
   Definitions
      At line 175 in file MotionBlur.s
   Uses
      At line 166 in file MotionBlur.s
      At line 168 in file MotionBlur.s
      At line 170 in file MotionBlur.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


averageN 000000E4

Symbol: averageN
   Definitions
      At line 150 in file MotionBlur.s
   Uses
      At line 345 in file MotionBlur.s
Comment: averageN used once
bottomFinally 00000300

Symbol: bottomFinally
   Definitions
      At line 339 in file MotionBlur.s
   Uses
      At line 328 in file MotionBlur.s
      At line 332 in file MotionBlur.s

bottomLoop 000002C4

Symbol: bottomLoop
   Definitions
      At line 323 in file MotionBlur.s
   Uses
      At line 341 in file MotionBlur.s
Comment: bottomLoop used once
clearStack 00000330

Symbol: clearStack
   Definitions
      At line 359 in file MotionBlur.s
   Uses
      At line 362 in file MotionBlur.s
Comment: clearStack used once
copyImage 00000200

Symbol: copyImage
   Definitions
      At line 248 in file MotionBlur.s
   Uses
      None
Comment: copyImage unused
divide 00000198

Symbol: divide
   Definitions
      At line 209 in file MotionBlur.s
   Uses
      At line 191 in file MotionBlur.s
Comment: divide used once
endAlignLoop 000001C8

Symbol: endAlignLoop
   Definitions
      At line 226 in file MotionBlur.s
   Uses
      At line 222 in file MotionBlur.s
Comment: endAlignLoop used once
endBottomLoop 00000308



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: endBottomLoop
   Definitions
      At line 342 in file MotionBlur.s
   Uses
      At line 324 in file MotionBlur.s
Comment: endBottomLoop used once
endForN 00000148

Symbol: endForN
   Definitions
      At line 186 in file MotionBlur.s
   Uses
      At line 178 in file MotionBlur.s
Comment: endForN used once
endGetMaskWhile 000000C0

Symbol: endGetMaskWhile
   Definitions
      At line 126 in file MotionBlur.s
   Uses
      At line 123 in file MotionBlur.s
Comment: endGetMaskWhile used once
endMove2LoopI 0000034C

Symbol: endMove2LoopI
   Definitions
      At line 371 in file MotionBlur.s
   Uses
      None
Comment: endMove2LoopI unused
endMove2LoopJ 00000344

Symbol: endMove2LoopJ
   Definitions
      At line 367 in file MotionBlur.s
   Uses
      None
Comment: endMove2LoopJ unused
endMoveLoopI 00000240

Symbol: endMoveLoopI
   Definitions
      At line 273 in file MotionBlur.s
   Uses
      None
Comment: endMoveLoopI unused
endMoveLoopJ 00000238

Symbol: endMoveLoopJ
   Definitions
      At line 269 in file MotionBlur.s
   Uses
      None
Comment: endMoveLoopJ unused
endSetMaskWhile 000000DC

Symbol: endSetMaskWhile
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 146 in file MotionBlur.s
   Uses
      At line 143 in file MotionBlur.s
Comment: endSetMaskWhile used once
endTopLoop 000002B4

Symbol: endTopLoop
   Definitions
      At line 316 in file MotionBlur.s
   Uses
      At line 302 in file MotionBlur.s
Comment: endTopLoop used once
forN 00000124

Symbol: forN
   Definitions
      At line 176 in file MotionBlur.s
   Uses
      At line 185 in file MotionBlur.s
Comment: forN used once
getMaskWhile 000000B0

Symbol: getMaskWhile
   Definitions
      At line 121 in file MotionBlur.s
   Uses
      At line 125 in file MotionBlur.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 12 in file MotionBlur.s
   Uses
      At line 260 in file MotionBlur.s
      At line 298 in file MotionBlur.s
      At line 310 in file MotionBlur.s
      At line 336 in file MotionBlur.s

getValueFromMask 000000A8

Symbol: getValueFromMask
   Definitions
      At line 109 in file MotionBlur.s
   Uses
      At line 71 in file MotionBlur.s
      At line 76 in file MotionBlur.s
      At line 81 in file MotionBlur.s
      At line 181 in file MotionBlur.s

move2LoopI 0000024C

Symbol: move2LoopI
   Definitions
      At line 281 in file MotionBlur.s
   Uses
      At line 370 in file MotionBlur.s
Comment: move2LoopI used once
move2LoopJ 00000258



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: move2LoopJ
   Definitions
      At line 286 in file MotionBlur.s
   Uses
      At line 366 in file MotionBlur.s
Comment: move2LoopJ used once
moveLoopI 00000204

Symbol: moveLoopI
   Definitions
      At line 250 in file MotionBlur.s
   Uses
      At line 272 in file MotionBlur.s
Comment: moveLoopI used once
moveLoopJ 00000210

Symbol: moveLoopJ
   Definitions
      At line 255 in file MotionBlur.s
   Uses
      At line 268 in file MotionBlur.s
Comment: moveLoopJ used once
putPixel 0000002C

Symbol: putPixel
   Definitions
      At line 43 in file MotionBlur.s
   Uses
      At line 265 in file MotionBlur.s
      At line 355 in file MotionBlur.s

rowColToIndex 00000014

Symbol: rowColToIndex
   Definitions
      At line 28 in file MotionBlur.s
   Uses
      At line 22 in file MotionBlur.s
      At line 54 in file MotionBlur.s

setMaskWhile 000000CC

Symbol: setMaskWhile
   Definitions
      At line 141 in file MotionBlur.s
   Uses
      At line 145 in file MotionBlur.s
Comment: setMaskWhile used once
setValueFromMask 000000C8

Symbol: setValueFromMask
   Definitions
      At line 130 in file MotionBlur.s
   Uses
      At line 73 in file MotionBlur.s
      At line 78 in file MotionBlur.s
      At line 83 in file MotionBlur.s
      At line 201 in file MotionBlur.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


start 000001F0

Symbol: start
   Definitions
      At line 242 in file MotionBlur.s
   Uses
      At line 8 in file MotionBlur.s
Comment: start used once
stop 00000350

Symbol: stop
   Definitions
      At line 377 in file MotionBlur.s
   Uses
      At line 218 in file MotionBlur.s
      At line 377 in file MotionBlur.s

topFinally 000002AC

Symbol: topFinally
   Definitions
      At line 313 in file MotionBlur.s
   Uses
      At line 304 in file MotionBlur.s
      At line 306 in file MotionBlur.s

topLoop 00000280

Symbol: topLoop
   Definitions
      At line 301 in file MotionBlur.s
   Uses
      At line 315 in file MotionBlur.s
Comment: topLoop used once
39 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 380 in file MotionBlur.s
   Uses
      None
Comment: Variables unused
radius 00000000

Symbol: radius
   Definitions
      At line 382 in file MotionBlur.s
   Uses
      At line 290 in file MotionBlur.s
      At line 318 in file MotionBlur.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file MotionBlur.s
   Uses
      At line 264 in file MotionBlur.s
      At line 309 in file MotionBlur.s
      At line 335 in file MotionBlur.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file MotionBlur.s
   Uses
      At line 243 in file MotionBlur.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file MotionBlur.s
   Uses
      At line 245 in file MotionBlur.s
      At line 277 in file MotionBlur.s
      At line 326 in file MotionBlur.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file MotionBlur.s
   Uses
      At line 38 in file MotionBlur.s
      At line 251 in file MotionBlur.s
      At line 282 in file MotionBlur.s
      At line 330 in file MotionBlur.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file MotionBlur.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file MotionBlur.s
   Uses
      At line 375 in file MotionBlur.s
Comment: putPic used once
5 symbols
386 symbols in table
