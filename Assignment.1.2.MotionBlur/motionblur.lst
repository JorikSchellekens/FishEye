


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   11 00000000         ; Parameters:
   12 00000000         ; R0 = row
   13 00000000         ; R1 = column
   14 00000000         ; Stack > base address, height and width
   15 00000000         ; Returns:
   16 00000000         ; R0 = RGBvalue
   17 00000000 E92D4000        STMFD            SP!, {LR}
   18 00000004         
   19 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   20 00000008 E7940100        LDR              R0, [R4, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   21 0000000C         
   22 0000000C E8BD4000        LDMFD            SP!, {LR}
   23 00000010 E12FFF1E        BX               LR
   24 00000014         
   25 00000014         rowColToIndex
   26 00000014         ; converts row and colum to index
   27 00000014         ; Parameters
   28 00000014         ; R0 = row
   29 00000014         ; R1 = col
   30 00000014         ; Return Values
   31 00000014         ; R0 addressIndex
   32 00000014 E0000096        MUL              R0, R6, R0  ; addressOffset = r
                                                            ow * WIDTH
   33 00000018 E0800001        ADD              R0, R0, R1  ; addressOffset += 
                                                            col
   34 0000001C E12FFF1E        BX               LR
   35 00000020         
   36 00000020         putPixel
   37 00000020         ; Stores a given RGB to an pixel of at row, col
   38 00000020         ; Parameters
   39 00000020         ; R0 = row
   40 00000020         ; R1 = col
   41 00000020         ; R2 = RGB
   42 00000020 E92D4000        STMFD            SP!, {LR}
   43 00000024         
   44 00000024 EBFFFFFA        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   45 00000028 E7842100        STR              R2, [R4, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB



ARM Macro Assembler    Page 2 


   46 0000002C         
   47 0000002C E8BD4000        LDMFD            SP!, {LR}
   48 00000030 E12FFF1E        BX               LR
   49 00000034         
   50 00000034         adjustPixel
   51 00000034         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   52 00000034         ; Applies a given contrast and brightness value
   53 00000034         ; Parameters:
   54 00000034         ; R0 = RGB
   55 00000034         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   56 00000034         ; R3 = brightness
   57 00000034         
   58 00000034 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   59 00000038         
   60 00000038 E3A018FF        LDR              R1, = 0x00FF0000 
                                                            ; mask = redMask
   61 0000003C EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   62 00000040 EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   63 00000044 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   64 00000048         
   65 00000048 E3A01CFF        LDR              R1, = 0x0000FF00
   66 0000004C EB000012        BL               getValueFromMask
   67 00000050 EB000006        BL               adjustColor
   68 00000054 EB000018        BL               setValueFromMask
   69 00000058         
   70 00000058 E3A010FF        LDR              R1, = 0x000000FF
   71 0000005C EB00000E        BL               getValueFromMask
   72 00000060 EB000002        BL               adjustColor
   73 00000064 EB000014        BL               setValueFromMask
   74 00000068         
   75 00000068 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   76 0000006C E12FFF1E        BX               LR
   77 00000070         
   78 00000070         adjustColor
   79 00000070         ; val = adjustColor(color, contrast, brightness)
   80 00000070         ; applies the brightness contrast formula
   81 00000070         ; Paramters:
   82 00000070         ; R2 = color
   83 00000070         ; Stack > contrast, brightness that order.
   84 00000070         ; Return Values
   85 00000070         ; R2 = color
   86 00000070         ; Stack > contrast, brightness that order.
   87 00000070 E92D0030        STMFD            SP!, {R4, R5}
   88 00000074 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
   89 00000078 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
   90 0000007C E0020294        MUL              R2, R4, R2  ; color *= contrast



ARM Macro Assembler    Page 3 


                                                            
   91 00000080 E1A02222        LSR              R2, R2, #4  ; color /= 16
   92 00000084 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
   93 00000088 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
   94 0000008C E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
   95 00000090 C3A020FF        LDRGT            R2, =255    ; color = 255
   96 00000094 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
   97 00000098 E12FFF1E        BX               LR
   98 0000009C         
   99 0000009C         getValueFromMask
  100 0000009C         ; Gets the color value under a congruent mask
  101 0000009C         ; Expects masks of type FF
  102 0000009C         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  103 0000009C         ; Parameters
  104 0000009C         ; R0 = RGB
  105 0000009C         ; R1 = mask
  106 0000009C         ; Return Values
  107 0000009C         ; R1 = mask
  108 0000009C         ; R0 = colorValue
  109 0000009C E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  110 000000A0 E52D1004        PUSH             {R1}
  111 000000A4         getMaskWhile
  112 000000A4 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  113 000000A8 2A000001        BCS              endGetMaskWhile ; {
  114 000000AC E1A00220        LSR              R0, R0, #4  ; value >> 4
  115 000000B0 EAFFFFFB        B                getMaskWhile ; }
  116 000000B4         endGetMaskWhile
  117 000000B4 E49D1004        POP              {R1}
  118 000000B8 E12FFF1E        BX               LR
  119 000000BC         
  120 000000BC         setValueFromMask
  121 000000BC         ; Sets the color value under a congruent mask
  122 000000BC         ; Expects masks of type FF
  123 000000BC         ; Takes in a value and a location in form FF
  124 000000BC         ; Parameters
  125 000000BC         ; R0 = RGB
  126 000000BC         ; R1 = mask
  127 000000BC         ; R2 = colorValue
  128 000000BC         ; Return Values
  129 000000BC         ; R0 = RGB
  130 000000BC E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  131 000000C0         setMaskWhile
  132 000000C0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  133 000000C4 2A000001        BCS              endSetMaskWhile ; {
  134 000000C8 E1A02202        LSL              R2, R2, #4  ; value >> 4
  135 000000CC EAFFFFFB        B                setMaskWhile ; }
  136 000000D0         endSetMaskWhile                      ;
  137 000000D0 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  138 000000D4 E12FFF1E        BX               LR



ARM Macro Assembler    Page 4 


  139 000000D8         
  140 000000D8         averageN
  141 000000D8         ; Takes in five RGB values and computes their blur value
                       .
  142 000000D8         ; Parameters:
  143 000000D8         ; Stack > RGB value count    | 0 < count
  144 000000D8         ; Stack > count RGB values
  145 000000D8         ; Returns:
  146 000000D8         ; R0 = average
  147 000000D8         
  148 000000D8 E8BD0001        LDMFD            SP!, {R0}
  149 000000DC E92D407E        STMFD            SP!, {R1 - R6, LR}
  150 000000E0 E3A04006        LDR              R4, =6
  151 000000E4 E1A03000        MOV              R3, R0
  152 000000E8 E0845003        ADD              R5, R4, R3
  153 000000EC E3A06000        LDR              R6, =0
  154 000000F0 E3A02000        LDR              R2, =0
  155 000000F4 E3A018FF        LDR              R1, =0x00FF0000
  156 000000F8 EB000007        BL               averageColor
  157 000000FC E3A01CFF        LDR              R1, =0x0000FF00
  158 00000100 EB000005        BL               averageColor
  159 00000104 E3A010FF        LDR              R1, =0x000000FF
  160 00000108 EB000003        BL               averageColor
  161 0000010C E1A00006        MOV              R0, R6
  162 00000110 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  163 00000114 E92D0002        STMFD            SP!, {R1}
  164 00000118 E12FFF1E        BX               LR
  165 0000011C         
  166 0000011C         averageColor
  167 0000011C         forN
  168 0000011C E1550004        CMP              R5, R4
  169 00000120 0A000006        BEQ              endForN
  170 00000124 E79D0105        LDR              R0, [SP, R5, LSL #2]
  171 00000128 E52DE004        PUSH             {LR}
  172 0000012C EBFFFFDA        BL               getValueFromMask
  173 00000130 E49DE004        POP              {LR}
  174 00000134 E0822000        ADD              R2, R2, R0
  175 00000138 E2555001        SUBS             R5, R5, #1
  176 0000013C EAFFFFF6        B                forN
  177 00000140         endForN
  178 00000140 E52D1004        PUSH             {R1}
  179 00000144 E1A00002        MOV              R0, R2
  180 00000148 E1A01003        MOV              R1, R3
  181 0000014C E52DE004        PUSH             {LR}
  182 00000150 EB00000E        BL               divide
  183 00000154 E49DE004        POP              {LR}
  184 00000158 E3510000        CMP              R1, #0
  185 0000015C 43A01000        LDRMI            R1, =0
  186 00000160 E35100FF        CMP              R1, #255
  187 00000164 C3A010FF        LDRGT            R1, =255
  188 00000168 E1A00006        MOV              R0, R6
  189 0000016C E1A02001        MOV              R2, R1
  190 00000170 E49D1004        POP              {R1}
  191 00000174 E52DE004        PUSH             {LR}
  192 00000178 EBFFFFCF        BL               setValueFromMask
  193 0000017C E49DE004        POP              {LR}
  194 00000180 E1A06000        MOV              R6, R0
  195 00000184 E3A02000        LDR              R2, =0
  196 00000188 E0845003        ADD              R5, R4, R3



ARM Macro Assembler    Page 5 


  197 0000018C E12FFF1E        BX               LR
  198 00000190         
  199 00000190         ; taken from my group work in the labs
  200 00000190         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  201 00000190 E92D400C        STMFD            SP!, {R2, R3, LR}
  202 00000194         
  203 00000194 E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  204 00000198 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  205 0000019C         
  206 0000019C E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  207 000001A0 059F0090        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  208 000001A4 059F108C        LDREQ            R1, =-1     ;load -1 into quoti
                                                            ent
  209 000001A8 0A000021        BEQ              stop        ;stop
  210 000001AC         
  211 000001AC         alignLoop                            ;else
  212 000001AC E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  213 000001B0 BA000002        BLT              endAlignLoop ;{
  214 000001B4 E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  215 000001B8 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  216 000001BC EAFFFFFA        B                alignLoop   ;}
  217 000001C0         endAlignLoop
  218 000001C0         
  219 000001C0         THEREVENGEOFTHEALIGNLOOP             ;{
  220 000001C0 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  221 000001C4 E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  222 000001C8 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n
                                                            ot set{ 
  223 000001CC E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  224 000001D0 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  225 000001D4 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  226 000001D8 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 
  227 000001DC         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  228 000001DC E1A01002        MOV              R1, R2
  229 000001E0 E8BD400C        LDMFD            SP!, {R2, R3, LR}
  230 000001E4 E12FFF1E        BX               LR
  231 000001E8         
  232 000001E8         
  233 000001E8         start
  234 000001E8         
  235 000001E8 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 



ARM Macro Assembler    Page 6 


                                                            in R4
  236 000001EC E1A04000        MOV              R4, R0
  237 000001F0 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  238 000001F4 E1A05000        MOV              R5, R0
  239 000001F8 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
  240 000001FC E1A06000        MOV              R6, R0
  241 00000200         
  242 00000200 E1A07005        MOV              R7, R5      ; HEIGHT  (Constant
                                                            s) // This official
                                                            ly breaks the state
                                                            lessnes.
  243 00000204 E1A08006        MOV              R8, R6      ; WIDTH
  244 00000208         
  245 00000208 E59F002C        LDR              R0, =0x0055AA05
  246 0000020C E3A01000        LDR              R1, =0
  247 00000210 E52D0004        PUSH             {R0}
  248 00000214 E52D1004        PUSH             {R1}
  249 00000218 E52D1004        PUSH             {R1}
  250 0000021C E52D1004        PUSH             {R1}
  251 00000220 E52D1004        PUSH             {R1}
  252 00000224 E3A01005        LDR              R1, =5
  253 00000228 E52D1004        PUSH             {R1}
  254 0000022C EBFFFFA9        BL               averageN
  255 00000230         ; your code goes here
  256 00000230         
  257 00000230 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  258 00000234         
  259 00000234 EAFFFFFE 
                       stop    B                stop
  260 00000238         
  261 00000238         
  262 00000238                 END
              FFFFFFFF 
              0055AA05 
Command Line: --debug --xref --apcs=interwork --depend=.\motionblur.d -o.\motio
nblur.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Ph
ilips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="
NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVE
C SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\mot
ionblur.lst MotionBlur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file MotionBlur.s
   Uses
      None
Comment: MotionBlur unused
THEENDOFTHEREVENGEOFTHEALIGNLOOP 000001DC

Symbol: THEENDOFTHEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 227 in file MotionBlur.s
   Uses
      At line 222 in file MotionBlur.s
Comment: THEENDOFTHEREVENGEOFTHEALIGNLOOP used once
THEREVENGEOFTHEALIGNLOOP 000001C0

Symbol: THEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 219 in file MotionBlur.s
   Uses
      At line 226 in file MotionBlur.s
Comment: THEREVENGEOFTHEALIGNLOOP used once
adjustColor 00000070

Symbol: adjustColor
   Definitions
      At line 78 in file MotionBlur.s
   Uses
      At line 62 in file MotionBlur.s
      At line 67 in file MotionBlur.s
      At line 72 in file MotionBlur.s

adjustPixel 00000034

Symbol: adjustPixel
   Definitions
      At line 50 in file MotionBlur.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 000001AC

Symbol: alignLoop
   Definitions
      At line 211 in file MotionBlur.s
   Uses
      At line 216 in file MotionBlur.s
Comment: alignLoop used once
averageColor 0000011C

Symbol: averageColor
   Definitions
      At line 166 in file MotionBlur.s
   Uses
      At line 156 in file MotionBlur.s
      At line 158 in file MotionBlur.s
      At line 160 in file MotionBlur.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


averageN 000000D8

Symbol: averageN
   Definitions
      At line 140 in file MotionBlur.s
   Uses
      At line 254 in file MotionBlur.s
Comment: averageN used once
divide 00000190

Symbol: divide
   Definitions
      At line 200 in file MotionBlur.s
   Uses
      At line 182 in file MotionBlur.s
Comment: divide used once
endAlignLoop 000001C0

Symbol: endAlignLoop
   Definitions
      At line 217 in file MotionBlur.s
   Uses
      At line 213 in file MotionBlur.s
Comment: endAlignLoop used once
endForN 00000140

Symbol: endForN
   Definitions
      At line 177 in file MotionBlur.s
   Uses
      At line 169 in file MotionBlur.s
Comment: endForN used once
endGetMaskWhile 000000B4

Symbol: endGetMaskWhile
   Definitions
      At line 116 in file MotionBlur.s
   Uses
      At line 113 in file MotionBlur.s
Comment: endGetMaskWhile used once
endSetMaskWhile 000000D0

Symbol: endSetMaskWhile
   Definitions
      At line 136 in file MotionBlur.s
   Uses
      At line 133 in file MotionBlur.s
Comment: endSetMaskWhile used once
forN 0000011C

Symbol: forN
   Definitions
      At line 167 in file MotionBlur.s
   Uses
      At line 176 in file MotionBlur.s
Comment: forN used once
getMaskWhile 000000A4




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: getMaskWhile
   Definitions
      At line 111 in file MotionBlur.s
   Uses
      At line 115 in file MotionBlur.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 10 in file MotionBlur.s
   Uses
      None
Comment: getPixel unused
getValueFromMask 0000009C

Symbol: getValueFromMask
   Definitions
      At line 99 in file MotionBlur.s
   Uses
      At line 61 in file MotionBlur.s
      At line 66 in file MotionBlur.s
      At line 71 in file MotionBlur.s
      At line 172 in file MotionBlur.s

putPixel 00000020

Symbol: putPixel
   Definitions
      At line 36 in file MotionBlur.s
   Uses
      None
Comment: putPixel unused
rowColToIndex 00000014

Symbol: rowColToIndex
   Definitions
      At line 25 in file MotionBlur.s
   Uses
      At line 19 in file MotionBlur.s
      At line 44 in file MotionBlur.s

setMaskWhile 000000C0

Symbol: setMaskWhile
   Definitions
      At line 131 in file MotionBlur.s
   Uses
      At line 135 in file MotionBlur.s
Comment: setMaskWhile used once
setValueFromMask 000000BC

Symbol: setValueFromMask
   Definitions
      At line 120 in file MotionBlur.s
   Uses
      At line 63 in file MotionBlur.s
      At line 68 in file MotionBlur.s
      At line 73 in file MotionBlur.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 192 in file MotionBlur.s

start 000001E8

Symbol: start
   Definitions
      At line 233 in file MotionBlur.s
   Uses
      At line 8 in file MotionBlur.s
Comment: start used once
stop 00000234

Symbol: stop
   Definitions
      At line 259 in file MotionBlur.s
   Uses
      At line 209 in file MotionBlur.s
      At line 259 in file MotionBlur.s

23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file MotionBlur.s
   Uses
      At line 235 in file MotionBlur.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file MotionBlur.s
   Uses
      At line 237 in file MotionBlur.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file MotionBlur.s
   Uses
      At line 239 in file MotionBlur.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 3 in file MotionBlur.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file MotionBlur.s
   Uses
      At line 257 in file MotionBlur.s
Comment: putPic used once
5 symbols
367 symbols in table
