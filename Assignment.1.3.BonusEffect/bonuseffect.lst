


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000         
   15 00000000 00000014 
                       lensq   EQU              20
   16 00000000         
   17 00000000         
   18 00000000         
   19 00000000         ;<--------------Pixel Manipulation-------------->
   20 00000000         getPixel                             ; RGBval = getPixel
                                                            (row, col, imageAdd
                                                            ress)
   21 00000000         ; Parameters:
   22 00000000         ;     R0 = row
   23 00000000         ;     R1 = column
   24 00000000         ;     R2 = imageAddress
   25 00000000         ; Returns:
   26 00000000         ;     R0 = RGBvalue
   27 00000000         
   28 00000000 E92D4000        STMFD            SP!, {LR}
   29 00000004         
   30 00000004 EB000007        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   31 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memory.word(pict
                                                            ureaddress + addres
                                                            sOffset * 4)
   32 0000000C         
   33 0000000C E8BD4000        LDMFD            SP!, {LR}
   34 00000010 E12FFF1E        BX               LR          ; return RGB
   35 00000014         
   36 00000014         
   37 00000014         putPixel                             ; putPixel(row, col
                                                            , imageAddress)
   38 00000014         ; Stores a given RGB to a pixel at row, col
   39 00000014         ; Parameters:
   40 00000014         ;     R0 = row
   41 00000014         ;     R1 = col
   42 00000014         ;     R2 = picture address
   43 00000014         ;     R3 = RGB



ARM Macro Assembler    Page 2 


   44 00000014         
   45 00000014 E92D4000        STMFD            SP!, {LR}
   46 00000018         
   47 00000018 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   48 0000001C E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   49 00000020         
   50 00000020 E8BD4000        LDMFD            SP!, {LR}
   51 00000024 E12FFF1E        BX               LR
   52 00000028         
   53 00000028         
   54 00000028         rowColToIndex
   55 00000028         ; converts row and colum to index
   56 00000028         ; Parameters:
   57 00000028         ;     R0 = row
   58 00000028         ;     R1 = col
   59 00000028         ; Return Values
   60 00000028         ;     R0 addressIndex
   61 00000028 E92D4004        PUSH             {R2, LR}
   62 0000002C E1A02000        MOV              R2, R0
   63 00000030         
   64 00000030 EBFFFFFE        BL               getPicWidth ; width = getPicWid
                                                            th
   65 00000034 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   66 00000038         
   67 00000038 E8BD4004        POP              {R2, LR}
   68 0000003C E12FFF1E        BX               LR
   69 00000040         
   70 00000040         
   71 00000040         getValueFromMask
   72 00000040         ; Gets the color value under a congruent mask
   73 00000040         ; Expects masks of type FF
   74 00000040         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
   75 00000040         ; Parameters:
   76 00000040         ;     R0 = RGB
   77 00000040         ;    R1 = mask
   78 00000040         ; Return Values:
   79 00000040         ;     R1 = mask
   80 00000040         ;     R0 = colorValue
   81 00000040 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
   82 00000044 E52D1004        PUSH             {R1}
   83 00000048         getMaskWhile
   84 00000048 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
   85 0000004C 2A000001        BCS              endGetMaskWhile ; {
   86 00000050 E1A00220        LSR              R0, R0, #4  ; value >> 4
   87 00000054 EAFFFFFB        B                getMaskWhile ; }
   88 00000058         endGetMaskWhile
   89 00000058 E49D1004        POP              {R1}
   90 0000005C E12FFF1E        BX               LR
   91 00000060         



ARM Macro Assembler    Page 3 


   92 00000060         
   93 00000060         setValueFromMask
   94 00000060         ; Sets the color value under a congruent mask
   95 00000060         ; Expects masks of type FF
   96 00000060         ; Takes in a value and a location in form FF
   97 00000060         ; Parameters:
   98 00000060         ;     R0 = RGB
   99 00000060         ;     R1 = mask
  100 00000060         ;     R2 = colorValue
  101 00000060         ; Return Values:
  102 00000060         ;     R0 = RGB
  103 00000060 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  104 00000064         setMaskWhile
  105 00000064 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  106 00000068 2A000001        BCS              endSetMaskWhile ; {
  107 0000006C E1A02202        LSL              R2, R2, #4  ; value >> 4
  108 00000070 EAFFFFFB        B                setMaskWhile ; }
  109 00000074         endSetMaskWhile                      ;
  110 00000074 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  111 00000078 E12FFF1E        BX               LR
  112 0000007C         
  113 0000007C         
  114 0000007C         copy                                 ; copy(row, col)
  115 0000007C         ; Copies a pixel between the original and duplicate imag
                       e locations
  116 0000007C         ; Parameters:
  117 0000007C         ;     R0 = row
  118 0000007C         ;    R1 = col
  119 0000007C         
  120 0000007C         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  121 0000007C E92D40CF        PUSH             {R0, R1, R2, R3, R6, R7, LR}
  122 00000080 E1A06000        MOV              R6, R0      ; save row
  123 00000084 E1A07001        MOV              R7, R1      ; save col
  124 00000088         
  125 00000088 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  126 0000008C E1A02000        MOV              R2, R0      ; 
  127 00000090 E1A00006        MOV              R0, R6      ;
  128 00000094 E1A01007        MOV              R1, R7      ;
  129 00000098 EBFFFFD8        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  130 0000009C         
  131 0000009C E1A03000        MOV              R3, R0      ;
  132 000000A0 E1A00006        MOV              R0, R6      ;
  133 000000A4 E59F2568        LDR              R2, =copyAddress ;
  134 000000A8 EBFFFFD9        BL               putPixel    ; putPixel(row, col
                                                            , copyAddress)
  135 000000AC         
  136 000000AC E8BD40CF        POP              {R0, R1, R2, R3, R6, R7, LR}
  137 000000B0 E12FFF1E        BX               LR
  138 000000B4         
  139 000000B4         
  140 000000B4         lensEffectCopy                       ; lensEffectCopy(ro



ARM Macro Assembler    Page 4 


                                                            w, col)
  141 000000B4         ; Wrapper to apply greyscale to original
  142 000000B4         ; Copies a pixel at the given row and col from the dupli
                       cate image, applies the lens transposition logic and ins
                       erts it into the displayed image.
  143 000000B4         ; Parameters:
  144 000000B4         ;    R0 = row
  145 000000B4         ;    R1 = col
  146 000000B4         
  147 000000B4         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  148 000000B4 E92D40DF        PUSH             {R0, R1, R2, R3, R4, R6, R7, LR
}
  149 000000B8 E1A06000        MOV              R6, R0      ; save row
  150 000000BC E1A07001        MOV              R7, R1      ; save col
  151 000000C0         
  152 000000C0 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  153 000000C4 E1A04000        MOV              R4, R0      ; save originalAddr
                                                            ess 
  154 000000C8         
  155 000000C8 E1A00006        MOV              R0, R6      ;
  156 000000CC EB0000E9        BL               applyLens   ; row, col = applyL
                                                            ens(row, col)
  157 000000D0 E59F253C        LDR              R2, =copyAddress ;
  158 000000D4 EBFFFFC9        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss)
  159 000000D8         
  160 000000D8 E1A03000        MOV              R3, R0      ; 
  161 000000DC E1A00006        MOV              R0, R6      ;
  162 000000E0 E1A01007        MOV              R1, R7      ;
  163 000000E4 E1A02004        MOV              R2, R4      ;
  164 000000E8 EBFFFFC9        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel) 
  165 000000EC         
  166 000000EC E8BD40DF        POP              {R0, R1, R2, R3, R4, R6, R7, LR
}
  167 000000F0 E12FFF1E        BX               LR
  168 000000F4         
  169 000000F4         
  170 000000F4         applyGreyScale                       ; applyGreyScale(ro
                                                            w, col)
  171 000000F4         ; Wrapper to apply greyscale to original
  172 000000F4         ; Applies the greyscale effect to a given pixel in the i
                       mage.
  173 000000F4         ; Parameters:
  174 000000F4         ;    R0 = row
  175 000000F4         ;    R1 = col
  176 000000F4         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  177 000000F4 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  178 000000F8 E1A04000        MOV              R4, R0      ; save row
  179 000000FC EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  180 00000100 E1A02000        MOV              R2, R0



ARM Macro Assembler    Page 5 


  181 00000104 E1A00003        MOV              R0, R3
  182 00000108 EBFFFFBC        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  183 0000010C EB0000BA        BL               greyScale   ; pixel = greySclae
                                                            (pixel)
  184 00000110 E1A03000        MOV              R3, R0
  185 00000114 E1A00004        MOV              R0, R4
  186 00000118 EBFFFFBD        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel) 
  187 0000011C E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  188 00000120 E12FFF1E        BX               LR
  189 00000124         
  190 00000124         
  191 00000124         applyToAll                           ; applyToAll(routin
                                                            eAddress)
  192 00000124         ; Loops through all (row, col) combinations and executes
                        the given subroutine.
  193 00000124         ; The subroutine should either take no parameters or par
                       ameters R0, R1 = row, col. All registers are imutable.
  194 00000124         ; Paramenters:
  195 00000124         ;  R0 = routineAddress
  196 00000124 E92D400F        PUSH             {R0, R1, R2, R3, LR}
  197 00000128 E1A02000        MOV              R2, R0      ; save routineAddre
                                                            ss
  198 0000012C EBFFFFFE        BL               getPicWidth ; width = getPicWid
                                                            th()
  199 00000130 E1A01000        MOV              R1, R0
  200 00000134 EBFFFFFE        BL               getPicHeight ; height = getPicH
                                                            eight
  201 00000138         
  202 00000138 E2400001        SUB              R0, R0, #1
  203 0000013C         row_whl                              ; for (int row = 0;
                                                             row < height; row+
                                                            +) {
  204 0000013C E1A03000        MOV              R3, R0      ;
  205 00000140 EBFFFFFE        BL               getPicWidth ;
  206 00000144 E1A01000        MOV              R1, R0      ;
  207 00000148 E1A00003        MOV              R0, R3      ;
  208 0000014C E2411001        SUB              R1, R1, #1  ;
  209 00000150         col_whl                              ; for (int col = 0;
                                                             col < width; col++
                                                            ) {
  210 00000150 E1A0E00F        MOV              LR, PC      ;
  211 00000154 E12FFF12        BX               R2          ;  execute(routineA
                                                            ddress)
  212 00000158 E2511001        SUBS             R1, R1, #1  ;
  213 0000015C AAFFFFFB        BGE              col_whl     ;
  214 00000160         end_col_whl                          ; }
  215 00000160 E2500001        SUBS             R0, R0, #1  ;
  216 00000164 AAFFFFF4        BGE              row_whl     ;
  217 00000168         end_row_whl                          ; }
  218 00000168 E8BD400F        POP              {R0, R1, R2, R3, LR} ;
  219 0000016C E12FFF1E        BX               LR          ;
  220 00000170         
  221 00000170         applyAdjust                          ; applyAdjust(row, 
                                                            col)
  222 00000170         ; Wrapper to apply adjust to original



ARM Macro Assembler    Page 6 


  223 00000170         ; Applies the sdjust effect to a given pixel in the imag
                       e.
  224 00000170         ; Parameters:
  225 00000170         ;    R0 = row
  226 00000170         ;    R1 = col
  227 00000170         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  228 00000170 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  229 00000174 E1A04000        MOV              R4, R0
  230 00000178 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  231 0000017C E1A02000        MOV              R2, R0
  232 00000180 E1A00004        MOV              R0, R4
  233 00000184 EBFFFF9D        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  234 00000188 EB000045        BL               adjustPixelColor ; pixel = adju
                                                            stPixel(pixel)
  235 0000018C         
  236 0000018C E1A03000        MOV              R3, R0
  237 00000190 EBFFFFFE        BL               getPicAddr
  238 00000194 E1A02000        MOV              R2, R0
  239 00000198 E1A00004        MOV              R0, R4
  240 0000019C EBFFFF9C        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel)
  241 000001A0 E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  242 000001A4 E12FFF1E        BX               LR
  243 000001A8         
  244 000001A8         
  245 000001A8         applyMotionBlur
  246 000001A8         ; Wrapper to apply adjust to original
  247 000001A8         ; Applies the sdjust effect to a given pixel in the imag
                       e.
  248 000001A8         ; Parameters:
  249 000001A8         ;    R0 = row
  250 000001A8         ;    R1 = col
  251 000001A8         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  252 000001A8 E92D4FD7        PUSH             {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  253 000001AC         
  254 000001AC E3A09001        LDR              R9, =1      ; stackCount = 1 (c
                                                            urrent pixel)
  255 000001B0         ; stackParams = []
  256 000001B0 E59F8460        LDR              R8, =radius ;
  257 000001B4 E5988000        LDR              R8, [R8]    ; radius = Memory.w
                                                            ord(radiusAddress)
  258 000001B8 E1A0A000        MOV              R10, R0     ; save row 
  259 000001BC E1A0B001        MOV              R11, R1     ; save col
  260 000001C0         
  261 000001C0 E1A06000        MOV              R6, R0      ; varRow = row 
  262 000001C4 E1A07001        MOV              R7, R1      ; varCol = col
  263 000001C8         
  264 000001C8 E59F2444        LDR              R2, =copyAddress ;
  265 000001CC         
  266 000001CC         



ARM Macro Assembler    Page 7 


  267 000001CC         ; These two loops can easily be optimised.
  268 000001CC EBFFFF8B        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss) 
  269 000001D0 E52D0004        PUSH             {R0}        ; stackParams.appen
                                                            d(pixel)
  270 000001D4 E3580000        CMP              R8, #0
  271 000001D8         topLoop                              ; for (radius; radi
                                                            us > 0; radius--) {
                                                            
  272 000001D8 DA00000B        BLE              endTopLoop
  273 000001DC E2566001        SUBS             R6, R6, #1  ;  varRow--
  274 000001E0 4A000007        BMI              topFinally  ;  if (varRow out o
                                                            f bounds) break
  275 000001E4 E2577001        SUBS             R7, R7, #1  ;  varCol--
  276 000001E8 4A000005        BMI              topFinally  ; if (varCol out of
                                                             bounds) break
  277 000001EC E1A00006        MOV              R0, R6      ;
  278 000001F0 E1A01007        MOV              R1, R7      ;
  279 000001F4 E59F2418        LDR              R2, =copyAddress ;   
  280 000001F8 EBFFFF80        BL               getPixel    ;  pixel = getPixel
                                                            (row, col, copyAddr
                                                            ess)
  281 000001FC E52D0004        PUSH             {R0}        ; stackParams.appen
                                                            d(pixel)
  282 00000200 E2899001        ADD              R9, R9, #1  ; stackCount++
  283 00000204         topFinally                           ; 
  284 00000204 E2588001        SUBS             R8, R8, #1  ;
  285 00000208 1AFFFFF2        BNE              topLoop     ; }
  286 0000020C         endTopLoop
  287 0000020C         
  288 0000020C E59F8404        LDR              R8, =radius
  289 00000210 E5988000        LDR              R8, [R8]    ; radius = Memory.w
                                                            ord(radiusAddress)
  290 00000214 E1A0600A        MOV              R6, R10     ; varRow = row 
  291 00000218 E1A0700B        MOV              R7, R11     ; varCol = col
  292 0000021C         
  293 0000021C E3580000        CMP              R8, #0
  294 00000220         bottomLoop                           ; for (radius; radi
                                                            us > 0; radius--) {
                                                            
  295 00000220 DA00000F        BLE              endBottomLoop ;  varRow++
  296 00000224 E2866001        ADD              R6, R6, #1
  297 00000228 EBFFFFFE        BL               getPicHeight
  298 0000022C E1560000        CMP              R6, R0
  299 00000230 AA000009        BGE              bottomFinally ;  if (varRow out
                                                             of bounds) break 
  300 00000234 E2877001        ADD              R7, R7, #1  ;  varCol++
  301 00000238 EBFFFFFE        BL               getPicWidth
  302 0000023C E1570000        CMP              R7, R0
  303 00000240 AA000005        BGE              bottomFinally ; if (varCol out 
                                                            of bounds) break
  304 00000244 E1A00006        MOV              R0, R6      ;
  305 00000248 E1A01007        MOV              R1, R7      ;
  306 0000024C E59F23C0        LDR              R2, =copyAddress ;
  307 00000250 EBFFFF6A        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss)
  308 00000254 E52D0004        PUSH             {R0}        ; stackParams.appen



ARM Macro Assembler    Page 8 


                                                            d(pixel)
  309 00000258 E2899001        ADD              R9, R9, #1  ; stackCount++
  310 0000025C         bottomFinally
  311 0000025C E2588001        SUBS             R8, R8, #1
  312 00000260 1AFFFFEE        BNE              bottomLoop
  313 00000264         endBottomLoop                        ; }
  314 00000264         
  315 00000264 E52D9004        PUSH             {R9}        ; stackParams.appen
                                                            d(stackCount)
  316 00000268 EB000037        BL               averageN    ; pixel = averageN(
                                                            stackParams)
  317 0000026C         
  318 0000026C E1A0600A        MOV              R6, R10
  319 00000270 E1A0700B        MOV              R7, R11
  320 00000274         
  321 00000274 E1A03000        MOV              R3, R0
  322 00000278 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  323 0000027C E1A02000        MOV              R2, R0
  324 00000280 E1A00006        MOV              R0, R6
  325 00000284 E1A01007        MOV              R1, R7
  326 00000288 EBFFFF61        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel)
  327 0000028C         
  328 0000028C E49D9004        POP              {R9}
  329 00000290         clear_stack                          ; del stackParams
  330 00000290 E49DC004        POP              {R12}
  331 00000294 E2599001        SUBS             R9, R9, #1
  332 00000298 1AFFFFFC        BNE              clear_stack
  333 0000029C         
  334 0000029C E8BD4FD7        POP              {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  335 000002A0 E12FFF1E        BX               LR
  336 000002A4         
  337 000002A4         ;<--------------Effects-------------->
  338 000002A4         
  339 000002A4         adjustPixelColor                     ; adjustedVal = adj
                                                            ustPixel(value, con
                                                            trast, brightness)
  340 000002A4         ; Applies a given contrast and brightness value
  341 000002A4         ; Parameters:
  342 000002A4         ;     R0 = RGB
  343 000002A4         ; TODO: Currently the function useshard coded addresses 
                       but it should be updated to brightness and contrast para
                       meters.
  344 000002A4         
  345 000002A4 E92D400E        PUSH             {R1, R2, R3, LR}
  346 000002A8 E59F236C        LDR              R2, =contrast
  347 000002AC E5922000        LDR              R2, [R2]    ; contrast = Memory
                                                            .word(contrastAddre
                                                            ss)
  348 000002B0 E59F3368        LDR              R3, =brightness
  349 000002B4 E5933000        LDR              R3, [R3]    ; brightness = Memo
                                                            ry.word(brightnessA
                                                            ddress)
  350 000002B8 E92D000C        PUSH             {R2, R3}    ; save link registe
                                                            r and pass paramter
                                                            s contrast and brig



ARM Macro Assembler    Page 9 


                                                            htness
  351 000002BC E1A03000        MOV              R3, R0
  352 000002C0         
  353 000002C0 E3A018FF        LDR              R1, = redMask ; mask = redMask
  354 000002C4 EBFFFF5D        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
  355 000002C8 E1A02000        MOV              R2, R0
  356 000002CC EB000012        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
  357 000002D0 E1A00003        MOV              R0, R3
  358 000002D4 EBFFFF61        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
  359 000002D8 E1A03000        MOV              R3, R0
  360 000002DC         
  361 000002DC E3A01CFF        LDR              R1, = greenMask
  362 000002E0 EBFFFF56        BL               getValueFromMask
  363 000002E4 E1A02000        MOV              R2, R0
  364 000002E8 EB00000B        BL               adjustColor
  365 000002EC E1A00003        MOV              R0, R3
  366 000002F0 EBFFFF5A        BL               setValueFromMask
  367 000002F4 E1A03000        MOV              R3, R0
  368 000002F8         
  369 000002F8 E3A010FF        LDR              R1, = blueMask
  370 000002FC EBFFFF4F        BL               getValueFromMask
  371 00000300 E1A02000        MOV              R2, R0
  372 00000304 EB000004        BL               adjustColor
  373 00000308 E1A00003        MOV              R0, R3
  374 0000030C EBFFFF53        BL               setValueFromMask
  375 00000310         
  376 00000310 E8BD000C        POP              {R2, R3}
  377 00000314 E8BD400E        POP              {R1, R2, R3, LR}
  378 00000318 E12FFF1E        BX               LR
  379 0000031C         
  380 0000031C         adjustColor                          ; val = adjustColor
                                                            (color, contrast, b
                                                            rightness)
  381 0000031C         ; applies the brightness contrast formula
  382 0000031C         ; If the conrast is negative the picture will be inverte
                       d and the relevant contrast applied.
  383 0000031C         ; Paramters:
  384 0000031C         ;     R2 = color
  385 0000031C         ;     Stack > contrast, brightness that order.
  386 0000031C         ; Return Values
  387 0000031C         ;     R2 = color
  388 0000031C         ;    Stack > contrast, brightness that order.
  389 0000031C E92D0030        STMFD            SP!, {R4, R5}
  390 00000320 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  391 00000324 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  392 00000328 E0120294        MULS             R2, R4, R2  ; color *= contrast
                                                            
  393 0000032C E1A02242        ASR              R2, R2, #4  ; color /= 16
  394 00000330 428220FF        ADDMI            R2, R2, #255 ; invert color if 
                                                            contrast was negati
                                                            ve



ARM Macro Assembler    Page 10 


  395 00000334 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  396 00000338 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  397 0000033C E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  398 00000340 C3A020FF        LDRGT            R2, =255    ; color = 255
  399 00000344 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  400 00000348 E12FFF1E        BX               LR
  401 0000034C         
  402 0000034C         averageN                             ; Takes in N RGB va
                                                            lues and computes t
                                                            heir blur value.
  403 0000034C         ; Parameters:
  404 0000034C         ; Stack > N    | 0 < N
  405 0000034C         ; Stack > count RGB values
  406 0000034C         ; Returns:
  407 0000034C         ; R0 = average
  408 0000034C         
  409 0000034C E89D0001        LDMFD            SP, {R0}    ; N = stackParams.g
                                                            et(0)
  410 00000350 E92D407E        STMFD            SP!, {R1 - R6, LR} ;
  411 00000354 E3A04007        LDR              R4, =7      ; savedParams = 7 (
                                                            R1 - R6, LR)
  412 00000358 E1A03000        MOV              R3, R0      ; save N
  413 0000035C E0845003        ADD              R5, R4, R3  ; stackParamsIndex 
                                                            = savedParams + N
  414 00000360 E3A06000        LDR              R6, =0      ; finalPixel = 0
  415 00000364 E3A018FF        LDR              R1, =redMask
  416 00000368 EB000006        BL               averageColor ; average(red)
  417 0000036C E3A01CFF        LDR              R1, =greenMask
  418 00000370 EB000004        BL               averageColor ; average(green)
  419 00000374 E3A010FF        LDR              R1, =blueMask
  420 00000378 EB000002        BL               averageColor ; average(blue)
  421 0000037C E1A00006        MOV              R0, R6
  422 00000380 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  423 00000384 E12FFF1E        BX               LR
  424 00000388         averageColor                         ; private subroutin
                                                            e average()
  425 00000388 E3A02000        LDR              R2, =0      ; total = 0
  426 0000038C         forN
  427 0000038C E1550004        CMP              R5, R4      ; for (stackParamsI
                                                            ndex; stackParamsIn
                                                            dex > savedParams; 
                                                            stackParamsIndex--)
                                                             {
  428 00000390 0A000006        BEQ              endForN     ;
  429 00000394 E79D0105        LDR              R0, [SP, R5, LSL #2] ; pixel = 
                                                            stackParams.get(sta
                                                            ckParamsIndex)
  430 00000398 E52DE004        PUSH             {LR}        ;
  431 0000039C EBFFFF27        BL               getValueFromMask ;  color = get
                                                            ValueFromMask(pixel
                                                            , mask)
  432 000003A0 E49DE004        POP              {LR}        ;
  433 000003A4 E0822000        ADD              R2, R2, R0  ; total += color
  434 000003A8 E2555001        SUBS             R5, R5, #1  ;
  435 000003AC EAFFFFF6        B                forN        ; }



ARM Macro Assembler    Page 11 


  436 000003B0         endForN
  437 000003B0 E52D1004        PUSH             {R1}        ; save mask
  438 000003B4 E1A00002        MOV              R0, R2
  439 000003B8 E1A01003        MOV              R1, R3
  440 000003BC E52DE004        PUSH             {LR}
  441 000003C0 EB00006F        BL               divide      ; color = total / N
                                                            
  442 000003C4 E49DE004        POP              {LR}
  443 000003C8 E3510000        CMP              R1, #0      ; if (color < 0): /
                                                            / this should never
                                                             happen.
  444 000003CC 43A01000        LDRMI            R1, =0      ; color = 0
  445 000003D0 E35100FF        CMP              R1, #255    ; if (color > 255):
                                                            
  446 000003D4 C3A010FF        LDRGT            R1, =255    ;  color = 255
  447 000003D8 E1A00006        MOV              R0, R6
  448 000003DC E1A02001        MOV              R2, R1
  449 000003E0 E49D1004        POP              {R1}        ; restore mask
  450 000003E4 E52DE004        PUSH             {LR}
  451 000003E8 EBFFFF1C        BL               setValueFromMask ; pixel = setV
                                                            alueFromMask(pixel,
                                                             mask, color)
  452 000003EC E49DE004        POP              {LR}
  453 000003F0 E1A06000        MOV              R6, R0
  454 000003F4         
  455 000003F4 E0845003        ADD              R5, R4, R3
  456 000003F8 E12FFF1E        BX               LR
  457 000003FC         
  458 000003FC         greyScale                            ; Converts a pixel 
                                                            to a light intensit
                                                            y value and generat
                                                            es a grey image bas
                                                            ed on this.
  459 000003FC         ; Paramteters
  460 000003FC         ;    R0 = RGB
  461 000003FC         ; Return
  462 000003FC         ;    R0 = Light intesity
  463 000003FC         ; The weightings used add up to 1000
  464 000003FC E92D401E        PUSH             {R1, R2, R3, R4, LR}
  465 00000400 E1A02000        MOV              R2, R0      ; save RGB
  466 00000404 E3A03000        LDR              R3, =0      ; weigthedTotal
  467 00000408         
  468 00000408 E3A018FF        LDR              R1, =redMask
  469 0000040C EBFFFF0B        BL               getValueFromMask ; color = getV
                                                            alueFromMask(pixel,
                                                             redMask)
  470 00000410 E59FC210        LDR              R12, =299   ; weighting = 299
  471 00000414 E1A01000        MOV              R1, R0
  472 00000418 E0000C91        MUL              R0, R1, R12
  473 0000041C E0833000        ADD              R3, R3, R0  ; weightedTotal += 
                                                            color * weighting
  474 00000420         
  475 00000420         ; sudo code similar to above
  476 00000420 E1A00002        MOV              R0, R2
  477 00000424 E3A01CFF        LDR              R1, =greenMask
  478 00000428 EBFFFF04        BL               getValueFromMask
  479 0000042C E59FC1F8        LDR              R12, =587
  480 00000430 E1A01000        MOV              R1, R0
  481 00000434 E0000C91        MUL              R0, R1, R12



ARM Macro Assembler    Page 12 


  482 00000438 E0833000        ADD              R3, R3, R0
  483 0000043C         
  484 0000043C         ; sudo code similar to above
  485 0000043C E1A00002        MOV              R0, R2
  486 00000440 E3A010FF        LDR              R1, =blueMask
  487 00000444 EBFFFEFD        BL               getValueFromMask
  488 00000448 E3A0C072        LDR              R12, =114
  489 0000044C E1A01000        MOV              R1, R0
  490 00000450 E0000C91        MUL              R0, R1, R12
  491 00000454 E0833000        ADD              R3, R3, R0
  492 00000458         
  493 00000458 E1A00003        MOV              R0, R3
  494 0000045C E3A01FFA        LDR              R1, =1000
  495 00000460 EB000047        BL               divide      ; lightIntensity = 
                                                            weightedTotal / 100
                                                            0
  496 00000464         
  497 00000464         convert_to_pixel
  498 00000464 E1A00001        MOV              R0, R1      ;  
  499 00000468 E59F11C0        LDR              R1, =0x00010101
  500 0000046C E0000091        MUL              R0, R1, R0  ; pixel = lightInte
                                                            nsity * rgb locatio
                                                            n identifier **0x00
                                                            010101**
  501 00000470         
  502 00000470 E8BD401E        POP              {R1, R2, R3, R4, LR}
  503 00000474 E12FFF1E        BX               LR
  504 00000478         
  505 00000478         applyLens                            ; applyLens(y, x) u
                                                            sing col row instea
                                                            d of y x here becau
                                                            se it's easier to t
                                                            hink of geometrical
                                                            ly.
  506 00000478         ; Parameters:
  507 00000478         ;     R0 = y
  508 00000478         ;     R1 = X
  509 00000478         ; TODO: Currently the function useshard coded coeficient
                       s but it should be updated to a coeficient parameter.
  510 00000478         normalize_origin
  511 00000478 E92D4E1F        PUSH             {r0, r1, R2, R3, R4, R9, R10, R
11, LR} 
                                                            ; saving y and x
  512 0000047C         
  513 0000047C E3A04014        LDR              R4, =lensq  ; lensCoeficient   
                                                               
  514 00000480 EBFFFFFE        BL               getPicHeight ; height = getPicH
                                                            eight()            
                                                            
  515 00000484 E1A000A0        LSR              R0, R0, #1  ; centery = height 
                                                            / 2
  516 00000488 E1A02000        MOV              R2, R0
  517 0000048C         
  518 0000048C EBFFFFFE        BL               getPicWidth ; width = getPicWid
                                                            th()
  519 00000490 E1A000A0        LSR              R0, R0, #1  ; centerx = width /
                                                             2
  520 00000494 E1A03000        MOV              R3, R0
  521 00000498         



ARM Macro Assembler    Page 13 


  522 00000498 E8BD0003        POP              {r0, r1}    ; restore y and x
  523 0000049C         
  524 0000049C         ; normalizing
  525 0000049C E0400002        SUB              R0, R0, R2  ; y -= centery
  526 000004A0 E0411003        SUB              R1, R1, R3  ; x -= centery
  527 000004A4         
  528 000004A4 E1A0A000        MOV              R10, R0     ; save y
  529 000004A8 E1A0B001        MOV              R11, R1     ; save x
  530 000004AC         
  531 000004AC EB00002C        BL               distanceSqr ; 
  532 000004B0 EB000017        BL               sqrt        ; distance = sqr(di
                                                            stanceSqr(y, x))
  533 000004B4 E1A09000        MOV              R9, R0
  534 000004B8         
  535 000004B8 E1A0000A        MOV              R0, R10
  536 000004BC E1540009        CMP              R4, R9      ; if (lensCoeficien
                                                            t < distance):
  537 000004C0 B0000094        MULLT            R0, R4, R0  ; offset = y * lens
                                                            Coeficient
  538 000004C4 A0000099        MULGE            R0, R9, R0  ; else:
  539 000004C8 E1A01009        MOV              R1, R9      ; offset = y * dist
                                                            ance
  540 000004CC EB00002C        BL               divide      ; offset = offset /
                                                             distance
  541 000004D0 E04AA001        SUB              R10, R10, R1 ; y -= offset
  542 000004D4         
  543 000004D4         ; same sudo code as above using x
  544 000004D4 E1A0000B        MOV              R0, R11
  545 000004D8 E1540009        CMP              R4, R9
  546 000004DC B0000094        MULLT            R0, R4, R0
  547 000004E0 A0000099        MULGE            R0, R9, R0
  548 000004E4 E1A01009        MOV              R1, R9
  549 000004E8 EB000025        BL               divide
  550 000004EC E04BB001        SUB              R11, R11, R1
  551 000004F0         
  552 000004F0         denormalise_y_x
  553 000004F0 EBFFFFFE        BL               getPicHeight
  554 000004F4 E1A000A0        LSR              R0, R0, #1
  555 000004F8 E08AA000        ADD              R10, R10, R0 ; y += height / 2
  556 000004FC         
  557 000004FC EBFFFFFE        BL               getPicWidth
  558 00000500 E1A000A0        LSR              R0, R0, #1
  559 00000504 E08B1000        ADD              R1, R11, R0 ; x += width / 2
  560 00000508         
  561 00000508 E1A0000A        MOV              R0, R10
  562 0000050C         
  563 0000050C         
  564 0000050C E8BD4E1C        POP              {R2, R3, R4, R9, R10, R11, LR}
  565 00000510 E12FFF1E        BX               LR
  566 00000514         
  567 00000514         
  568 00000514         ;<---------------Square root methods---------------->
  569 00000514         
  570 00000514         sqrt                                 ; sqrt(number)
  571 00000514         ; Finds the square root of a number
  572 00000514         ; Parameters:
  573 00000514         ;  R0 = number
  574 00000514         ; Outputs:
  575 00000514         ;  R0 = sqare root



ARM Macro Assembler    Page 14 


  576 00000514 E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  577 00000518 012FFF1E        BXEQ             LR
  578 0000051C         
  579 0000051C E92D481E        PUSH             {R1, R2, R3, R4, R11, LR}
  580 00000520 E1A0B000        MOV              R11, R0     ; save number
  581 00000524 E3A03000        LDR              R3, =0      ; temp = 0
  582 00000528 E1A02000        MOV              R2, R0      ; x = S
  583 0000052C         
  584 0000052C         find_sqr_whl                         ; while (previous x
                                                             != next x) {
  585 0000052C E1A020A2        LSR              R2, R2, #1  ;  x /= 2
  586 00000530 E0524003        SUBS             R4, R2, R3
  587 00000534 0A000007        BEQ              end_sqr_whl ;         return x
  588 00000538 E3540001        CMP              R4, #1
  589 0000053C 0A000005        BEQ              end_sqr_whl
  590 00000540 E1A03002        MOV              R3, R2      ;  temp = x
  591 00000544 E1A01002        MOV              R1, R2      ; 
  592 00000548 E1A0000B        MOV              R0, R11     ;
  593 0000054C EB00000C        BL               divide      ; 
  594 00000550 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  595 00000554 EAFFFFF4        B                find_sqr_whl
  596 00000558         end_sqr_whl
  597 00000558         
  598 00000558 E1A00002        MOV              R0, R2
  599 0000055C E8BD481E        POP              {R1, R2, R3, R4, R11, LR}
  600 00000560 E12FFF1E        BX               LR
  601 00000564         
  602 00000564         distanceSqr                          ; distnanceSqr(y, x
                                                            )
  603 00000564         ; Parameters:
  604 00000564         ;  R0 = relativex
  605 00000564         ;  R1 = relativey
  606 00000564         ; Return:
  607 00000564         ;  R0 = distance^2
  608 00000564 E92D0006        PUSH             {R1, R2}
  609 00000568 E1A02000        MOV              R2, R0
  610 0000056C E0000092        MUL              R0, R2, R0  ; y *= y
  611 00000570 E1A02001        MOV              R2, R1
  612 00000574 E0010192        MUL              R1, R2, R1  ; x *= x
  613 00000578 E0800001        ADD              R0, R0, R1  ; distance^2 = x + 
                                                            y
  614 0000057C E8BD0006        POP              {R1, R2}
  615 00000580 E12FFF1E        BX               LR
  616 00000584         
  617 00000584         
  618 00000584         
  619 00000584         ;<-------------- Division Method -------------->;
  620 00000584         ; taken from my group work in the labs
  621 00000584         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  622 00000584 E92D401C        STMFD            SP!, {R2, R3, R4, LR}
  623 00000588         
  624 00000588 E3A04001        LDR              R4, =1      ;negative flag
  625 0000058C E3500000        CMP              R0, #0      ;if dividend < 0
  626 00000590 42644000        NEGMI            R4, R4      ; flag *= -1



ARM Macro Assembler    Page 15 


  627 00000594 42600000        NEGMI            R0, R0      ; dividend *= -1
  628 00000598 E3510000        CMP              R1, #0      ; if divisor < 0
  629 0000059C 42644000        NEGMI            R4, R4      ; flag *= -1
  630 000005A0 42611000        NEGMI            R1, R1      ; divisor *= -1
  631 000005A4         
  632 000005A4 E3A02000        LDR              R2, =0      ; Q             ;se
                                                            t temp quotient to 
                                                            0
  633 000005A8 E3A03001        LDR              R3, =1      ; T             ;se
                                                            t placeholder to 1
  634 000005AC         
  635 000005AC E3510000        CMP              R1, #0      ;              ;if 
                                                            Divisor == 0
  636 000005B0 059F007C        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  637 000005B4 01A02000        MOVEQ            R2, R0      ;load -1 into quoti
                                                            ent
  638 000005B8 0A00000B        BEQ              div_zero    ;stop
  639 000005BC         
  640 000005BC         alignLoop                            ;else
  641 000005BC E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  642 000005C0 BA000002        BLT              endAlignLoop ;{
  643 000005C4 E1A01081        LSL              R1, R1, #1  ; multiply divisor 
                                                            by 2
  644 000005C8 E1A03083        LSL              R3, R3, #1  ; multiply placehol
                                                            der by 2
  645 000005CC EAFFFFFA        B                alignLoop   ;}
  646 000005D0         endAlignLoop
  647 000005D0         
  648 000005D0         division_whl                         ;{
  649 000005D0 E1A010A1        LSR              R1, R1, #1  ;divide divisor by 
                                                            2
  650 000005D4 E1B030A3        LSRS             R3, R3, #1  ;divide r3 by 2 and
                                                             set flag
  651 000005D8 2A000003        BCS              end_division_whl ;while carry f
                                                            lag not set{ 
  652 000005DC E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  653 000005E0 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  654 000005E4 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  655 000005E8 EAFFFFF8        B                division_whl ; 
  656 000005EC         end_division_whl                     ; }
  657 000005EC         div_zero
  658 000005EC E1A01002        MOV              R1, R2
  659 000005F0 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  660 000005F4 E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}
  661 000005F8 E12FFF1E        BX               LR
  662 000005FC         
  663 000005FC         ;<-----------------Main---------------->
  664 000005FC         start
  665 000005FC         ; Uncomment any block to see effect.
  666 000005FC         
  667 000005FC         ;<------Adjust------>
  668 000005FC         ;LDR R0, =applyAdjust
  669 000005FC         ;BL applyToAll



ARM Macro Assembler    Page 16 


  670 000005FC         
  671 000005FC         ;<----MotionBlur---->
  672 000005FC         ;LDR R0, =copy
  673 000005FC         ;BL applyToAll
  674 000005FC         ;LDR R0, =applyMotionBlur
  675 000005FC         ;BL applyToAll
  676 000005FC         
  677 000005FC         ;<----LensEffect---->
  678 000005FC E59F0034        LDR              R0, =copy
  679 00000600 EBFFFEC7        BL               applyToAll
  680 00000604 E59F0030        LDR              R0, =lensEffectCopy
  681 00000608 EBFFFEC5        BL               applyToAll
  682 0000060C         
  683 0000060C         ;<-----GreyScale---->
  684 0000060C         ;LDR R0, = applyGreyScale
  685 0000060C         ;BL applyToAll
  686 0000060C         
  687 0000060C         
  688 0000060C         ; Display results:
  689 0000060C EBFFFFFE        BL               putPic
  690 00000610         
  691 00000610 EAFFFFFE 
                       stop    B                stop
  692 00000614         
  693 00000614         ;<----------------Memory--------------->
  694 00000614         
  695 00000614 A1016300 
              00000000 
              00000000 
              00000000 
              00000000 
              0000012B 
              0000024B 
              00010101 
              FFFFFFFF 
              00000000 
              00000000         AREA             Variables, DATA, READWRITE
  696 00000000 00000002 
                       radius  DCD              2
  697 00000004 00000016 
                       contrast
                               DCD              22
  698 00000008 00000016 
                       brightness
                               DCD              22
  699 0000000C         
  700 0000000C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
adjustColor 0000031C

Symbol: adjustColor
   Definitions
      At line 380 in file BonusEffect.s
   Uses
      At line 356 in file BonusEffect.s
      At line 364 in file BonusEffect.s
      At line 372 in file BonusEffect.s

adjustPixelColor 000002A4

Symbol: adjustPixelColor
   Definitions
      At line 339 in file BonusEffect.s
   Uses
      At line 234 in file BonusEffect.s
Comment: adjustPixelColor used once
alignLoop 000005BC

Symbol: alignLoop
   Definitions
      At line 640 in file BonusEffect.s
   Uses
      At line 645 in file BonusEffect.s
Comment: alignLoop used once
applyAdjust 00000170

Symbol: applyAdjust
   Definitions
      At line 221 in file BonusEffect.s
   Uses
      None
Comment: applyAdjust unused
applyGreyScale 000000F4

Symbol: applyGreyScale
   Definitions
      At line 170 in file BonusEffect.s
   Uses
      None
Comment: applyGreyScale unused
applyLens 00000478

Symbol: applyLens
   Definitions
      At line 505 in file BonusEffect.s
   Uses
      At line 156 in file BonusEffect.s
Comment: applyLens used once
applyMotionBlur 000001A8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: applyMotionBlur
   Definitions
      At line 245 in file BonusEffect.s
   Uses
      None
Comment: applyMotionBlur unused
applyToAll 00000124

Symbol: applyToAll
   Definitions
      At line 191 in file BonusEffect.s
   Uses
      At line 679 in file BonusEffect.s
      At line 681 in file BonusEffect.s

averageColor 00000388

Symbol: averageColor
   Definitions
      At line 424 in file BonusEffect.s
   Uses
      At line 416 in file BonusEffect.s
      At line 418 in file BonusEffect.s
      At line 420 in file BonusEffect.s

averageN 0000034C

Symbol: averageN
   Definitions
      At line 402 in file BonusEffect.s
   Uses
      At line 316 in file BonusEffect.s
Comment: averageN used once
bottomFinally 0000025C

Symbol: bottomFinally
   Definitions
      At line 310 in file BonusEffect.s
   Uses
      At line 299 in file BonusEffect.s
      At line 303 in file BonusEffect.s

bottomLoop 00000220

Symbol: bottomLoop
   Definitions
      At line 294 in file BonusEffect.s
   Uses
      At line 312 in file BonusEffect.s
Comment: bottomLoop used once
clear_stack 00000290

Symbol: clear_stack
   Definitions
      At line 329 in file BonusEffect.s
   Uses
      At line 332 in file BonusEffect.s
Comment: clear_stack used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

col_whl 00000150

Symbol: col_whl
   Definitions
      At line 209 in file BonusEffect.s
   Uses
      At line 213 in file BonusEffect.s
Comment: col_whl used once
convert_to_pixel 00000464

Symbol: convert_to_pixel
   Definitions
      At line 497 in file BonusEffect.s
   Uses
      None
Comment: convert_to_pixel unused
copy 0000007C

Symbol: copy
   Definitions
      At line 114 in file BonusEffect.s
   Uses
      At line 678 in file BonusEffect.s
Comment: copy used once
denormalise_y_x 000004F0

Symbol: denormalise_y_x
   Definitions
      At line 552 in file BonusEffect.s
   Uses
      None
Comment: denormalise_y_x unused
distanceSqr 00000564

Symbol: distanceSqr
   Definitions
      At line 602 in file BonusEffect.s
   Uses
      At line 531 in file BonusEffect.s
Comment: distanceSqr used once
div_zero 000005EC

Symbol: div_zero
   Definitions
      At line 657 in file BonusEffect.s
   Uses
      At line 638 in file BonusEffect.s
Comment: div_zero used once
divide 00000584

Symbol: divide
   Definitions
      At line 621 in file BonusEffect.s
   Uses
      At line 441 in file BonusEffect.s
      At line 495 in file BonusEffect.s
      At line 540 in file BonusEffect.s
      At line 549 in file BonusEffect.s
      At line 593 in file BonusEffect.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


division_whl 000005D0

Symbol: division_whl
   Definitions
      At line 648 in file BonusEffect.s
   Uses
      At line 655 in file BonusEffect.s
Comment: division_whl used once
endAlignLoop 000005D0

Symbol: endAlignLoop
   Definitions
      At line 646 in file BonusEffect.s
   Uses
      At line 642 in file BonusEffect.s
Comment: endAlignLoop used once
endBottomLoop 00000264

Symbol: endBottomLoop
   Definitions
      At line 313 in file BonusEffect.s
   Uses
      At line 295 in file BonusEffect.s
Comment: endBottomLoop used once
endForN 000003B0

Symbol: endForN
   Definitions
      At line 436 in file BonusEffect.s
   Uses
      At line 428 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 00000058

Symbol: endGetMaskWhile
   Definitions
      At line 88 in file BonusEffect.s
   Uses
      At line 85 in file BonusEffect.s
Comment: endGetMaskWhile used once
endSetMaskWhile 00000074

Symbol: endSetMaskWhile
   Definitions
      At line 109 in file BonusEffect.s
   Uses
      At line 106 in file BonusEffect.s
Comment: endSetMaskWhile used once
endTopLoop 0000020C

Symbol: endTopLoop
   Definitions
      At line 286 in file BonusEffect.s
   Uses
      At line 272 in file BonusEffect.s
Comment: endTopLoop used once
end_col_whl 00000160




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: end_col_whl
   Definitions
      At line 214 in file BonusEffect.s
   Uses
      None
Comment: end_col_whl unused
end_division_whl 000005EC

Symbol: end_division_whl
   Definitions
      At line 656 in file BonusEffect.s
   Uses
      At line 651 in file BonusEffect.s
Comment: end_division_whl used once
end_row_whl 00000168

Symbol: end_row_whl
   Definitions
      At line 217 in file BonusEffect.s
   Uses
      None
Comment: end_row_whl unused
end_sqr_whl 00000558

Symbol: end_sqr_whl
   Definitions
      At line 596 in file BonusEffect.s
   Uses
      At line 587 in file BonusEffect.s
      At line 589 in file BonusEffect.s

find_sqr_whl 0000052C

Symbol: find_sqr_whl
   Definitions
      At line 584 in file BonusEffect.s
   Uses
      At line 595 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 0000038C

Symbol: forN
   Definitions
      At line 426 in file BonusEffect.s
   Uses
      At line 435 in file BonusEffect.s
Comment: forN used once
getMaskWhile 00000048

Symbol: getMaskWhile
   Definitions
      At line 83 in file BonusEffect.s
   Uses
      At line 87 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 20 in file BonusEffect.s
   Uses
      At line 129 in file BonusEffect.s
      At line 158 in file BonusEffect.s
      At line 182 in file BonusEffect.s
      At line 233 in file BonusEffect.s
      At line 268 in file BonusEffect.s
      At line 280 in file BonusEffect.s
      At line 307 in file BonusEffect.s

getValueFromMask 00000040

Symbol: getValueFromMask
   Definitions
      At line 71 in file BonusEffect.s
   Uses
      At line 354 in file BonusEffect.s
      At line 362 in file BonusEffect.s
      At line 370 in file BonusEffect.s
      At line 431 in file BonusEffect.s
      At line 469 in file BonusEffect.s
      At line 478 in file BonusEffect.s
      At line 487 in file BonusEffect.s

greyScale 000003FC

Symbol: greyScale
   Definitions
      At line 458 in file BonusEffect.s
   Uses
      At line 183 in file BonusEffect.s
Comment: greyScale used once
lensEffectCopy 000000B4

Symbol: lensEffectCopy
   Definitions
      At line 140 in file BonusEffect.s
   Uses
      At line 680 in file BonusEffect.s
Comment: lensEffectCopy used once
normalize_origin 00000478

Symbol: normalize_origin
   Definitions
      At line 510 in file BonusEffect.s
   Uses
      None
Comment: normalize_origin unused
putPixel 00000014

Symbol: putPixel
   Definitions
      At line 37 in file BonusEffect.s
   Uses
      At line 134 in file BonusEffect.s
      At line 164 in file BonusEffect.s
      At line 186 in file BonusEffect.s
      At line 240 in file BonusEffect.s
      At line 326 in file BonusEffect.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


rowColToIndex 00000028

Symbol: rowColToIndex
   Definitions
      At line 54 in file BonusEffect.s
   Uses
      At line 30 in file BonusEffect.s
      At line 47 in file BonusEffect.s

row_whl 0000013C

Symbol: row_whl
   Definitions
      At line 203 in file BonusEffect.s
   Uses
      At line 216 in file BonusEffect.s
Comment: row_whl used once
setMaskWhile 00000064

Symbol: setMaskWhile
   Definitions
      At line 104 in file BonusEffect.s
   Uses
      At line 108 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 00000060

Symbol: setValueFromMask
   Definitions
      At line 93 in file BonusEffect.s
   Uses
      At line 358 in file BonusEffect.s
      At line 366 in file BonusEffect.s
      At line 374 in file BonusEffect.s
      At line 451 in file BonusEffect.s

sqrt 00000514

Symbol: sqrt
   Definitions
      At line 570 in file BonusEffect.s
   Uses
      At line 532 in file BonusEffect.s
Comment: sqrt used once
start 000005FC

Symbol: start
   Definitions
      At line 664 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 00000610

Symbol: stop
   Definitions
      At line 691 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 691 in file BonusEffect.s
Comment: stop used once
topFinally 00000204

Symbol: topFinally
   Definitions
      At line 283 in file BonusEffect.s
   Uses
      At line 274 in file BonusEffect.s
      At line 276 in file BonusEffect.s

topLoop 000001D8

Symbol: topLoop
   Definitions
      At line 271 in file BonusEffect.s
   Uses
      At line 285 in file BonusEffect.s
Comment: topLoop used once
50 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 695 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
brightness 00000008

Symbol: brightness
   Definitions
      At line 698 in file BonusEffect.s
   Uses
      At line 348 in file BonusEffect.s
Comment: brightness used once
contrast 00000004

Symbol: contrast
   Definitions
      At line 697 in file BonusEffect.s
   Uses
      At line 346 in file BonusEffect.s
Comment: contrast used once
radius 00000000

Symbol: radius
   Definitions
      At line 696 in file BonusEffect.s
   Uses
      At line 256 in file BonusEffect.s
      At line 288 in file BonusEffect.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 369 in file BonusEffect.s
      At line 419 in file BonusEffect.s
      At line 486 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 133 in file BonusEffect.s
      At line 157 in file BonusEffect.s
      At line 264 in file BonusEffect.s
      At line 279 in file BonusEffect.s
      At line 306 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 361 in file BonusEffect.s
      At line 417 in file BonusEffect.s
      At line 477 in file BonusEffect.s

lensq 00000014

Symbol: lensq
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      At line 513 in file BonusEffect.s
Comment: lensq used once
redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 353 in file BonusEffect.s
      At line 415 in file BonusEffect.s
      At line 468 in file BonusEffect.s

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 125 in file BonusEffect.s
      At line 152 in file BonusEffect.s
      At line 179 in file BonusEffect.s
      At line 230 in file BonusEffect.s
      At line 237 in file BonusEffect.s
      At line 322 in file BonusEffect.s

getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 200 in file BonusEffect.s
      At line 297 in file BonusEffect.s
      At line 514 in file BonusEffect.s
      At line 553 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 64 in file BonusEffect.s
      At line 198 in file BonusEffect.s
      At line 205 in file BonusEffect.s
      At line 301 in file BonusEffect.s
      At line 518 in file BonusEffect.s
      At line 557 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 689 in file BonusEffect.s
Comment: putPic used once
5 symbols
403 symbols in table
