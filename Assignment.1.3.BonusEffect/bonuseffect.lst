


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000 00000001 
                       lensn   EQU              1
   17 00000000 00000014 
                       lensq   EQU              20
   18 00000000         
   19 00000000         
   20 00000000         
   21 00000000         ;<--------------Pixel Manipulation-------------->
   22 00000000         getPixel                             ; RGBval = getPixel
                                                            (row, col, imageAdd
                                                            ress)
   23 00000000         ; Parameters:
   24 00000000         ;     R0 = row
   25 00000000         ;     R1 = column
   26 00000000         ;     R2 = imageAddress
   27 00000000         ; Returns:
   28 00000000         ;     R0 = RGBvalue
   29 00000000         
   30 00000000 E92D4000        STMFD            SP!, {LR}
   31 00000004         
   32 00000004 EB000007        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   33 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memory.word(pict
                                                            ureaddress + addres
                                                            sOffset * 4)
   34 0000000C         
   35 0000000C E8BD4000        LDMFD            SP!, {LR}
   36 00000010 E12FFF1E        BX               LR          ; return RGB
   37 00000014         
   38 00000014         
   39 00000014         putPixel                             ; putPixel(row, col
                                                            , imageAddress)
   40 00000014         ; Stores a given RGB to a pixel at row, col



ARM Macro Assembler    Page 2 


   41 00000014         ; Parameters:
   42 00000014         ;     R0 = row
   43 00000014         ;     R1 = col
   44 00000014         ;     R2 = picture address
   45 00000014         ;     R3 = RGB
   46 00000014         
   47 00000014 E92D4000        STMFD            SP!, {LR}
   48 00000018         
   49 00000018 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   50 0000001C E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   51 00000020         
   52 00000020 E8BD4000        LDMFD            SP!, {LR}
   53 00000024 E12FFF1E        BX               LR
   54 00000028         
   55 00000028         
   56 00000028         rowColToIndex
   57 00000028         ; converts row and colum to index
   58 00000028         ; Parameters:
   59 00000028         ;     R0 = row
   60 00000028         ;     R1 = col
   61 00000028         ; Return Values
   62 00000028         ;     R0 addressIndex
   63 00000028 E92D4004        PUSH             {R2, LR}
   64 0000002C E1A02000        MOV              R2, R0
   65 00000030         
   66 00000030 EBFFFFFE        BL               getPicWidth ; width = getPicWid
                                                            th
   67 00000034 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   68 00000038         
   69 00000038 E8BD4004        POP              {R2, LR}
   70 0000003C E12FFF1E        BX               LR
   71 00000040         
   72 00000040         
   73 00000040         getValueFromMask
   74 00000040         ; Gets the color value under a congruent mask
   75 00000040         ; Expects masks of type FF
   76 00000040         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
   77 00000040         ; Parameters:
   78 00000040         ;     R0 = RGB
   79 00000040         ;    R1 = mask
   80 00000040         ; Return Values:
   81 00000040         ;     R1 = mask
   82 00000040         ;     R0 = colorValue
   83 00000040 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
   84 00000044 E52D1004        PUSH             {R1}
   85 00000048         getMaskWhile
   86 00000048 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
   87 0000004C 2A000001        BCS              endGetMaskWhile ; {
   88 00000050 E1A00220        LSR              R0, R0, #4  ; value >> 4



ARM Macro Assembler    Page 3 


   89 00000054 EAFFFFFB        B                getMaskWhile ; }
   90 00000058         endGetMaskWhile
   91 00000058 E49D1004        POP              {R1}
   92 0000005C E12FFF1E        BX               LR
   93 00000060         
   94 00000060         
   95 00000060         setValueFromMask
   96 00000060         ; Sets the color value under a congruent mask
   97 00000060         ; Expects masks of type FF
   98 00000060         ; Takes in a value and a location in form FF
   99 00000060         ; Parameters:
  100 00000060         ;     R0 = RGB
  101 00000060         ;     R1 = mask
  102 00000060         ;     R2 = colorValue
  103 00000060         ; Return Values:
  104 00000060         ;     R0 = RGB
  105 00000060 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  106 00000064         setMaskWhile
  107 00000064 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  108 00000068 2A000001        BCS              endSetMaskWhile ; {
  109 0000006C E1A02202        LSL              R2, R2, #4  ; value >> 4
  110 00000070 EAFFFFFB        B                setMaskWhile ; }
  111 00000074         endSetMaskWhile                      ;
  112 00000074 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  113 00000078 E12FFF1E        BX               LR
  114 0000007C         
  115 0000007C         
  116 0000007C         copy                                 ; copy(row, col)
  117 0000007C         ; Copies a pixel between the original and duplicate imag
                       e locations
  118 0000007C         ; Parameters:
  119 0000007C         ;     R0 = row
  120 0000007C         ;    R1 = col
  121 0000007C         
  122 0000007C         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  123 0000007C E92D40CF        PUSH             {R0, R1, R2, R3, R6, R7, LR}
  124 00000080 E1A06000        MOV              R6, R0      ; save row
  125 00000084 E1A07001        MOV              R7, R1      ; save col
  126 00000088         
  127 00000088 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  128 0000008C E1A02000        MOV              R2, R0      ; 
  129 00000090 E1A00006        MOV              R0, R6      ;
  130 00000094 E1A01007        MOV              R1, R7      ;
  131 00000098 EBFFFFD8        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  132 0000009C         
  133 0000009C E1A03000        MOV              R3, R0      ;
  134 000000A0 E1A00006        MOV              R0, R6      ;
  135 000000A4 E59F2560        LDR              R2, =copyAddress ;
  136 000000A8 EBFFFFD9        BL               putPixel    ; putPixel(row, col
                                                            , copyAddress)
  137 000000AC         



ARM Macro Assembler    Page 4 


  138 000000AC E8BD40CF        POP              {R0, R1, R2, R3, R6, R7, LR}
  139 000000B0 E12FFF1E        BX               LR
  140 000000B4         
  141 000000B4         
  142 000000B4         lensEffectCopy                       ; lensEffectCopy(ro
                                                            w, col)
  143 000000B4         ; Wrapper to apply greyscale to original
  144 000000B4         ; Copies a pixel at the given row and col from the dupli
                       cate image, applies the lens transposition logic and ins
                       erts it into the displayed image.
  145 000000B4         ; Parameters:
  146 000000B4         ;    R0 = row
  147 000000B4         ;    R1 = col
  148 000000B4         
  149 000000B4         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  150 000000B4 E92D40DF        PUSH             {R0, R1, R2, R3, R4, R6, R7, LR
}
  151 000000B8 E1A06000        MOV              R6, R0      ; save row
  152 000000BC E1A07001        MOV              R7, R1      ; save col
  153 000000C0         
  154 000000C0 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  155 000000C4 E1A04000        MOV              R4, R0      ; save originalAddr
                                                            ess 
  156 000000C8         
  157 000000C8 E1A00006        MOV              R0, R6      ;
  158 000000CC EB0000E9        BL               applyLens   ; row, col = applyL
                                                            ens(row, col)
  159 000000D0 E59F2534        LDR              R2, =copyAddress ;
  160 000000D4 EBFFFFC9        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss)
  161 000000D8         
  162 000000D8 E1A03000        MOV              R3, R0      ; 
  163 000000DC E1A00006        MOV              R0, R6      ;
  164 000000E0 E1A01007        MOV              R1, R7      ;
  165 000000E4 E1A02004        MOV              R2, R4      ;
  166 000000E8 EBFFFFC9        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel) 
  167 000000EC         
  168 000000EC E8BD40DF        POP              {R0, R1, R2, R3, R4, R6, R7, LR
}
  169 000000F0 E12FFF1E        BX               LR
  170 000000F4         
  171 000000F4         
  172 000000F4         applyGreyScale                       ; applyGreyScale(ro
                                                            w, col)
  173 000000F4         ; Wrapper to apply greyscale to original
  174 000000F4         ; Applies the greyscale effect to a given pixel in the i
                       mage.
  175 000000F4         ; Parameters:
  176 000000F4         ;    R0 = row
  177 000000F4         ;    R1 = col
  178 000000F4         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.



ARM Macro Assembler    Page 5 


  179 000000F4 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  180 000000F8 E1A04000        MOV              R4, R0      ; save row
  181 000000FC EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  182 00000100 E1A02000        MOV              R2, R0
  183 00000104 E1A00003        MOV              R0, R3
  184 00000108 EBFFFFBC        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  185 0000010C EB0000BA        BL               greyScale   ; pixel = greySclae
                                                            (pixel)
  186 00000110 E1A03000        MOV              R3, R0
  187 00000114 E1A00004        MOV              R0, R4
  188 00000118 EBFFFFBD        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel) 
  189 0000011C E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  190 00000120 E12FFF1E        BX               LR
  191 00000124         
  192 00000124         
  193 00000124         applyToAll                           ; applyToAll(routin
                                                            eAddress)
  194 00000124         ; Loops through all (row, col) combinations and executes
                        the given subroutine.
  195 00000124         ; The subroutine should either take no parameters or par
                       ameters R0, R1 = row, col. All registers are imutable.
  196 00000124         ; Paramenters:
  197 00000124         ;  R0 = routineAddress
  198 00000124 E92D400F        PUSH             {R0, R1, R2, R3, LR}
  199 00000128 E1A02000        MOV              R2, R0      ; save routineAddre
                                                            ss
  200 0000012C EBFFFFFE        BL               getPicWidth ; width = getPicWid
                                                            th()
  201 00000130 E1A01000        MOV              R1, R0
  202 00000134 EBFFFFFE        BL               getPicHeight ; height = getPicH
                                                            eight
  203 00000138         
  204 00000138 E2400001        SUB              R0, R0, #1
  205 0000013C         row_whl                              ; for (int row = 0;
                                                             row < height; row+
                                                            +) {
  206 0000013C E1A03000        MOV              R3, R0      ;
  207 00000140 EBFFFFFE        BL               getPicWidth ;
  208 00000144 E1A01000        MOV              R1, R0      ;
  209 00000148 E1A00003        MOV              R0, R3      ;
  210 0000014C E2411001        SUB              R1, R1, #1  ;
  211 00000150         col_whl                              ; for (int col = 0;
                                                             col < width; col++
                                                            ) {
  212 00000150 E1A0E00F        MOV              LR, PC      ;
  213 00000154 E12FFF12        BX               R2          ;  execute(routineA
                                                            ddress)
  214 00000158 E2511001        SUBS             R1, R1, #1  ;
  215 0000015C AAFFFFFB        BGE              col_whl     ;
  216 00000160         end_col_whl                          ; }
  217 00000160 E2500001        SUBS             R0, R0, #1  ;
  218 00000164 AAFFFFF4        BGE              row_whl     ;
  219 00000168         end_row_whl                          ; }
  220 00000168 E8BD400F        POP              {R0, R1, R2, R3, LR} ;



ARM Macro Assembler    Page 6 


  221 0000016C E12FFF1E        BX               LR          ;
  222 00000170         
  223 00000170         applyAdjust                          ; applyAdjust(row, 
                                                            col)
  224 00000170         ; Wrapper to apply adjust to original
  225 00000170         ; Applies the sdjust effect to a given pixel in the imag
                       e.
  226 00000170         ; Parameters:
  227 00000170         ;    R0 = row
  228 00000170         ;    R1 = col
  229 00000170         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  230 00000170 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  231 00000174 E1A04000        MOV              R4, R0
  232 00000178 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  233 0000017C E1A02000        MOV              R2, R0
  234 00000180 E1A00004        MOV              R0, R4
  235 00000184 EBFFFF9D        BL               getPixel    ; pixel = getPixel(
                                                            row, col, originalA
                                                            ddress)
  236 00000188 EB000045        BL               adjustPixelColor ; pixel = adju
                                                            stPixel(pixel)
  237 0000018C         
  238 0000018C E1A03000        MOV              R3, R0
  239 00000190 EBFFFFFE        BL               getPicAddr
  240 00000194 E1A02000        MOV              R2, R0
  241 00000198 E1A00004        MOV              R0, R4
  242 0000019C EBFFFF9C        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel)
  243 000001A0 E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  244 000001A4 E12FFF1E        BX               LR
  245 000001A8         
  246 000001A8         
  247 000001A8         applyMotionBlur
  248 000001A8         ; Wrapper to apply adjust to original
  249 000001A8         ; Applies the sdjust effect to a given pixel in the imag
                       e.
  250 000001A8         ; Parameters:
  251 000001A8         ;    R0 = row
  252 000001A8         ;    R1 = col
  253 000001A8         ; TODO: Currently the function uses hard coded addresses
                        but it should be updated to take source and destination
                        address.
  254 000001A8 E92D4FD7        PUSH             {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  255 000001AC         
  256 000001AC E3A09001        LDR              R9, =1      ; stackCount = 1 (c
                                                            urrent pixel)
  257 000001B0         ; stackParams = []
  258 000001B0 E59F8458        LDR              R8, =radius ;
  259 000001B4 E5988000        LDR              R8, [R8]    ; radius = Memory.w
                                                            ord(radiusAddress)
  260 000001B8 E1A0A000        MOV              R10, R0     ; save row 
  261 000001BC E1A0B001        MOV              R11, R1     ; save col
  262 000001C0         
  263 000001C0 E1A06000        MOV              R6, R0      ; varRow = row 



ARM Macro Assembler    Page 7 


  264 000001C4 E1A07001        MOV              R7, R1      ; varCol = col
  265 000001C8         
  266 000001C8 E59F243C        LDR              R2, =copyAddress ;
  267 000001CC         
  268 000001CC         
  269 000001CC         ; These two loops can easily be optimised.
  270 000001CC EBFFFF8B        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss) 
  271 000001D0 E52D0004        PUSH             {R0}        ; stackParams.appen
                                                            d(pixel)
  272 000001D4 E3560000        CMP              R6, #0
  273 000001D8         topLoop                              ; for (radius; radi
                                                            us > 0; radius--) {
                                                            
  274 000001D8 4A00000B        BMI              endTopLoop
  275 000001DC E2566001        SUBS             R6, R6, #1  ;  varRow--
  276 000001E0 4A000007        BMI              topFinally  ;  if (varRow out o
                                                            f bounds) break
  277 000001E4 E2577001        SUBS             R7, R7, #1  ;  varCol--
  278 000001E8 4A000005        BMI              topFinally  ; if (varCol out of
                                                             bounds) break
  279 000001EC E1A00006        MOV              R0, R6      ;
  280 000001F0 E1A01007        MOV              R1, R7      ;
  281 000001F4 E59F2410        LDR              R2, =copyAddress ;   
  282 000001F8 EBFFFF80        BL               getPixel    ;  pixel = getPixel
                                                            (row, col, copyAddr
                                                            ess)
  283 000001FC E52D0004        PUSH             {R0}        ; stackParams.appen
                                                            d(pixel)
  284 00000200 E2899001        ADD              R9, R9, #1  ; stackCount++
  285 00000204         topFinally                           ; 
  286 00000204 E2588001        SUBS             R8, R8, #1  ;
  287 00000208 1AFFFFF2        BNE              topLoop     ; }
  288 0000020C         endTopLoop
  289 0000020C         
  290 0000020C E59F83FC        LDR              R8, =radius
  291 00000210 E5988000        LDR              R8, [R8]    ; radius = Memory.w
                                                            ord(radiusAddress)
  292 00000214 E1A0600A        MOV              R6, R10     ; varRow = row 
  293 00000218 E1A0700B        MOV              R7, R11     ; varCol = col
  294 0000021C         
  295 0000021C E3560000        CMP              R6, #0
  296 00000220         bottomLoop                           ; for (radius; radi
                                                            us > 0; radius--) {
                                                            
  297 00000220 4A00000F        BMI              endBottomLoop ;  varRow++
  298 00000224 E2866001        ADD              R6, R6, #1
  299 00000228 EBFFFFFE        BL               getPicHeight
  300 0000022C E1560000        CMP              R6, R0
  301 00000230 AA000009        BGE              bottomFinally ;  if (varRow out
                                                             of bounds) break 
  302 00000234 E2877001        ADD              R7, R7, #1  ;  varCol++
  303 00000238 EBFFFFFE        BL               getPicWidth
  304 0000023C E1570000        CMP              R7, R0
  305 00000240 AA000005        BGE              bottomFinally ; if (varCol out 
                                                            of bounds) break
  306 00000244 E1A00006        MOV              R0, R6      ;
  307 00000248 E1A01007        MOV              R1, R7      ;



ARM Macro Assembler    Page 8 


  308 0000024C E59F23B8        LDR              R2, =copyAddress ;
  309 00000250 EBFFFF6A        BL               getPixel    ; pixel = getPixel(
                                                            row, col, copyAddre
                                                            ss)
  310 00000254 E52D0004        PUSH             {R0}        ; stackParams.appen
                                                            d(pixel)
  311 00000258 E2899001        ADD              R9, R9, #1  ; stackCount++
  312 0000025C         bottomFinally
  313 0000025C E2588001        SUBS             R8, R8, #1
  314 00000260 1AFFFFEE        BNE              bottomLoop
  315 00000264         endBottomLoop                        ; }
  316 00000264         
  317 00000264 E52D9004        PUSH             {R9}        ; stackParams.appen
                                                            d(stackCount)
  318 00000268 EB000037        BL               averageN    ; pixel = averageN(
                                                            stackParams)
  319 0000026C         
  320 0000026C E1A0600A        MOV              R6, R10
  321 00000270 E1A0700B        MOV              R7, R11
  322 00000274         
  323 00000274 E1A03000        MOV              R3, R0
  324 00000278 EBFFFFFE        BL               getPicAddr  ; originalAddress =
                                                             getPicAddr()
  325 0000027C E1A02000        MOV              R2, R0
  326 00000280 E1A00006        MOV              R0, R6
  327 00000284 E1A01007        MOV              R1, R7
  328 00000288 EBFFFF61        BL               putPixel    ; putPixel(row, col
                                                            , originalAddress, 
                                                            pixel)
  329 0000028C         
  330 0000028C E49D9004        POP              {R9}
  331 00000290         clear_stack                          ; del stackParams
  332 00000290 E49DC004        POP              {R12}
  333 00000294 E2599001        SUBS             R9, R9, #1
  334 00000298 1AFFFFFC        BNE              clear_stack
  335 0000029C         
  336 0000029C E8BD4FD7        POP              {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  337 000002A0 E12FFF1E        BX               LR
  338 000002A4         
  339 000002A4         ;<--------------Effects-------------->
  340 000002A4         
  341 000002A4         adjustPixelColor                     ; adjustedVal = adj
                                                            ustPixel(value, con
                                                            trast, brightness)
  342 000002A4         ; Applies a given contrast and brightness value
  343 000002A4         ; Parameters:
  344 000002A4         ;     R0 = RGB
  345 000002A4         ; TODO: Currently the function useshard coded addresses 
                       but it should be updated to brightness and contrast para
                       meters.
  346 000002A4         
  347 000002A4 E92D400E        PUSH             {R1, R2, R3, LR}
  348 000002A8 E59F2364        LDR              R2, =contrast
  349 000002AC E5922000        LDR              R2, [R2]    ; contrast = Memory
                                                            .word(contrastAddre
                                                            ss)
  350 000002B0 E59F3360        LDR              R3, =brightness
  351 000002B4 E5933000        LDR              R3, [R3]    ; brightness = Memo



ARM Macro Assembler    Page 9 


                                                            ry.word(brightnessA
                                                            ddress)
  352 000002B8 E92D000C        PUSH             {R2, R3}    ; save link registe
                                                            r and pass paramter
                                                            s contrast and brig
                                                            htness
  353 000002BC E1A03000        MOV              R3, R0
  354 000002C0         
  355 000002C0 E3A018FF        LDR              R1, = redMask ; mask = redMask
  356 000002C4 EBFFFF5D        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
  357 000002C8 E1A02000        MOV              R2, R0
  358 000002CC EB000012        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
  359 000002D0 E1A00003        MOV              R0, R3
  360 000002D4 EBFFFF61        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
  361 000002D8 E1A03000        MOV              R3, R0
  362 000002DC         
  363 000002DC E3A01CFF        LDR              R1, = greenMask
  364 000002E0 EBFFFF56        BL               getValueFromMask
  365 000002E4 E1A02000        MOV              R2, R0
  366 000002E8 EB00000B        BL               adjustColor
  367 000002EC E1A00003        MOV              R0, R3
  368 000002F0 EBFFFF5A        BL               setValueFromMask
  369 000002F4 E1A03000        MOV              R3, R0
  370 000002F8         
  371 000002F8 E3A010FF        LDR              R1, = blueMask
  372 000002FC EBFFFF4F        BL               getValueFromMask
  373 00000300 E1A02000        MOV              R2, R0
  374 00000304 EB000004        BL               adjustColor
  375 00000308 E1A00003        MOV              R0, R3
  376 0000030C EBFFFF53        BL               setValueFromMask
  377 00000310         
  378 00000310 E8BD000C        POP              {R2, R3}
  379 00000314 E8BD400E        POP              {R1, R2, R3, LR}
  380 00000318 E12FFF1E        BX               LR
  381 0000031C         
  382 0000031C         adjustColor                          ; val = adjustColor
                                                            (color, contrast, b
                                                            rightness)
  383 0000031C         ; applies the brightness contrast formula
  384 0000031C         ; If the conrast is negative the picture will be inverte
                       d and the relevant contrast applied.
  385 0000031C         ; Paramters:
  386 0000031C         ;     R2 = color
  387 0000031C         ;     Stack > contrast, brightness that order.
  388 0000031C         ; Return Values
  389 0000031C         ;     R2 = color
  390 0000031C         ;    Stack > contrast, brightness that order.
  391 0000031C E92D0030        STMFD            SP!, {R4, R5}
  392 00000320 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  393 00000324 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  394 00000328 E0120294        MULS             R2, R4, R2  ; color *= contrast



ARM Macro Assembler    Page 10 


                                                            
  395 0000032C E1A02242        ASR              R2, R2, #4  ; color /= 16
  396 00000330 428220FF        ADDMI            R2, R2, #255 ; invert color if 
                                                            contrast was negati
                                                            ve
  397 00000334 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  398 00000338 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  399 0000033C E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  400 00000340 C3A020FF        LDRGT            R2, =255    ; color = 255
  401 00000344 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  402 00000348 E12FFF1E        BX               LR
  403 0000034C         
  404 0000034C         averageN                             ; Takes in N RGB va
                                                            lues and computes t
                                                            heir blur value.
  405 0000034C         ; Parameters:
  406 0000034C         ; Stack > N    | 0 < N
  407 0000034C         ; Stack > count RGB values
  408 0000034C         ; Returns:
  409 0000034C         ; R0 = average
  410 0000034C         
  411 0000034C E89D0001        LDMFD            SP, {R0}    ; N = stackParams.g
                                                            et(0)
  412 00000350 E92D407E        STMFD            SP!, {R1 - R6, LR} ;
  413 00000354 E3A04007        LDR              R4, =7      ; savedParams = 7 (
                                                            R1 - R6, LR)
  414 00000358 E1A03000        MOV              R3, R0      ; save N
  415 0000035C E0845003        ADD              R5, R4, R3  ; stackParamsIndex 
                                                            = savedParams + N
  416 00000360 E3A06000        LDR              R6, =0      ; finalPixel = 0
  417 00000364 E3A018FF        LDR              R1, =redMask
  418 00000368 EB000006        BL               averageColor ; average(red)
  419 0000036C E3A01CFF        LDR              R1, =greenMask
  420 00000370 EB000004        BL               averageColor ; average(green)
  421 00000374 E3A010FF        LDR              R1, =blueMask
  422 00000378 EB000002        BL               averageColor ; average(blue)
  423 0000037C E1A00006        MOV              R0, R6
  424 00000380 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  425 00000384 E12FFF1E        BX               LR
  426 00000388         averageColor                         ; private subroutin
                                                            e average()
  427 00000388 E3A02000        LDR              R2, =0      ; total = 0
  428 0000038C         forN
  429 0000038C E1550004        CMP              R5, R4      ; for (stackParamsI
                                                            ndex; stackParamsIn
                                                            dex > savedParams; 
                                                            stackParamsIndex--)
                                                             {
  430 00000390 0A000006        BEQ              endForN     ;
  431 00000394 E79D0105        LDR              R0, [SP, R5, LSL #2] ; pixel = 
                                                            stackParams.get(sta
                                                            ckParamsIndex)
  432 00000398 E52DE004        PUSH             {LR}        ;
  433 0000039C EBFFFF27        BL               getValueFromMask ;  color = get
                                                            ValueFromMask(pixel



ARM Macro Assembler    Page 11 


                                                            , mask)
  434 000003A0 E49DE004        POP              {LR}        ;
  435 000003A4 E0822000        ADD              R2, R2, R0  ; total += color
  436 000003A8 E2555001        SUBS             R5, R5, #1  ;
  437 000003AC EAFFFFF6        B                forN        ; }
  438 000003B0         endForN
  439 000003B0 E52D1004        PUSH             {R1}        ; save mask
  440 000003B4 E1A00002        MOV              R0, R2
  441 000003B8 E1A01003        MOV              R1, R3
  442 000003BC E52DE004        PUSH             {LR}
  443 000003C0 EB00006F        BL               divide      ; color = total / N
                                                            
  444 000003C4 E49DE004        POP              {LR}
  445 000003C8 E3510000        CMP              R1, #0      ; if (color < 0): /
                                                            / this should never
                                                             happen.
  446 000003CC 43A01000        LDRMI            R1, =0      ; color = 0
  447 000003D0 E35100FF        CMP              R1, #255    ; if (color > 255):
                                                            
  448 000003D4 C3A010FF        LDRGT            R1, =255    ;  color = 255
  449 000003D8 E1A00006        MOV              R0, R6
  450 000003DC E1A02001        MOV              R2, R1
  451 000003E0 E49D1004        POP              {R1}        ; restore mask
  452 000003E4 E52DE004        PUSH             {LR}
  453 000003E8 EBFFFF1C        BL               setValueFromMask ; pixel = setV
                                                            alueFromMask(pixel,
                                                             mask, color)
  454 000003EC E49DE004        POP              {LR}
  455 000003F0 E1A06000        MOV              R6, R0
  456 000003F4         
  457 000003F4 E0845003        ADD              R5, R4, R3
  458 000003F8 E12FFF1E        BX               LR
  459 000003FC         
  460 000003FC         greyScale                            ; Converts a pixel 
                                                            to a light intensit
                                                            y value and generat
                                                            es a grey image bas
                                                            ed on this.
  461 000003FC         ; Paramteters
  462 000003FC         ;    R0 = RGB
  463 000003FC         ; Return
  464 000003FC         ;    R0 = Light intesity
  465 000003FC         ; The weightings used add up to 1000
  466 000003FC E92D401E        PUSH             {R1, R2, R3, R4, LR}
  467 00000400 E1A02000        MOV              R2, R0      ; save RGB
  468 00000404 E3A03000        LDR              R3, =0      ; weigthedTotal
  469 00000408         
  470 00000408 E3A018FF        LDR              R1, =redMask
  471 0000040C EBFFFF0B        BL               getValueFromMask ; color = getV
                                                            alueFromMask(pixel,
                                                             redMask)
  472 00000410 E59FC208        LDR              R12, =299   ; weighting = 299
  473 00000414 E1A01000        MOV              R1, R0
  474 00000418 E0000C91        MUL              R0, R1, R12
  475 0000041C E0833000        ADD              R3, R3, R0  ; weightedTotal += 
                                                            color * weighting
  476 00000420         
  477 00000420         ; sudo code similar to above
  478 00000420 E1A00002        MOV              R0, R2



ARM Macro Assembler    Page 12 


  479 00000424 E3A01CFF        LDR              R1, =greenMask
  480 00000428 EBFFFF04        BL               getValueFromMask
  481 0000042C E59FC1F0        LDR              R12, =587
  482 00000430 E1A01000        MOV              R1, R0
  483 00000434 E0000C91        MUL              R0, R1, R12
  484 00000438 E0833000        ADD              R3, R3, R0
  485 0000043C         
  486 0000043C         ; sudo code similar to above
  487 0000043C E1A00002        MOV              R0, R2
  488 00000440 E3A010FF        LDR              R1, =blueMask
  489 00000444 EBFFFEFD        BL               getValueFromMask
  490 00000448 E3A0C072        LDR              R12, =114
  491 0000044C E1A01000        MOV              R1, R0
  492 00000450 E0000C91        MUL              R0, R1, R12
  493 00000454 E0833000        ADD              R3, R3, R0
  494 00000458         
  495 00000458 E1A00003        MOV              R0, R3
  496 0000045C E3A01FFA        LDR              R1, =1000
  497 00000460 EB000047        BL               divide      ; lightIntensity = 
                                                            weightedTotal / 100
                                                            0
  498 00000464         
  499 00000464         convert_to_pixel
  500 00000464 E1A00001        MOV              R0, R1      ;  
  501 00000468 E59F11B8        LDR              R1, =0x00010101
  502 0000046C E0000091        MUL              R0, R1, R0  ; pixel = lightInte
                                                            nsity * rgb locatio
                                                            n identifier **0x00
                                                            010101**
  503 00000470         
  504 00000470 E8BD401E        POP              {R1, R2, R3, R4, LR}
  505 00000474 E12FFF1E        BX               LR
  506 00000478         
  507 00000478         applyLens                            ; applyLens(y, x) u
                                                            sing col row instea
                                                            d of y x here becau
                                                            se it's easier to t
                                                            hink of geometrical
                                                            ly.
  508 00000478         ; Parameters:
  509 00000478         ;     R0 = y
  510 00000478         ;     R1 = X
  511 00000478         ; TODO: Currently the function useshard coded coeficient
                       s but it should be updated to a coeficient parameter.
  512 00000478         normalize_origin
  513 00000478 E92D4E1F        PUSH             {r0, r1, R2, R3, R4, R9, R10, R
11, LR} 
                                                            ; saving y and x
  514 0000047C         
  515 0000047C E3A04014        LDR              R4, =lensq  ; lensCoeficient   
                                                               
  516 00000480 EBFFFFFE        BL               getPicHeight ; height = getPicH
                                                            eight()            
                                                            
  517 00000484 E1A000A0        LSR              R0, R0, #1  ; centery = height 
                                                            / 2
  518 00000488 E1A02000        MOV              R2, R0
  519 0000048C         
  520 0000048C EBFFFFFE        BL               getPicWidth ; width = getPicWid



ARM Macro Assembler    Page 13 


                                                            th()
  521 00000490 E1A000A0        LSR              R0, R0, #1  ; centerx = width /
                                                             2
  522 00000494 E1A03000        MOV              R3, R0
  523 00000498         
  524 00000498 E8BD0003        POP              {r0, r1}    ; restore y and x
  525 0000049C         
  526 0000049C         ; normalizing
  527 0000049C E0400002        SUB              R0, R0, R2  ; y -= centery
  528 000004A0 E0411003        SUB              R1, R1, R3  ; x -= centery
  529 000004A4         
  530 000004A4 E1A0A000        MOV              R10, R0     ; save y
  531 000004A8 E1A0B001        MOV              R11, R1     ; save x
  532 000004AC         
  533 000004AC EB00002C        BL               distanceSqr ; 
  534 000004B0 EB000017        BL               sqrt        ; distance = sqr(di
                                                            stanceSqr(y, x))
  535 000004B4 E1A09000        MOV              R9, R0
  536 000004B8         
  537 000004B8 E1A0000A        MOV              R0, R10
  538 000004BC E1540009        CMP              R4, R9      ; if (lensCoeficien
                                                            t < distance):
  539 000004C0 B0000094        MULLT            R0, R4, R0  ; offset = y * lens
                                                            Coeficient
  540 000004C4 A0000099        MULGE            R0, R9, R0  ; else:
  541 000004C8 E1A01009        MOV              R1, R9      ; offset = y * dist
                                                            ance
  542 000004CC EB00002C        BL               divide      ; offset = offset /
                                                             distance
  543 000004D0 E04AA001        SUB              R10, R10, R1 ; y -= offset
  544 000004D4         
  545 000004D4         ; same sudo code as above using x
  546 000004D4 E1A0000B        MOV              R0, R11
  547 000004D8 E1540009        CMP              R4, R9
  548 000004DC B0000094        MULLT            R0, R4, R0
  549 000004E0 A0000099        MULGE            R0, R9, R0
  550 000004E4 E1A01009        MOV              R1, R9
  551 000004E8 EB000025        BL               divide
  552 000004EC E04BB001        SUB              R11, R11, R1
  553 000004F0         
  554 000004F0         denormalise_y_x
  555 000004F0 EBFFFFFE        BL               getPicHeight
  556 000004F4 E1A000A0        LSR              R0, R0, #1
  557 000004F8 E08AA000        ADD              R10, R10, R0 ; y += height / 2
  558 000004FC         
  559 000004FC EBFFFFFE        BL               getPicWidth
  560 00000500 E1A000A0        LSR              R0, R0, #1
  561 00000504 E08B1000        ADD              R1, R11, R0 ; x += width / 2
  562 00000508         
  563 00000508 E1A0000A        MOV              R0, R10
  564 0000050C         
  565 0000050C         
  566 0000050C E8BD4E1C        POP              {R2, R3, R4, R9, R10, R11, LR}
  567 00000510 E12FFF1E        BX               LR
  568 00000514         
  569 00000514         
  570 00000514         ;<---------------Square root methods---------------->
  571 00000514         
  572 00000514         sqrt



ARM Macro Assembler    Page 14 


  573 00000514         ; Finds the square root of a number
  574 00000514         ; Parameters:
  575 00000514         ;  R0 = number
  576 00000514         ; Outputs:
  577 00000514         ;  R0 = sqare root
  578 00000514 E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  579 00000518 012FFF1E        BXEQ             LR
  580 0000051C         
  581 0000051C E92D481E        PUSH             {R1, R2, R3, R4, R11, LR}
  582 00000520 E1A0B000        MOV              R11, R0     ; save number
  583 00000524 E3A03000        LDR              R3, =0      ; temp = 0
  584 00000528 E1A02000        MOV              R2, R0      ; x = S
  585 0000052C         
  586 0000052C         find_sqr_whl                         ; while (previous x
                                                             != next x) {
  587 0000052C E1A020A2        LSR              R2, R2, #1  ;  x /= 2
  588 00000530 E0524003        SUBS             R4, R2, R3
  589 00000534 0A000007        BEQ              end_sqr_whl ;         return x
  590 00000538 E3540001        CMP              R4, #1
  591 0000053C 0A000005        BEQ              end_sqr_whl
  592 00000540 E1A03002        MOV              R3, R2      ;  temp = x
  593 00000544 E1A01002        MOV              R1, R2      ; 
  594 00000548 E1A0000B        MOV              R0, R11     ;
  595 0000054C EB00000C        BL               divide      ; 
  596 00000550 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  597 00000554 EAFFFFF4        B                find_sqr_whl
  598 00000558         end_sqr_whl
  599 00000558         
  600 00000558 E1A00002        MOV              R0, R2
  601 0000055C E8BD481E        POP              {R1, R2, R3, R4, R11, LR}
  602 00000560 E12FFF1E        BX               LR
  603 00000564         
  604 00000564         distanceSqr                          ; distnanceSqr(y, x
                                                            )
  605 00000564         ; Parameters:
  606 00000564         ;  R0 = relativex
  607 00000564         ;  R1 = relativey
  608 00000564         ; Return:
  609 00000564         ;  R0 = distance^2
  610 00000564 E92D0006        PUSH             {R1, R2}
  611 00000568 E1A02000        MOV              R2, R0
  612 0000056C E0000092        MUL              R0, R2, R0  ; y *= y
  613 00000570 E1A02001        MOV              R2, R1
  614 00000574 E0010192        MUL              R1, R2, R1  ; x *= x
  615 00000578 E0800001        ADD              R0, R0, R1  ; distance^2 = x + 
                                                            y
  616 0000057C E8BD0006        POP              {R1, R2}
  617 00000580 E12FFF1E        BX               LR
  618 00000584         
  619 00000584         
  620 00000584         
  621 00000584         ;<-------------- Division Method -------------->;
  622 00000584         ; taken from my group work in the labs
  623 00000584         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            



ARM Macro Assembler    Page 15 


  624 00000584 E92D401C        STMFD            SP!, {R2, R3, R4, LR}
  625 00000588         
  626 00000588 E3A04001        LDR              R4, =1      ;negative flag
  627 0000058C E3500000        CMP              R0, #0      ;if dividend < 0
  628 00000590 42644000        NEGMI            R4, R4      ; flag *= -1
  629 00000594 42600000        NEGMI            R0, R0      ; dividend *= -1
  630 00000598 E3510000        CMP              R1, #0      ; if divisor < 0
  631 0000059C 42644000        NEGMI            R4, R4      ; flag *= -1
  632 000005A0 42611000        NEGMI            R1, R1      ; divisor *= -1
  633 000005A4         
  634 000005A4 E3A02000        LDR              R2, =0      ; Q             ;se
                                                            t temp quotient to 
                                                            0
  635 000005A8 E3A03001        LDR              R3, =1      ; T             ;se
                                                            t placeholder to 1
  636 000005AC         
  637 000005AC E3510000        CMP              R1, #0      ;              ;if 
                                                            Divisor == 0
  638 000005B0 059F0074        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  639 000005B4 01A02000        MOVEQ            R2, R0      ;load -1 into quoti
                                                            ent
  640 000005B8 0A00000B        BEQ              div_zero    ;stop
  641 000005BC         
  642 000005BC         alignLoop                            ;else
  643 000005BC E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  644 000005C0 BA000002        BLT              endAlignLoop ;{
  645 000005C4 E1A01081        LSL              R1, R1, #1  ; multiply divisor 
                                                            by 2
  646 000005C8 E1A03083        LSL              R3, R3, #1  ; multiply placehol
                                                            der by 2
  647 000005CC EAFFFFFA        B                alignLoop   ;}
  648 000005D0         endAlignLoop
  649 000005D0         
  650 000005D0         division_whl                         ;{
  651 000005D0 E1A010A1        LSR              R1, R1, #1  ;divide divisor by 
                                                            2
  652 000005D4 E1B030A3        LSRS             R3, R3, #1  ;divide r3 by 2 and
                                                             set flag
  653 000005D8 2A000003        BCS              end_division_whl ;while carry f
                                                            lag not set{ 
  654 000005DC E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  655 000005E0 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  656 000005E4 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  657 000005E8 EAFFFFF8        B                division_whl ; 
  658 000005EC         end_division_whl                     ; }
  659 000005EC         div_zero
  660 000005EC E1A01002        MOV              R1, R2
  661 000005F0 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  662 000005F4 E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}
  663 000005F8 E12FFF1E        BX               LR
  664 000005FC         
  665 000005FC         ;<-----------------Main---------------->
  666 000005FC         start



ARM Macro Assembler    Page 16 


  667 000005FC         ; Uncomment any block to see effect.
  668 000005FC         
  669 000005FC         ;<------Adjust------>
  670 000005FC E59F002C        LDR              R0, =applyAdjust
  671 00000600 EBFFFEC7        BL               applyToAll
  672 00000604         
  673 00000604         ;<----MotionBlur---->
  674 00000604         ;LDR R0, =copy
  675 00000604         ;BL applyToAll
  676 00000604         ;LDR R0, =applyMotionBlur
  677 00000604         ;BL applyToAll
  678 00000604         
  679 00000604         ;<----LensEffect---->
  680 00000604         ;LDR R0, =copy
  681 00000604         ;BL applyToAll
  682 00000604         ;LDR R0, =lensEffectCopy
  683 00000604         ;BL applyToAll
  684 00000604         
  685 00000604         ;<-----GreyScale---->
  686 00000604         ;LDR R0, = applyGreyScale
  687 00000604         ;BL applyToAll
  688 00000604         
  689 00000604         
  690 00000604         ; Display results:
  691 00000604 EBFFFFFE        BL               putPic
  692 00000608         
  693 00000608 EAFFFFFE 
                       stop    B                stop
  694 0000060C         
  695 0000060C         ;<----------------Memory--------------->
  696 0000060C         
  697 0000060C A1016300 
              00000000 
              00000000 
              00000000 
              00000000 
              0000012B 
              0000024B 
              00010101 
              FFFFFFFF 
              00000000         AREA             Variables, DATA, READWRITE
  698 00000000 00000002 
                       radius  DCD              2
  699 00000004 00000016 
                       contrast
                               DCD              22
  700 00000008 00000016 
                       brightness
                               DCD              22
  701 0000000C         
  702 0000000C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
adjustColor 0000031C

Symbol: adjustColor
   Definitions
      At line 382 in file BonusEffect.s
   Uses
      At line 358 in file BonusEffect.s
      At line 366 in file BonusEffect.s
      At line 374 in file BonusEffect.s

adjustPixelColor 000002A4

Symbol: adjustPixelColor
   Definitions
      At line 341 in file BonusEffect.s
   Uses
      At line 236 in file BonusEffect.s
Comment: adjustPixelColor used once
alignLoop 000005BC

Symbol: alignLoop
   Definitions
      At line 642 in file BonusEffect.s
   Uses
      At line 647 in file BonusEffect.s
Comment: alignLoop used once
applyAdjust 00000170

Symbol: applyAdjust
   Definitions
      At line 223 in file BonusEffect.s
   Uses
      At line 670 in file BonusEffect.s
Comment: applyAdjust used once
applyGreyScale 000000F4

Symbol: applyGreyScale
   Definitions
      At line 172 in file BonusEffect.s
   Uses
      None
Comment: applyGreyScale unused
applyLens 00000478

Symbol: applyLens
   Definitions
      At line 507 in file BonusEffect.s
   Uses
      At line 158 in file BonusEffect.s
Comment: applyLens used once
applyMotionBlur 000001A8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: applyMotionBlur
   Definitions
      At line 247 in file BonusEffect.s
   Uses
      None
Comment: applyMotionBlur unused
applyToAll 00000124

Symbol: applyToAll
   Definitions
      At line 193 in file BonusEffect.s
   Uses
      At line 671 in file BonusEffect.s
Comment: applyToAll used once
averageColor 00000388

Symbol: averageColor
   Definitions
      At line 426 in file BonusEffect.s
   Uses
      At line 418 in file BonusEffect.s
      At line 420 in file BonusEffect.s
      At line 422 in file BonusEffect.s

averageN 0000034C

Symbol: averageN
   Definitions
      At line 404 in file BonusEffect.s
   Uses
      At line 318 in file BonusEffect.s
Comment: averageN used once
bottomFinally 0000025C

Symbol: bottomFinally
   Definitions
      At line 312 in file BonusEffect.s
   Uses
      At line 301 in file BonusEffect.s
      At line 305 in file BonusEffect.s

bottomLoop 00000220

Symbol: bottomLoop
   Definitions
      At line 296 in file BonusEffect.s
   Uses
      At line 314 in file BonusEffect.s
Comment: bottomLoop used once
clear_stack 00000290

Symbol: clear_stack
   Definitions
      At line 331 in file BonusEffect.s
   Uses
      At line 334 in file BonusEffect.s
Comment: clear_stack used once
col_whl 00000150



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: col_whl
   Definitions
      At line 211 in file BonusEffect.s
   Uses
      At line 215 in file BonusEffect.s
Comment: col_whl used once
convert_to_pixel 00000464

Symbol: convert_to_pixel
   Definitions
      At line 499 in file BonusEffect.s
   Uses
      None
Comment: convert_to_pixel unused
copy 0000007C

Symbol: copy
   Definitions
      At line 116 in file BonusEffect.s
   Uses
      None
Comment: copy unused
denormalise_y_x 000004F0

Symbol: denormalise_y_x
   Definitions
      At line 554 in file BonusEffect.s
   Uses
      None
Comment: denormalise_y_x unused
distanceSqr 00000564

Symbol: distanceSqr
   Definitions
      At line 604 in file BonusEffect.s
   Uses
      At line 533 in file BonusEffect.s
Comment: distanceSqr used once
div_zero 000005EC

Symbol: div_zero
   Definitions
      At line 659 in file BonusEffect.s
   Uses
      At line 640 in file BonusEffect.s
Comment: div_zero used once
divide 00000584

Symbol: divide
   Definitions
      At line 623 in file BonusEffect.s
   Uses
      At line 443 in file BonusEffect.s
      At line 497 in file BonusEffect.s
      At line 542 in file BonusEffect.s
      At line 551 in file BonusEffect.s
      At line 595 in file BonusEffect.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

division_whl 000005D0

Symbol: division_whl
   Definitions
      At line 650 in file BonusEffect.s
   Uses
      At line 657 in file BonusEffect.s
Comment: division_whl used once
endAlignLoop 000005D0

Symbol: endAlignLoop
   Definitions
      At line 648 in file BonusEffect.s
   Uses
      At line 644 in file BonusEffect.s
Comment: endAlignLoop used once
endBottomLoop 00000264

Symbol: endBottomLoop
   Definitions
      At line 315 in file BonusEffect.s
   Uses
      At line 297 in file BonusEffect.s
Comment: endBottomLoop used once
endForN 000003B0

Symbol: endForN
   Definitions
      At line 438 in file BonusEffect.s
   Uses
      At line 430 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 00000058

Symbol: endGetMaskWhile
   Definitions
      At line 90 in file BonusEffect.s
   Uses
      At line 87 in file BonusEffect.s
Comment: endGetMaskWhile used once
endSetMaskWhile 00000074

Symbol: endSetMaskWhile
   Definitions
      At line 111 in file BonusEffect.s
   Uses
      At line 108 in file BonusEffect.s
Comment: endSetMaskWhile used once
endTopLoop 0000020C

Symbol: endTopLoop
   Definitions
      At line 288 in file BonusEffect.s
   Uses
      At line 274 in file BonusEffect.s
Comment: endTopLoop used once
end_col_whl 00000160

Symbol: end_col_whl



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 216 in file BonusEffect.s
   Uses
      None
Comment: end_col_whl unused
end_division_whl 000005EC

Symbol: end_division_whl
   Definitions
      At line 658 in file BonusEffect.s
   Uses
      At line 653 in file BonusEffect.s
Comment: end_division_whl used once
end_row_whl 00000168

Symbol: end_row_whl
   Definitions
      At line 219 in file BonusEffect.s
   Uses
      None
Comment: end_row_whl unused
end_sqr_whl 00000558

Symbol: end_sqr_whl
   Definitions
      At line 598 in file BonusEffect.s
   Uses
      At line 589 in file BonusEffect.s
      At line 591 in file BonusEffect.s

find_sqr_whl 0000052C

Symbol: find_sqr_whl
   Definitions
      At line 586 in file BonusEffect.s
   Uses
      At line 597 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 0000038C

Symbol: forN
   Definitions
      At line 428 in file BonusEffect.s
   Uses
      At line 437 in file BonusEffect.s
Comment: forN used once
getMaskWhile 00000048

Symbol: getMaskWhile
   Definitions
      At line 85 in file BonusEffect.s
   Uses
      At line 89 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 22 in file BonusEffect.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 131 in file BonusEffect.s
      At line 160 in file BonusEffect.s
      At line 184 in file BonusEffect.s
      At line 235 in file BonusEffect.s
      At line 270 in file BonusEffect.s
      At line 282 in file BonusEffect.s
      At line 309 in file BonusEffect.s

getValueFromMask 00000040

Symbol: getValueFromMask
   Definitions
      At line 73 in file BonusEffect.s
   Uses
      At line 356 in file BonusEffect.s
      At line 364 in file BonusEffect.s
      At line 372 in file BonusEffect.s
      At line 433 in file BonusEffect.s
      At line 471 in file BonusEffect.s
      At line 480 in file BonusEffect.s
      At line 489 in file BonusEffect.s

greyScale 000003FC

Symbol: greyScale
   Definitions
      At line 460 in file BonusEffect.s
   Uses
      At line 185 in file BonusEffect.s
Comment: greyScale used once
lensEffectCopy 000000B4

Symbol: lensEffectCopy
   Definitions
      At line 142 in file BonusEffect.s
   Uses
      None
Comment: lensEffectCopy unused
normalize_origin 00000478

Symbol: normalize_origin
   Definitions
      At line 512 in file BonusEffect.s
   Uses
      None
Comment: normalize_origin unused
putPixel 00000014

Symbol: putPixel
   Definitions
      At line 39 in file BonusEffect.s
   Uses
      At line 136 in file BonusEffect.s
      At line 166 in file BonusEffect.s
      At line 188 in file BonusEffect.s
      At line 242 in file BonusEffect.s
      At line 328 in file BonusEffect.s




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

rowColToIndex 00000028

Symbol: rowColToIndex
   Definitions
      At line 56 in file BonusEffect.s
   Uses
      At line 32 in file BonusEffect.s
      At line 49 in file BonusEffect.s

row_whl 0000013C

Symbol: row_whl
   Definitions
      At line 205 in file BonusEffect.s
   Uses
      At line 218 in file BonusEffect.s
Comment: row_whl used once
setMaskWhile 00000064

Symbol: setMaskWhile
   Definitions
      At line 106 in file BonusEffect.s
   Uses
      At line 110 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 00000060

Symbol: setValueFromMask
   Definitions
      At line 95 in file BonusEffect.s
   Uses
      At line 360 in file BonusEffect.s
      At line 368 in file BonusEffect.s
      At line 376 in file BonusEffect.s
      At line 453 in file BonusEffect.s

sqrt 00000514

Symbol: sqrt
   Definitions
      At line 572 in file BonusEffect.s
   Uses
      At line 534 in file BonusEffect.s
Comment: sqrt used once
start 000005FC

Symbol: start
   Definitions
      At line 666 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 00000608

Symbol: stop
   Definitions
      At line 693 in file BonusEffect.s
   Uses
      At line 693 in file BonusEffect.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Comment: stop used once
topFinally 00000204

Symbol: topFinally
   Definitions
      At line 285 in file BonusEffect.s
   Uses
      At line 276 in file BonusEffect.s
      At line 278 in file BonusEffect.s

topLoop 000001D8

Symbol: topLoop
   Definitions
      At line 273 in file BonusEffect.s
   Uses
      At line 287 in file BonusEffect.s
Comment: topLoop used once
50 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 697 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
brightness 00000008

Symbol: brightness
   Definitions
      At line 700 in file BonusEffect.s
   Uses
      At line 350 in file BonusEffect.s
Comment: brightness used once
contrast 00000004

Symbol: contrast
   Definitions
      At line 699 in file BonusEffect.s
   Uses
      At line 348 in file BonusEffect.s
Comment: contrast used once
radius 00000000

Symbol: radius
   Definitions
      At line 698 in file BonusEffect.s
   Uses
      At line 258 in file BonusEffect.s
      At line 290 in file BonusEffect.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 371 in file BonusEffect.s
      At line 421 in file BonusEffect.s
      At line 488 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 135 in file BonusEffect.s
      At line 159 in file BonusEffect.s
      At line 266 in file BonusEffect.s
      At line 281 in file BonusEffect.s
      At line 308 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 363 in file BonusEffect.s
      At line 419 in file BonusEffect.s
      At line 479 in file BonusEffect.s

lensn 00000001

Symbol: lensn
   Definitions
      At line 16 in file BonusEffect.s
   Uses
      None
Comment: lensn unused
lensq 00000014

Symbol: lensq
   Definitions
      At line 17 in file BonusEffect.s
   Uses
      At line 515 in file BonusEffect.s
Comment: lensq used once
redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 355 in file BonusEffect.s
      At line 417 in file BonusEffect.s
      At line 470 in file BonusEffect.s

xhalf 00000028



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: xhalf
   Definitions
      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 127 in file BonusEffect.s
      At line 154 in file BonusEffect.s
      At line 181 in file BonusEffect.s
      At line 232 in file BonusEffect.s
      At line 239 in file BonusEffect.s
      At line 324 in file BonusEffect.s

getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 202 in file BonusEffect.s
      At line 299 in file BonusEffect.s
      At line 516 in file BonusEffect.s
      At line 555 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 66 in file BonusEffect.s
      At line 200 in file BonusEffect.s
      At line 207 in file BonusEffect.s
      At line 303 in file BonusEffect.s
      At line 520 in file BonusEffect.s
      At line 559 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 691 in file BonusEffect.s
Comment: putPic used once
5 symbols
406 symbols in table
