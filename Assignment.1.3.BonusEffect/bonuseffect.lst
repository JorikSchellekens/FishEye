


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000         
   17 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   18 00000000         ; Parameters:
   19 00000000         ; R0 = row
   20 00000000         ; R1 = column
   21 00000000         ; R2 = image address
   22 00000000         ; Stack must be cleared by caller
   23 00000000         ; Returns:
   24 00000000         ; R0 = RGBvalue
   25 00000000 E92D4000        STMFD            SP!, {LR}
   26 00000004         
   27 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   28 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   29 0000000C         
   30 0000000C E8BD4000        LDMFD            SP!, {LR}
   31 00000010 E12FFF1E        BX               LR
   32 00000014         
   33 00000014         rowColToIndex
   34 00000014         ; converts row and colum to index
   35 00000014         ; Parameters
   36 00000014         ; R0 = row
   37 00000014         ; R1 = col
   38 00000014         ; Stack must be cleared by caller
   39 00000014         ; Return Values
   40 00000014         ; R0 addressIndex
   41 00000014 E92D4004        PUSH             {R2, LR}
   42 00000018 E1A02000        MOV              R2, R0
   43 0000001C EBFFFFFE        BL               getPicWidth



ARM Macro Assembler    Page 2 


   44 00000020 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   45 00000024 E8BD4004        POP              {R2, LR}
   46 00000028 E12FFF1E        BX               LR
   47 0000002C         
   48 0000002C         putPixel
   49 0000002C         ; Stores a given RGB to a pixel at row, col
   50 0000002C         ; Parameters
   51 0000002C         ; R0 = row
   52 0000002C         ; R1 = col
   53 0000002C         ; R2 = picture address
   54 0000002C         ; R3 = RGB
   55 0000002C         ; Stack must be cleared by caller
   56 0000002C         
   57 0000002C E92D4000        STMFD            SP!, {LR}
   58 00000030         
   59 00000030 EBFFFFF7        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   60 00000034 E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   61 00000038         
   62 00000038 E8BD4000        LDMFD            SP!, {LR}
   63 0000003C E12FFF1E        BX               LR
   64 00000040         
   65 00000040         adjustPixel
   66 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   67 00000040         ; Applies a given contrast and brightness value
   68 00000040         ; Parameters:
   69 00000040         ; R0 = RGB
   70 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   71 00000040         ; R3 = brightness
   72 00000040         
   73 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   74 00000044         
   75 00000044 E3A018FF        LDR              R1, = redMask ; mask = redMask
   76 00000048 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   77 0000004C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   78 00000050 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   79 00000054         
   80 00000054 E3A01CFF        LDR              R1, = greenMask
   81 00000058 EB000012        BL               getValueFromMask
   82 0000005C EB000006        BL               adjustColor
   83 00000060 EB000018        BL               setValueFromMask
   84 00000064         



ARM Macro Assembler    Page 3 


   85 00000064 E3A010FF        LDR              R1, = blueMask
   86 00000068 EB00000E        BL               getValueFromMask
   87 0000006C EB000002        BL               adjustColor
   88 00000070 EB000014        BL               setValueFromMask
   89 00000074         
   90 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   91 00000078 E12FFF1E        BX               LR
   92 0000007C         
   93 0000007C         adjustColor
   94 0000007C         ; val = adjustColor(color, contrast, brightness)
   95 0000007C         ; applies the brightness contrast formula
   96 0000007C         ; Paramters:
   97 0000007C         ; R2 = color
   98 0000007C         ; Stack > contrast, brightness that order.
   99 0000007C         ; Return Values
  100 0000007C         ; R2 = color
  101 0000007C         ; Stack > contrast, brightness that order.
  102 0000007C E92D0030        STMFD            SP!, {R4, R5}
  103 00000080 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  104 00000084 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  105 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  106 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
  107 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  108 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  109 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  110 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  111 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  112 000000A4 E12FFF1E        BX               LR
  113 000000A8         
  114 000000A8         getValueFromMask
  115 000000A8         ; Gets the color value under a congruent mask
  116 000000A8         ; Expects masks of type FF
  117 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  118 000000A8         ; Parameters
  119 000000A8         ; R0 = RGB
  120 000000A8         ; R1 = mask
  121 000000A8         ; Return Values
  122 000000A8         ; R1 = mask
  123 000000A8         ; R0 = colorValue
  124 000000A8 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  125 000000AC E52D1004        PUSH             {R1}
  126 000000B0         getMaskWhile
  127 000000B0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  128 000000B4 2A000001        BCS              endGetMaskWhile ; {
  129 000000B8 E1A00220        LSR              R0, R0, #4  ; value >> 4
  130 000000BC EAFFFFFB        B                getMaskWhile ; }
  131 000000C0         endGetMaskWhile
  132 000000C0 E49D1004        POP              {R1}
  133 000000C4 E12FFF1E        BX               LR



ARM Macro Assembler    Page 4 


  134 000000C8         
  135 000000C8         setValueFromMask
  136 000000C8         ; Sets the color value under a congruent mask
  137 000000C8         ; Expects masks of type FF
  138 000000C8         ; Takes in a value and a location in form FF
  139 000000C8         ; Parameters
  140 000000C8         ; R0 = RGB
  141 000000C8         ; R1 = mask
  142 000000C8         ; R2 = colorValue
  143 000000C8         ; Return Values
  144 000000C8         ; R0 = RGB
  145 000000C8 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  146 000000CC         setMaskWhile
  147 000000CC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  148 000000D0 2A000001        BCS              endSetMaskWhile ; {
  149 000000D4 E1A02202        LSL              R2, R2, #4  ; value >> 4
  150 000000D8 EAFFFFFB        B                setMaskWhile ; }
  151 000000DC         endSetMaskWhile                      ;
  152 000000DC E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  153 000000E0 E12FFF1E        BX               LR
  154 000000E4         
  155 000000E4         averageN
  156 000000E4         ; Takes in five RGB values and computes their blur value
                       .
  157 000000E4         ; Parameters:
  158 000000E4         ; Stack > RGB value count    | 0 < count
  159 000000E4         ; Stack > count RGB values
  160 000000E4         ; Returns:
  161 000000E4         ; R0 = average
  162 000000E4         
  163 000000E4 E89D0001        LDMFD            SP, {R0}
  164 000000E8 E92D407E        STMFD            SP!, {R1 - R6, LR}
  165 000000EC E3A04007        LDR              R4, =7
  166 000000F0 E1A03000        MOV              R3, R0
  167 000000F4 E0845003        ADD              R5, R4, R3
  168 000000F8 E3A06000        LDR              R6, =0
  169 000000FC E3A02000        LDR              R2, =0
  170 00000100 E3A018FF        LDR              R1, =redMask
  171 00000104 EB000006        BL               averageColor
  172 00000108 E3A01CFF        LDR              R1, =greenMask
  173 0000010C EB000004        BL               averageColor
  174 00000110 E3A010FF        LDR              R1, =blueMask
  175 00000114 EB000002        BL               averageColor
  176 00000118 E1A00006        MOV              R0, R6
  177 0000011C E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  178 00000120 E12FFF1E        BX               LR
  179 00000124         
  180 00000124         averageColor
  181 00000124         forN
  182 00000124 E1550004        CMP              R5, R4
  183 00000128 0A000006        BEQ              endForN
  184 0000012C E79D0105        LDR              R0, [SP, R5, LSL #2]
  185 00000130 E52DE004        PUSH             {LR}
  186 00000134 EBFFFFDB        BL               getValueFromMask
  187 00000138 E49DE004        POP              {LR}
  188 0000013C E0822000        ADD              R2, R2, R0



ARM Macro Assembler    Page 5 


  189 00000140 E2555001        SUBS             R5, R5, #1
  190 00000144 EAFFFFF6        B                forN
  191 00000148         endForN
  192 00000148 E52D1004        PUSH             {R1}
  193 0000014C E1A00002        MOV              R0, R2
  194 00000150 E1A01003        MOV              R1, R3
  195 00000154 E52DE004        PUSH             {LR}
  196 00000158 EB00002B        BL               divide
  197 0000015C E49DE004        POP              {LR}
  198 00000160 E3510000        CMP              R1, #0
  199 00000164 43A01000        LDRMI            R1, =0
  200 00000168 E35100FF        CMP              R1, #255
  201 0000016C C3A010FF        LDRGT            R1, =255
  202 00000170 E1A00006        MOV              R0, R6
  203 00000174 E1A02001        MOV              R2, R1
  204 00000178 E49D1004        POP              {R1}
  205 0000017C E52DE004        PUSH             {LR}
  206 00000180 EBFFFFD0        BL               setValueFromMask
  207 00000184 E49DE004        POP              {LR}
  208 00000188 E1A06000        MOV              R6, R0
  209 0000018C E3A02000        LDR              R2, =0
  210 00000190 E0845003        ADD              R5, R4, R3
  211 00000194 E12FFF1E        BX               LR
  212 00000198         
  213 00000198         greyScale
  214 00000198         ; Converts a pixel to a light intensity value.
  215 00000198         ; Paramteters
  216 00000198         ;    R0 = RGB
  217 00000198         ; Return
  218 00000198         ;    R0 = Light intesity
  219 00000198 E92D401E        PUSH             {R1, R2, R3, R4, LR}
  220 0000019C E1A02000        MOV              R2, R0
  221 000001A0 E3A03000        LDR              R3, =0
  222 000001A4         
  223 000001A4 E3A018FF        LDR              R1, =redMask
  224 000001A8 EBFFFFBE        BL               getValueFromMask
  225 000001AC E59FC168        LDR              R12, =299
  226 000001B0 E1A01000        MOV              R1, R0
  227 000001B4 E0000C91        MUL              R0, R1, R12
  228 000001B8 E0833000        ADD              R3, R3, R0
  229 000001BC         
  230 000001BC E1A00002        MOV              R0, R2
  231 000001C0 E3A01CFF        LDR              R1, =greenMask
  232 000001C4 EBFFFFB7        BL               getValueFromMask
  233 000001C8 E59FC150        LDR              R12, =587
  234 000001CC E1A01000        MOV              R1, R0
  235 000001D0 E0000C91        MUL              R0, R1, R12
  236 000001D4 E0833000        ADD              R3, R3, R0
  237 000001D8         
  238 000001D8 E1A00002        MOV              R0, R2
  239 000001DC E3A010FF        LDR              R1, =blueMask
  240 000001E0 EBFFFFB0        BL               getValueFromMask
  241 000001E4 E3A0C072        LDR              R12, =114
  242 000001E8 E1A01000        MOV              R1, R0
  243 000001EC E0000C91        MUL              R0, R1, R12
  244 000001F0 E0833000        ADD              R3, R3, R0
  245 000001F4         
  246 000001F4 E1A00003        MOV              R0, R3
  247 000001F8 E3A01FFA        LDR              R1, =1000



ARM Macro Assembler    Page 6 


  248 000001FC EB000002        BL               divide
  249 00000200         
  250 00000200 E1A00001        MOV              R0, R1
  251 00000204 E8BD401E        POP              {R1, R2, R3, R4, LR}
  252 00000208 E12FFF1E        BX               LR
  253 0000020C         
  254 0000020C         
  255 0000020C         ; taken from my group work in the labs
  256 0000020C         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  257 0000020C E92D400C        STMFD            SP!, {R2, R3, LR}
  258 00000210         
  259 00000210 E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  260 00000214 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  261 00000218         
  262 00000218 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  263 0000021C 059F0100        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  264 00000220 059F10FC        LDREQ            R1, =-1     ;load -1 into quoti
                                                            ent
  265 00000224 0A00003B        BEQ              stop        ;stop
  266 00000228         
  267 00000228         alignLoop                            ;else
  268 00000228 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  269 0000022C BA000002        BLT              endAlignLoop ;{
  270 00000230 E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  271 00000234 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  272 00000238 EAFFFFFA        B                alignLoop   ;}
  273 0000023C         endAlignLoop
  274 0000023C         
  275 0000023C         THEREVENGEOFTHEALIGNLOOP             ;{
  276 0000023C E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  277 00000240 E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  278 00000244 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n
                                                            ot set{ 
  279 00000248 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  280 0000024C 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  281 00000250 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  282 00000254 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 
  283 00000258         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  284 00000258 E1A01002        MOV              R1, R2
  285 0000025C E8BD400C        LDMFD            SP!, {R2, R3, LR}
  286 00000260 E12FFF1E        BX               LR
  287 00000264         



ARM Macro Assembler    Page 7 


  288 00000264         
  289 00000264         start
  290 00000264 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  291 00000268 E1A04000        MOV              R4, R0      ; copy destination
  292 0000026C EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  293 00000270 E1A06000        MOV              R6, R0
  294 00000274         
  295 00000274         copyImage
  296 00000274 E2466001        SUB              R6, R6, #1
  297 00000278         moveLoopI
  298 00000278 EBFFFFFE        BL               getPicWidth
  299 0000027C E1B07000        MOVS             R7, R0
  300 00000280 E2477001        SUB              R7, R7, #1
  301 00000284         
  302 00000284         moveLoopJ
  303 00000284 E1A00006        MOV              R0, R6
  304 00000288 E1A01007        MOV              R1, R7
  305 0000028C         
  306 0000028C E1A02004        MOV              R2, R4
  307 00000290 EBFFFF5A        BL               getPixel
  308 00000294 E1A03000        MOV              R3, R0
  309 00000298         
  310 00000298 E1A00006        MOV              R0, R6
  311 0000029C E59F2084        LDR              R2, =copyAddress
  312 000002A0 EBFFFF61        BL               putPixel
  313 000002A4         
  314 000002A4 E2577001        SUBS             R7, R7, #1
  315 000002A8 AAFFFFF5        BGE              moveLoopJ
  316 000002AC         endMoveLoopJ
  317 000002AC         
  318 000002AC E2566001        SUBS             R6, R6, #1
  319 000002B0 AAFFFFF0        BGE              moveLoopI
  320 000002B4         endMoveLoopI
  321 000002B4         
  322 000002B4         
  323 000002B4         ;; /////////////////////////////////////////////////////
                       /////////////////////
  324 000002B4 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  325 000002B8 E1A06000        MOV              R6, R0
  326 000002BC         
  327 000002BC E2466001        SUB              R6, R6, #1
  328 000002C0         move2LoopI
  329 000002C0 EBFFFFFE        BL               getPicWidth
  330 000002C4 E1B07000        MOVS             R7, R0
  331 000002C8 E2477001        SUB              R7, R7, #1
  332 000002CC         
  333 000002CC         move2LoopJ
  334 000002CC E1A00006        MOV              R0, R6      ;
  335 000002D0 E1A01007        MOV              R1, R7      ;
  336 000002D4 E59F204C        LDR              R2, =copyAddress ;
  337 000002D8 EBFFFF48        BL               getPixel    ;
  338 000002DC         
  339 000002DC EBFFFFAD        BL               greyScale



ARM Macro Assembler    Page 8 


  340 000002E0 E1A01400        LSL              R1, R0, #8
  341 000002E4 E0811000        ADD              R1, R1, R0
  342 000002E8 E1A01401        LSL              R1, R1, #8
  343 000002EC E0800001        ADD              R0, R0, R1
  344 000002F0         
  345 000002F0 E1A03000        MOV              R3, R0
  346 000002F4 E1A00006        MOV              R0, R6      ;
  347 000002F8 E1A01007        MOV              R1, R7      ;
  348 000002FC E1A02004        MOV              R2, R4
  349 00000300 EBFFFF49        BL               putPixel
  350 00000304         
  351 00000304         finaly
  352 00000304 E2577001        SUBS             R7, R7, #1  ; column --
  353 00000308 AAFFFFEF        BGE              move2LoopJ
  354 0000030C         endMove2LoopJ
  355 0000030C         
  356 0000030C E2566001        SUBS             R6, R6, #1
  357 00000310 AAFFFFEA        BGE              move2LoopI
  358 00000314         endMove2LoopI
  359 00000314         
  360 00000314         
  361 00000314         
  362 00000314 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  363 00000318         
  364 00000318 EAFFFFFE 
                       stop    B                stop
  365 0000031C         
  366 0000031C         
  367 0000031C 0000012B 
              0000024B 
              FFFFFFFF 
              A1016300         AREA             Variables, DATA, READWRITE
  368 00000000         
  369 00000000 00000002 
                       radius  DCD              2
  370 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
THEENDOFTHEREVENGEOFTHEALIGNLOOP 00000258

Symbol: THEENDOFTHEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 283 in file BonusEffect.s
   Uses
      At line 278 in file BonusEffect.s
Comment: THEENDOFTHEREVENGEOFTHEALIGNLOOP used once
THEREVENGEOFTHEALIGNLOOP 0000023C

Symbol: THEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 275 in file BonusEffect.s
   Uses
      At line 282 in file BonusEffect.s
Comment: THEREVENGEOFTHEALIGNLOOP used once
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 93 in file BonusEffect.s
   Uses
      At line 77 in file BonusEffect.s
      At line 82 in file BonusEffect.s
      At line 87 in file BonusEffect.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 65 in file BonusEffect.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 00000228

Symbol: alignLoop
   Definitions
      At line 267 in file BonusEffect.s
   Uses
      At line 272 in file BonusEffect.s
Comment: alignLoop used once
averageColor 00000124

Symbol: averageColor
   Definitions
      At line 180 in file BonusEffect.s
   Uses
      At line 171 in file BonusEffect.s
      At line 173 in file BonusEffect.s
      At line 175 in file BonusEffect.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


averageN 000000E4

Symbol: averageN
   Definitions
      At line 155 in file BonusEffect.s
   Uses
      None
Comment: averageN unused
copyImage 00000274

Symbol: copyImage
   Definitions
      At line 295 in file BonusEffect.s
   Uses
      None
Comment: copyImage unused
divide 0000020C

Symbol: divide
   Definitions
      At line 256 in file BonusEffect.s
   Uses
      At line 196 in file BonusEffect.s
      At line 248 in file BonusEffect.s

endAlignLoop 0000023C

Symbol: endAlignLoop
   Definitions
      At line 273 in file BonusEffect.s
   Uses
      At line 269 in file BonusEffect.s
Comment: endAlignLoop used once
endForN 00000148

Symbol: endForN
   Definitions
      At line 191 in file BonusEffect.s
   Uses
      At line 183 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 000000C0

Symbol: endGetMaskWhile
   Definitions
      At line 131 in file BonusEffect.s
   Uses
      At line 128 in file BonusEffect.s
Comment: endGetMaskWhile used once
endMove2LoopI 00000314

Symbol: endMove2LoopI
   Definitions
      At line 358 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopI unused
endMove2LoopJ 0000030C



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: endMove2LoopJ
   Definitions
      At line 354 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopJ unused
endMoveLoopI 000002B4

Symbol: endMoveLoopI
   Definitions
      At line 320 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopI unused
endMoveLoopJ 000002AC

Symbol: endMoveLoopJ
   Definitions
      At line 316 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopJ unused
endSetMaskWhile 000000DC

Symbol: endSetMaskWhile
   Definitions
      At line 151 in file BonusEffect.s
   Uses
      At line 148 in file BonusEffect.s
Comment: endSetMaskWhile used once
finaly 00000304

Symbol: finaly
   Definitions
      At line 351 in file BonusEffect.s
   Uses
      None
Comment: finaly unused
forN 00000124

Symbol: forN
   Definitions
      At line 181 in file BonusEffect.s
   Uses
      At line 190 in file BonusEffect.s
Comment: forN used once
getMaskWhile 000000B0

Symbol: getMaskWhile
   Definitions
      At line 126 in file BonusEffect.s
   Uses
      At line 130 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 17 in file BonusEffect.s
   Uses
      At line 307 in file BonusEffect.s
      At line 337 in file BonusEffect.s

getValueFromMask 000000A8

Symbol: getValueFromMask
   Definitions
      At line 114 in file BonusEffect.s
   Uses
      At line 76 in file BonusEffect.s
      At line 81 in file BonusEffect.s
      At line 86 in file BonusEffect.s
      At line 186 in file BonusEffect.s
      At line 224 in file BonusEffect.s
      At line 232 in file BonusEffect.s
      At line 240 in file BonusEffect.s

greyScale 00000198

Symbol: greyScale
   Definitions
      At line 213 in file BonusEffect.s
   Uses
      At line 339 in file BonusEffect.s
Comment: greyScale used once
move2LoopI 000002C0

Symbol: move2LoopI
   Definitions
      At line 328 in file BonusEffect.s
   Uses
      At line 357 in file BonusEffect.s
Comment: move2LoopI used once
move2LoopJ 000002CC

Symbol: move2LoopJ
   Definitions
      At line 333 in file BonusEffect.s
   Uses
      At line 353 in file BonusEffect.s
Comment: move2LoopJ used once
moveLoopI 00000278

Symbol: moveLoopI
   Definitions
      At line 297 in file BonusEffect.s
   Uses
      At line 319 in file BonusEffect.s
Comment: moveLoopI used once
moveLoopJ 00000284

Symbol: moveLoopJ
   Definitions
      At line 302 in file BonusEffect.s
   Uses
      At line 315 in file BonusEffect.s
Comment: moveLoopJ used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

putPixel 0000002C

Symbol: putPixel
   Definitions
      At line 48 in file BonusEffect.s
   Uses
      At line 312 in file BonusEffect.s
      At line 349 in file BonusEffect.s

rowColToIndex 00000014

Symbol: rowColToIndex
   Definitions
      At line 33 in file BonusEffect.s
   Uses
      At line 27 in file BonusEffect.s
      At line 59 in file BonusEffect.s

setMaskWhile 000000CC

Symbol: setMaskWhile
   Definitions
      At line 146 in file BonusEffect.s
   Uses
      At line 150 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 000000C8

Symbol: setValueFromMask
   Definitions
      At line 135 in file BonusEffect.s
   Uses
      At line 78 in file BonusEffect.s
      At line 83 in file BonusEffect.s
      At line 88 in file BonusEffect.s
      At line 206 in file BonusEffect.s

start 00000264

Symbol: start
   Definitions
      At line 289 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 00000318

Symbol: stop
   Definitions
      At line 364 in file BonusEffect.s
   Uses
      At line 265 in file BonusEffect.s
      At line 364 in file BonusEffect.s

34 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 367 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
radius 00000000

Symbol: radius
   Definitions
      At line 369 in file BonusEffect.s
   Uses
      None
Comment: radius unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 85 in file BonusEffect.s
      At line 174 in file BonusEffect.s
      At line 239 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 311 in file BonusEffect.s
      At line 336 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 80 in file BonusEffect.s
      At line 172 in file BonusEffect.s
      At line 231 in file BonusEffect.s

redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 75 in file BonusEffect.s
      At line 170 in file BonusEffect.s
      At line 223 in file BonusEffect.s

xhalf 00000028

Symbol: xhalf
   Definitions
      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 290 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 292 in file BonusEffect.s
      At line 324 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 43 in file BonusEffect.s
      At line 298 in file BonusEffect.s
      At line 329 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 362 in file BonusEffect.s
Comment: putPic used once
5 symbols
386 symbols in table
