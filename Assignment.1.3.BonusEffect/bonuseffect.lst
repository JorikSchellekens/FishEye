


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000 00000001 
                       lensn   EQU              1
   17 00000000 0000000A 
                       lensq   EQU              10
   18 00000000         
   19 00000000         
   20 00000000         
   21 00000000         ;<--------------Pixel Manipulation-------------->
   22 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   23 00000000         ; Parameters:
   24 00000000         ; R0 = row
   25 00000000         ; R1 = column
   26 00000000         ; R2 = image address
   27 00000000         ; Stack must be cleared by caller
   28 00000000         ; Returns:
   29 00000000         ; R0 = RGBvalue
   30 00000000 E92D4000        STMFD            SP!, {LR}
   31 00000004         
   32 00000004 EB000007        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   33 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   34 0000000C         
   35 0000000C E8BD4000        LDMFD            SP!, {LR}
   36 00000010 E12FFF1E        BX               LR
   37 00000014         
   38 00000014         putPixel
   39 00000014         ; Stores a given RGB to a pixel at row, col
   40 00000014         ; Parameters
   41 00000014         ; R0 = row



ARM Macro Assembler    Page 2 


   42 00000014         ; R1 = col
   43 00000014         ; R2 = picture address
   44 00000014         ; R3 = RGB
   45 00000014         ; Stack must be cleared by caller
   46 00000014         
   47 00000014 E92D4000        STMFD            SP!, {LR}
   48 00000018         
   49 00000018 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   50 0000001C E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   51 00000020         
   52 00000020 E8BD4000        LDMFD            SP!, {LR}
   53 00000024 E12FFF1E        BX               LR
   54 00000028         
   55 00000028         rowColToIndex
   56 00000028         ; converts row and colum to index
   57 00000028         ; Parameters
   58 00000028         ; R0 = row
   59 00000028         ; R1 = col
   60 00000028         ; Stack must be cleared by caller
   61 00000028         ; Return Values
   62 00000028         ; R0 addressIndex
   63 00000028 E92D4004        PUSH             {R2, LR}
   64 0000002C E1A02000        MOV              R2, R0
   65 00000030 EBFFFFFE        BL               getPicWidth
   66 00000034 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   67 00000038 E8BD4004        POP              {R2, LR}
   68 0000003C E12FFF1E        BX               LR
   69 00000040         
   70 00000040         getValueFromMask
   71 00000040         ; Gets the color value under a congruent mask
   72 00000040         ; Expects masks of type FF
   73 00000040         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
   74 00000040         ; Parameters
   75 00000040         ; R0 = RGB
   76 00000040         ; R1 = mask
   77 00000040         ; Return Values
   78 00000040         ; R1 = mask
   79 00000040         ; R0 = colorValue
   80 00000040 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
   81 00000044 E52D1004        PUSH             {R1}
   82 00000048         getMaskWhile
   83 00000048 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
   84 0000004C 2A000001        BCS              endGetMaskWhile ; {
   85 00000050 E1A00220        LSR              R0, R0, #4  ; value >> 4
   86 00000054 EAFFFFFB        B                getMaskWhile ; }
   87 00000058         endGetMaskWhile
   88 00000058 E49D1004        POP              {R1}
   89 0000005C E12FFF1E        BX               LR
   90 00000060         



ARM Macro Assembler    Page 3 


   91 00000060         setValueFromMask
   92 00000060         ; Sets the color value under a congruent mask
   93 00000060         ; Expects masks of type FF
   94 00000060         ; Takes in a value and a location in form FF
   95 00000060         ; Parameters
   96 00000060         ; R0 = RGB
   97 00000060         ; R1 = mask
   98 00000060         ; R2 = colorValue
   99 00000060         ; Return Values
  100 00000060         ; R0 = RGB
  101 00000060 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  102 00000064         setMaskWhile
  103 00000064 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  104 00000068 2A000001        BCS              endSetMaskWhile ; {
  105 0000006C E1A02202        LSL              R2, R2, #4  ; value >> 4
  106 00000070 EAFFFFFB        B                setMaskWhile ; }
  107 00000074         endSetMaskWhile                      ;
  108 00000074 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  109 00000078 E12FFF1E        BX               LR
  110 0000007C         
  111 0000007C         copy
  112 0000007C         ; Copies between the original and duplicate image locati
                       ons
  113 0000007C         ; Parameters:
  114 0000007C         ;     R0 = row
  115 0000007C         ;    R1 = col
  116 0000007C E92D40CF        PUSH             {R0, R1, R2, R3, R6, R7, LR}
  117 00000080 E1A06000        MOV              R6, R0
  118 00000084 E1A07001        MOV              R7, R1
  119 00000088         
  120 00000088 EBFFFFFE        BL               getPicAddr
  121 0000008C E1A02000        MOV              R2, R0
  122 00000090 E1A00006        MOV              R0, R6
  123 00000094 E1A01007        MOV              R1, R7
  124 00000098 EBFFFFD8        BL               getPixel
  125 0000009C         
  126 0000009C E1A03000        MOV              R3, R0
  127 000000A0 E1A00006        MOV              R0, R6
  128 000000A4 E59F2408        LDR              R2, =copyAddress
  129 000000A8 EBFFFFD9        BL               putPixel
  130 000000AC         
  131 000000AC E8BD40CF        POP              {R0, R1, R2, R3, R6, R7, LR}
  132 000000B0 E12FFF1E        BX               LR
  133 000000B4         
  134 000000B4         lensEffectCopy
  135 000000B4 E92D40DF        PUSH             {R0, R1, R2, R3, R4, R6, R7, LR
}
  136 000000B8 E1A06000        MOV              R6, R0      ;
  137 000000BC E1A07001        MOV              R7, R1      ;
  138 000000C0         
  139 000000C0 EBFFFFFE        BL               getPicAddr
  140 000000C4 E1A04000        MOV              R4, R0
  141 000000C8         
  142 000000C8 E1A00006        MOV              R0, R6      ;
  143 000000CC         
  144 000000CC EB00008F        BL               applyLens



ARM Macro Assembler    Page 4 


  145 000000D0 E59F23DC        LDR              R2, =copyAddress ;
  146 000000D4 EBFFFFC9        BL               getPixel    ;
  147 000000D8         
  148 000000D8 E1A03000        MOV              R3, R0
  149 000000DC E1A00006        MOV              R0, R6      ;
  150 000000E0 E1A01007        MOV              R1, R7      ;
  151 000000E4 E1A02004        MOV              R2, R4
  152 000000E8 EBFFFFC9        BL               putPixel
  153 000000EC         
  154 000000EC E8BD40DF        POP              {R0, R1, R2, R3, R4, R6, R7, LR
}
  155 000000F0 E12FFF1E        BX               LR
  156 000000F4         
  157 000000F4         applyGreyScale
  158 000000F4         ; Wrapper to apply greyscale to original
  159 000000F4         ; Parameters:
  160 000000F4         ;    R0 = row
  161 000000F4         ;    R1 = col
  162 000000F4 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  163 000000F8 E1A04000        MOV              R4, R0
  164 000000FC EBFFFFFE        BL               getPicAddr
  165 00000100 E1A02000        MOV              R2, R0
  166 00000104 E1A00003        MOV              R0, R3
  167 00000108 EBFFFFBC        BL               getPixel
  168 0000010C EB00005E        BL               greyScale
  169 00000110 E1A03000        MOV              R3, R0
  170 00000114 E1A00004        MOV              R0, R4
  171 00000118 EBFFFFBD        BL               putPixel
  172 0000011C E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  173 00000120 E12FFF1E        BX               LR
  174 00000124         
  175 00000124         applyToAll
  176 00000124         ; Loops through all (row, col) combinations and executes
                        the given subroutine.
  177 00000124         ; Paramenters:
  178 00000124         ;  R0 = routine address
  179 00000124 E92D400F        PUSH             {R0, R1, R2, R3, LR}
  180 00000128 E1A02000        MOV              R2, R0
  181 0000012C EBFFFFFE        BL               getPicWidth
  182 00000130 E1A01000        MOV              R1, R0
  183 00000134 EBFFFFFE        BL               getPicHeight
  184 00000138         
  185 00000138 E2400001        SUB              R0, R0, #1
  186 0000013C         row_whl
  187 0000013C E1A03000        MOV              R3, R0
  188 00000140 EBFFFFFE        BL               getPicWidth
  189 00000144 E1A01000        MOV              R1, R0
  190 00000148 E1A00003        MOV              R0, R3
  191 0000014C E2411001        SUB              R1, R1, #1
  192 00000150         col_whl
  193 00000150 E1A0E00F        MOV              LR, PC
  194 00000154 E12FFF12        BX               R2
  195 00000158 E2511001        SUBS             R1, R1, #1
  196 0000015C AAFFFFFB        BGE              col_whl
  197 00000160         end_col_whl
  198 00000160 E2500001        SUBS             R0, R0, #1
  199 00000164 AAFFFFF4        BGE              row_whl
  200 00000168         end_row_whl
  201 00000168 E8BD400F        POP              {R0, R1, R2, R3, LR}



ARM Macro Assembler    Page 5 


  202 0000016C E12FFF1E        BX               LR
  203 00000170         
  204 00000170         ;<--------------Effects-------------->
  205 00000170         
  206 00000170         adjustPixel
  207 00000170         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
  208 00000170         ; Applies a given contrast and brightness value
  209 00000170         ; Parameters:
  210 00000170         ; R0 = RGB
  211 00000170         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
  212 00000170         ; R3 = brightness
  213 00000170         
  214 00000170 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
  215 00000174         
  216 00000174 E3A018FF        LDR              R1, = redMask ; mask = redMask
  217 00000178 EBFFFFB0        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
  218 0000017C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
  219 00000180 EBFFFFB6        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
  220 00000184         
  221 00000184 E3A01CFF        LDR              R1, = greenMask
  222 00000188 EBFFFFAC        BL               getValueFromMask
  223 0000018C EB000006        BL               adjustColor
  224 00000190 EBFFFFB2        BL               setValueFromMask
  225 00000194         
  226 00000194 E3A010FF        LDR              R1, = blueMask
  227 00000198 EBFFFFA8        BL               getValueFromMask
  228 0000019C EB000002        BL               adjustColor
  229 000001A0 EBFFFFAE        BL               setValueFromMask
  230 000001A4         
  231 000001A4 E8BD400C        LDMFD            SP!, {R2, R3, LR}
  232 000001A8 E12FFF1E        BX               LR
  233 000001AC         
  234 000001AC         adjustColor
  235 000001AC         ; val = adjustColor(color, contrast, brightness)
  236 000001AC         ; applies the brightness contrast formula
  237 000001AC         ; Paramters:
  238 000001AC         ; R2 = color
  239 000001AC         ; Stack > contrast, brightness that order.
  240 000001AC         ; Return Values
  241 000001AC         ; R2 = color
  242 000001AC         ; Stack > contrast, brightness that order.
  243 000001AC E92D0030        STMFD            SP!, {R4, R5}
  244 000001B0 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  245 000001B4 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  246 000001B8 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            



ARM Macro Assembler    Page 6 


  247 000001BC E1A02222        LSR              R2, R2, #4  ; color /= 16
  248 000001C0 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  249 000001C4 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  250 000001C8 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  251 000001CC C3A020FF        LDRGT            R2, =255    ; color = 255
  252 000001D0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  253 000001D4 E12FFF1E        BX               LR
  254 000001D8         
  255 000001D8         averageN
  256 000001D8         ; Takes in five RGB values and computes their blur value
                       .
  257 000001D8         ; Parameters:
  258 000001D8         ; Stack > RGB value count    | 0 < count
  259 000001D8         ; Stack > count RGB values
  260 000001D8         ; Returns:
  261 000001D8         ; R0 = average
  262 000001D8         
  263 000001D8 E89D0001        LDMFD            SP, {R0}
  264 000001DC E92D407E        STMFD            SP!, {R1 - R6, LR}
  265 000001E0 E3A04007        LDR              R4, =7
  266 000001E4 E1A03000        MOV              R3, R0
  267 000001E8 E0845003        ADD              R5, R4, R3
  268 000001EC E3A06000        LDR              R6, =0
  269 000001F0 E3A02000        LDR              R2, =0
  270 000001F4 E3A018FF        LDR              R1, =redMask
  271 000001F8 EB000006        BL               averageColor
  272 000001FC E3A01CFF        LDR              R1, =greenMask
  273 00000200 EB000004        BL               averageColor
  274 00000204 E3A010FF        LDR              R1, =blueMask
  275 00000208 EB000002        BL               averageColor
  276 0000020C E1A00006        MOV              R0, R6
  277 00000210 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  278 00000214 E12FFF1E        BX               LR
  279 00000218         averageColor
  280 00000218         forN
  281 00000218 E1550004        CMP              R5, R4
  282 0000021C 0A000006        BEQ              endForN
  283 00000220 E79D0105        LDR              R0, [SP, R5, LSL #2]
  284 00000224 E52DE004        PUSH             {LR}
  285 00000228 EBFFFF84        BL               getValueFromMask
  286 0000022C E49DE004        POP              {LR}
  287 00000230 E0822000        ADD              R2, R2, R0
  288 00000234 E2555001        SUBS             R5, R5, #1
  289 00000238 EAFFFFF6        B                forN
  290 0000023C         endForN
  291 0000023C E52D1004        PUSH             {R1}
  292 00000240 E1A00002        MOV              R0, R2
  293 00000244 E1A01003        MOV              R1, R3
  294 00000248 E52DE004        PUSH             {LR}
  295 0000024C EB000072        BL               divide
  296 00000250 E49DE004        POP              {LR}
  297 00000254 E3510000        CMP              R1, #0
  298 00000258 43A01000        LDRMI            R1, =0
  299 0000025C E35100FF        CMP              R1, #255
  300 00000260 C3A010FF        LDRGT            R1, =255



ARM Macro Assembler    Page 7 


  301 00000264 E1A00006        MOV              R0, R6
  302 00000268 E1A02001        MOV              R2, R1
  303 0000026C E49D1004        POP              {R1}
  304 00000270 E52DE004        PUSH             {LR}
  305 00000274 EBFFFF79        BL               setValueFromMask
  306 00000278 E49DE004        POP              {LR}
  307 0000027C E1A06000        MOV              R6, R0
  308 00000280 E3A02000        LDR              R2, =0
  309 00000284 E0845003        ADD              R5, R4, R3
  310 00000288 E12FFF1E        BX               LR
  311 0000028C         
  312 0000028C         greyScale
  313 0000028C         ; Converts a pixel to a light intensity value.
  314 0000028C         ; Paramteters
  315 0000028C         ;    R0 = RGB
  316 0000028C         ; Return
  317 0000028C         ;    R0 = Light intesity
  318 0000028C E92D401E        PUSH             {R1, R2, R3, R4, LR}
  319 00000290 E1A02000        MOV              R2, R0
  320 00000294 E3A03000        LDR              R3, =0
  321 00000298         
  322 00000298 E3A018FF        LDR              R1, =redMask
  323 0000029C EBFFFF67        BL               getValueFromMask
  324 000002A0 E59FC210        LDR              R12, =299
  325 000002A4 E1A01000        MOV              R1, R0
  326 000002A8 E0000C91        MUL              R0, R1, R12
  327 000002AC E0833000        ADD              R3, R3, R0
  328 000002B0         
  329 000002B0 E1A00002        MOV              R0, R2
  330 000002B4 E3A01CFF        LDR              R1, =greenMask
  331 000002B8 EBFFFF60        BL               getValueFromMask
  332 000002BC E59FC1F8        LDR              R12, =587
  333 000002C0 E1A01000        MOV              R1, R0
  334 000002C4 E0000C91        MUL              R0, R1, R12
  335 000002C8 E0833000        ADD              R3, R3, R0
  336 000002CC         
  337 000002CC E1A00002        MOV              R0, R2
  338 000002D0 E3A010FF        LDR              R1, =blueMask
  339 000002D4 EBFFFF59        BL               getValueFromMask
  340 000002D8 E3A0C072        LDR              R12, =114
  341 000002DC E1A01000        MOV              R1, R0
  342 000002E0 E0000C91        MUL              R0, R1, R12
  343 000002E4 E0833000        ADD              R3, R3, R0
  344 000002E8         
  345 000002E8 E1A00003        MOV              R0, R3
  346 000002EC E3A01FFA        LDR              R1, =1000
  347 000002F0 EB000049        BL               divide
  348 000002F4         
  349 000002F4 E1A00001        MOV              R0, R1
  350 000002F8 E1A01400        LSL              R1, R0, #8
  351 000002FC E0811000        ADD              R1, R1, R0
  352 00000300 E1A01401        LSL              R1, R1, #8
  353 00000304 E0800001        ADD              R0, R0, R1
  354 00000308         
  355 00000308 E8BD401E        POP              {R1, R2, R3, R4, LR}
  356 0000030C E12FFF1E        BX               LR
  357 00000310         
  358 00000310         applyLens
  359 00000310         ; R0 = y



ARM Macro Assembler    Page 8 


  360 00000310         ; R1 = X
  361 00000310         
  362 00000310         normalize_origin
  363 00000310 E92D4E1F        PUSH             {r0, r1, R2, R3, R4, R9, R10, R
11, LR}
  364 00000314         
  365 00000314 E3A0400A        LDR              R4, =lensq
  366 00000318 EBFFFFFE        BL               getPicHeight
  367 0000031C E1A000A0        LSR              R0, R0, #1
  368 00000320 E1A02000        MOV              R2, R0
  369 00000324         
  370 00000324 EBFFFFFE        BL               getPicWidth
  371 00000328 E1A000A0        LSR              R0, R0, #1
  372 0000032C E1A03000        MOV              R3, R0
  373 00000330         
  374 00000330 E8BD0003        POP              {r0, r1}
  375 00000334         
  376 00000334 E0400002        SUB              R0, R0, R2  ; y -= centery
  377 00000338 E0411003        SUB              R1, R1, R3  ; x -= centery
  378 0000033C         
  379 0000033C E1A0A000        MOV              R10, R0     ; save y
  380 00000340 E1A0B001        MOV              R11, R1     ; save x
  381 00000344         
  382 00000344 EB00002C        BL               distanceSqr
  383 00000348 EB000017        BL               sqrt
  384 0000034C E1A09000        MOV              R9, R0
  385 00000350         
  386 00000350 E1A0000A        MOV              R0, R10
  387 00000354 E1540009        CMP              R4, R9
  388 00000358 B0000094        MULLT            R0, R4, R0
  389 0000035C A0000099        MULGE            R0, R9, R0
  390 00000360 E1A01009        MOV              R1, R9
  391 00000364 EB00002C        BL               divide
  392 00000368 E04AA001        SUB              R10, R10, R1
  393 0000036C         
  394 0000036C E1A0000B        MOV              R0, R11
  395 00000370 E1540009        CMP              R4, R9
  396 00000374 B0000094        MULLT            R0, R4, R0
  397 00000378 A0000099        MULGE            R0, R9, R0
  398 0000037C E1A01009        MOV              R1, R9
  399 00000380 EB000025        BL               divide
  400 00000384 E04BB001        SUB              R11, R11, R1
  401 00000388         
  402 00000388 EBFFFFFE        BL               getPicHeight
  403 0000038C E1A000A0        LSR              R0, R0, #1
  404 00000390 E08AA000        ADD              R10, R10, R0
  405 00000394         
  406 00000394 EBFFFFFE        BL               getPicWidth
  407 00000398 E1A000A0        LSR              R0, R0, #1
  408 0000039C E08B1000        ADD              R1, R11, R0
  409 000003A0         
  410 000003A0 E1A0000A        MOV              R0, R10
  411 000003A4         
  412 000003A4         
  413 000003A4 E8BD4E1C        POP              {R2, R3, R4, R9, R10, R11, LR}
  414 000003A8 E12FFF1E        BX               LR
  415 000003AC         
  416 000003AC         
  417 000003AC         ;<---------------Square root methods---------------->



ARM Macro Assembler    Page 9 


  418 000003AC         
  419 000003AC         sqrt
  420 000003AC         ; Finds the square root of a number
  421 000003AC         ; Parameters:
  422 000003AC         ;  R0 = number
  423 000003AC         ; Outputs:
  424 000003AC         ;  R0 = sqare root
  425 000003AC E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  426 000003B0 012FFF1E        BXEQ             LR
  427 000003B4         
  428 000003B4 E92D481E        PUSH             {R1, R2, R3, R4, R11, LR}
  429 000003B8 E1A0B000        MOV              R11, R0     ; save number
  430 000003BC E3A03000        LDR              R3, =0      ; temp = 0
  431 000003C0 E1A02000        MOV              R2, R0      ; x = S
  432 000003C4         
  433 000003C4         find_sqr_whl
  434 000003C4 E1A020A2        LSR              R2, R2, #1  ; x /= 2
  435 000003C8 E0524003        SUBS             R4, R2, R3
  436 000003CC 0A000007        BEQ              end_sqr_whl ; return x
  437 000003D0 E3540001        CMP              R4, #1
  438 000003D4 0A000005        BEQ              end_sqr_whl
  439 000003D8 E1A03002        MOV              R3, R2      ; else: temp = x
  440 000003DC E1A01002        MOV              R1, R2      ; 
  441 000003E0 E1A0000B        MOV              R0, R11     ;
  442 000003E4 EB00000C        BL               divide      ; 
  443 000003E8 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  444 000003EC EAFFFFF4        B                find_sqr_whl
  445 000003F0         end_sqr_whl
  446 000003F0         
  447 000003F0 E1A00002        MOV              R0, R2
  448 000003F4 E8BD481E        POP              {R1, R2, R3, R4, R11, LR}
  449 000003F8 E12FFF1E        BX               LR
  450 000003FC         
  451 000003FC         distanceSqr
  452 000003FC         ; Parameters:
  453 000003FC         ;  R0 = relativex
  454 000003FC         ;  R1 = relativey
  455 000003FC         ; Return:
  456 000003FC         ;  R0 = distance^2
  457 000003FC E92D0006        PUSH             {R1, R2}
  458 00000400 E1A02000        MOV              R2, R0
  459 00000404 E0000092        MUL              R0, R2, R0
  460 00000408 E1A02001        MOV              R2, R1
  461 0000040C E0010192        MUL              R1, R2, R1
  462 00000410 E0800001        ADD              R0, R0, R1
  463 00000414 E8BD0006        POP              {R1, R2}
  464 00000418 E12FFF1E        BX               LR
  465 0000041C         
  466 0000041C         
  467 0000041C         
  468 0000041C         ;<-------------- Division Method -------------->;
  469 0000041C         ; taken from my group work in the labs
  470 0000041C         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  471 0000041C E92D401C        STMFD            SP!, {R2, R3, R4, LR}



ARM Macro Assembler    Page 10 


  472 00000420         
  473 00000420 E3A04001        LDR              R4, =1      ;negative flag
  474 00000424 E3500000        CMP              R0, #0      ;if dividend < 0
  475 00000428 42644000        NEGMI            R4, R4      ; flag *= -1
  476 0000042C 42600000        NEGMI            R0, R0      ; dividend *= -1
  477 00000430 E3510000        CMP              R1, #0      ; if divisor < 0
  478 00000434 42644000        NEGMI            R4, R4      ; flag *= -1
  479 00000438 42611000        NEGMI            R1, R1      ; divisor *= -1
  480 0000043C         
  481 0000043C E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  482 00000440 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  483 00000444         
  484 00000444 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  485 00000448 059F0070        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  486 0000044C 01A02000        MOVEQ            R2, R0      ;load -1 into quoti
                                                            ent
  487 00000450 0A00000B        BEQ              div_zero    ;stop
  488 00000454         
  489 00000454         alignLoop                            ;else
  490 00000454 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  491 00000458 BA000002        BLT              endAlignLoop ;{
  492 0000045C E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  493 00000460 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  494 00000464 EAFFFFFA        B                alignLoop   ;}
  495 00000468         endAlignLoop
  496 00000468         
  497 00000468         division_whl                         ;{
  498 00000468 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  499 0000046C E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  500 00000470 2A000003        BCS              end_division_whl ;while carry f
                                                            lag not set{ 
  501 00000474 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  502 00000478 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  503 0000047C 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  504 00000480 EAFFFFF8        B                division_whl ; 
  505 00000484         end_division_whl                     ; }
  506 00000484         div_zero
  507 00000484 E1A01002        MOV              R1, R2
  508 00000488 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  509 0000048C E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}
  510 00000490 E12FFF1E        BX               LR
  511 00000494         
  512 00000494         ;<-----------------Main---------------->
  513 00000494         
  514 00000494         start
  515 00000494 E59F0028        LDR              R0, =copy



ARM Macro Assembler    Page 11 


  516 00000498 EBFFFF21        BL               applyToAll
  517 0000049C E59F0024        LDR              R0, =lensEffectCopy
  518 000004A0 EBFFFF1F        BL               applyToAll
  519 000004A4 E59F0020        LDR              R0, = applyGreyScale
  520 000004A8 EBFFFF1D        BL               applyToAll
  521 000004AC EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  522 000004B0         
  523 000004B0 EAFFFFFE 
                       stop    B                stop
  524 000004B4         
  525 000004B4         ;<----------------Memory--------------->
  526 000004B4         
  527 000004B4 A1016300 
              0000012B 
              0000024B 
              FFFFFFFF 
              00000000 
              00000000 
              00000000         AREA             Variables, DATA, READWRITE
  528 00000000         
  529 00000000 00000002 
                       radius  DCD              2
  530 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
adjustColor 000001AC

Symbol: adjustColor
   Definitions
      At line 234 in file BonusEffect.s
   Uses
      At line 218 in file BonusEffect.s
      At line 223 in file BonusEffect.s
      At line 228 in file BonusEffect.s

adjustPixel 00000170

Symbol: adjustPixel
   Definitions
      At line 206 in file BonusEffect.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 00000454

Symbol: alignLoop
   Definitions
      At line 489 in file BonusEffect.s
   Uses
      At line 494 in file BonusEffect.s
Comment: alignLoop used once
applyGreyScale 000000F4

Symbol: applyGreyScale
   Definitions
      At line 157 in file BonusEffect.s
   Uses
      At line 519 in file BonusEffect.s
Comment: applyGreyScale used once
applyLens 00000310

Symbol: applyLens
   Definitions
      At line 358 in file BonusEffect.s
   Uses
      At line 144 in file BonusEffect.s
Comment: applyLens used once
applyToAll 00000124

Symbol: applyToAll
   Definitions
      At line 175 in file BonusEffect.s
   Uses
      At line 516 in file BonusEffect.s
      At line 518 in file BonusEffect.s
      At line 520 in file BonusEffect.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


averageColor 00000218

Symbol: averageColor
   Definitions
      At line 279 in file BonusEffect.s
   Uses
      At line 271 in file BonusEffect.s
      At line 273 in file BonusEffect.s
      At line 275 in file BonusEffect.s

averageN 000001D8

Symbol: averageN
   Definitions
      At line 255 in file BonusEffect.s
   Uses
      None
Comment: averageN unused
col_whl 00000150

Symbol: col_whl
   Definitions
      At line 192 in file BonusEffect.s
   Uses
      At line 196 in file BonusEffect.s
Comment: col_whl used once
copy 0000007C

Symbol: copy
   Definitions
      At line 111 in file BonusEffect.s
   Uses
      At line 515 in file BonusEffect.s
Comment: copy used once
distanceSqr 000003FC

Symbol: distanceSqr
   Definitions
      At line 451 in file BonusEffect.s
   Uses
      At line 382 in file BonusEffect.s
Comment: distanceSqr used once
div_zero 00000484

Symbol: div_zero
   Definitions
      At line 506 in file BonusEffect.s
   Uses
      At line 487 in file BonusEffect.s
Comment: div_zero used once
divide 0000041C

Symbol: divide
   Definitions
      At line 470 in file BonusEffect.s
   Uses
      At line 295 in file BonusEffect.s
      At line 347 in file BonusEffect.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 391 in file BonusEffect.s
      At line 399 in file BonusEffect.s
      At line 442 in file BonusEffect.s

division_whl 00000468

Symbol: division_whl
   Definitions
      At line 497 in file BonusEffect.s
   Uses
      At line 504 in file BonusEffect.s
Comment: division_whl used once
endAlignLoop 00000468

Symbol: endAlignLoop
   Definitions
      At line 495 in file BonusEffect.s
   Uses
      At line 491 in file BonusEffect.s
Comment: endAlignLoop used once
endForN 0000023C

Symbol: endForN
   Definitions
      At line 290 in file BonusEffect.s
   Uses
      At line 282 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 00000058

Symbol: endGetMaskWhile
   Definitions
      At line 87 in file BonusEffect.s
   Uses
      At line 84 in file BonusEffect.s
Comment: endGetMaskWhile used once
endSetMaskWhile 00000074

Symbol: endSetMaskWhile
   Definitions
      At line 107 in file BonusEffect.s
   Uses
      At line 104 in file BonusEffect.s
Comment: endSetMaskWhile used once
end_col_whl 00000160

Symbol: end_col_whl
   Definitions
      At line 197 in file BonusEffect.s
   Uses
      None
Comment: end_col_whl unused
end_division_whl 00000484

Symbol: end_division_whl
   Definitions
      At line 505 in file BonusEffect.s
   Uses
      At line 500 in file BonusEffect.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: end_division_whl used once
end_row_whl 00000168

Symbol: end_row_whl
   Definitions
      At line 200 in file BonusEffect.s
   Uses
      None
Comment: end_row_whl unused
end_sqr_whl 000003F0

Symbol: end_sqr_whl
   Definitions
      At line 445 in file BonusEffect.s
   Uses
      At line 436 in file BonusEffect.s
      At line 438 in file BonusEffect.s

find_sqr_whl 000003C4

Symbol: find_sqr_whl
   Definitions
      At line 433 in file BonusEffect.s
   Uses
      At line 444 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 00000218

Symbol: forN
   Definitions
      At line 280 in file BonusEffect.s
   Uses
      At line 289 in file BonusEffect.s
Comment: forN used once
getMaskWhile 00000048

Symbol: getMaskWhile
   Definitions
      At line 82 in file BonusEffect.s
   Uses
      At line 86 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 22 in file BonusEffect.s
   Uses
      At line 124 in file BonusEffect.s
      At line 146 in file BonusEffect.s
      At line 167 in file BonusEffect.s

getValueFromMask 00000040

Symbol: getValueFromMask
   Definitions
      At line 70 in file BonusEffect.s
   Uses
      At line 217 in file BonusEffect.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 222 in file BonusEffect.s
      At line 227 in file BonusEffect.s
      At line 285 in file BonusEffect.s
      At line 323 in file BonusEffect.s
      At line 331 in file BonusEffect.s
      At line 339 in file BonusEffect.s

greyScale 0000028C

Symbol: greyScale
   Definitions
      At line 312 in file BonusEffect.s
   Uses
      At line 168 in file BonusEffect.s
Comment: greyScale used once
lensEffectCopy 000000B4

Symbol: lensEffectCopy
   Definitions
      At line 134 in file BonusEffect.s
   Uses
      At line 517 in file BonusEffect.s
Comment: lensEffectCopy used once
normalize_origin 00000310

Symbol: normalize_origin
   Definitions
      At line 362 in file BonusEffect.s
   Uses
      None
Comment: normalize_origin unused
putPixel 00000014

Symbol: putPixel
   Definitions
      At line 38 in file BonusEffect.s
   Uses
      At line 129 in file BonusEffect.s
      At line 152 in file BonusEffect.s
      At line 171 in file BonusEffect.s

rowColToIndex 00000028

Symbol: rowColToIndex
   Definitions
      At line 55 in file BonusEffect.s
   Uses
      At line 32 in file BonusEffect.s
      At line 49 in file BonusEffect.s

row_whl 0000013C

Symbol: row_whl
   Definitions
      At line 186 in file BonusEffect.s
   Uses
      At line 199 in file BonusEffect.s
Comment: row_whl used once
setMaskWhile 00000064



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: setMaskWhile
   Definitions
      At line 102 in file BonusEffect.s
   Uses
      At line 106 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 00000060

Symbol: setValueFromMask
   Definitions
      At line 91 in file BonusEffect.s
   Uses
      At line 219 in file BonusEffect.s
      At line 224 in file BonusEffect.s
      At line 229 in file BonusEffect.s
      At line 305 in file BonusEffect.s

sqrt 000003AC

Symbol: sqrt
   Definitions
      At line 419 in file BonusEffect.s
   Uses
      At line 383 in file BonusEffect.s
Comment: sqrt used once
start 00000494

Symbol: start
   Definitions
      At line 514 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 000004B0

Symbol: stop
   Definitions
      At line 523 in file BonusEffect.s
   Uses
      At line 523 in file BonusEffect.s
Comment: stop used once
39 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 527 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
radius 00000000

Symbol: radius
   Definitions
      At line 529 in file BonusEffect.s
   Uses
      None
Comment: radius unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 226 in file BonusEffect.s
      At line 274 in file BonusEffect.s
      At line 338 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 128 in file BonusEffect.s
      At line 145 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 221 in file BonusEffect.s
      At line 272 in file BonusEffect.s
      At line 330 in file BonusEffect.s

lensn 00000001

Symbol: lensn
   Definitions
      At line 16 in file BonusEffect.s
   Uses
      None
Comment: lensn unused
lensq 0000000A

Symbol: lensq
   Definitions
      At line 17 in file BonusEffect.s
   Uses
      At line 365 in file BonusEffect.s
Comment: lensq used once
redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 216 in file BonusEffect.s
      At line 270 in file BonusEffect.s
      At line 322 in file BonusEffect.s

xhalf 00000028

Symbol: xhalf
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 120 in file BonusEffect.s
      At line 139 in file BonusEffect.s
      At line 164 in file BonusEffect.s

getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 183 in file BonusEffect.s
      At line 366 in file BonusEffect.s
      At line 402 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 65 in file BonusEffect.s
      At line 181 in file BonusEffect.s
      At line 188 in file BonusEffect.s
      At line 370 in file BonusEffect.s
      At line 406 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 521 in file BonusEffect.s
Comment: putPic used once
5 symbols
393 symbols in table
