


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000 000003E8 
                       lensDivisor
                               EQU              1000
   17 00000000         
   18 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   19 00000000         ; Parameters:
   20 00000000         ; R0 = row
   21 00000000         ; R1 = column
   22 00000000         ; R2 = image address
   23 00000000         ; Stack must be cleared by caller
   24 00000000         ; Returns:
   25 00000000         ; R0 = RGBvalue
   26 00000000 E92D4000        STMFD            SP!, {LR}
   27 00000004         
   28 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   29 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   30 0000000C         
   31 0000000C E8BD4000        LDMFD            SP!, {LR}
   32 00000010 E12FFF1E        BX               LR
   33 00000014         
   34 00000014         rowColToIndex
   35 00000014         ; converts row and colum to index
   36 00000014         ; Parameters
   37 00000014         ; R0 = row
   38 00000014         ; R1 = col
   39 00000014         ; Stack must be cleared by caller
   40 00000014         ; Return Values
   41 00000014         ; R0 addressIndex



ARM Macro Assembler    Page 2 


   42 00000014 E92D4004        PUSH             {R2, LR}
   43 00000018 E1A02000        MOV              R2, R0
   44 0000001C EBFFFFFE        BL               getPicWidth
   45 00000020 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   46 00000024 E8BD4004        POP              {R2, LR}
   47 00000028 E12FFF1E        BX               LR
   48 0000002C         
   49 0000002C         putPixel
   50 0000002C         ; Stores a given RGB to a pixel at row, col
   51 0000002C         ; Parameters
   52 0000002C         ; R0 = row
   53 0000002C         ; R1 = col
   54 0000002C         ; R2 = picture address
   55 0000002C         ; R3 = RGB
   56 0000002C         ; Stack must be cleared by caller
   57 0000002C         
   58 0000002C E92D4000        STMFD            SP!, {LR}
   59 00000030         
   60 00000030 EBFFFFF7        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   61 00000034 E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   62 00000038         
   63 00000038 E8BD4000        LDMFD            SP!, {LR}
   64 0000003C E12FFF1E        BX               LR
   65 00000040         
   66 00000040         adjustPixel
   67 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   68 00000040         ; Applies a given contrast and brightness value
   69 00000040         ; Parameters:
   70 00000040         ; R0 = RGB
   71 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   72 00000040         ; R3 = brightness
   73 00000040         
   74 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   75 00000044         
   76 00000044 E3A018FF        LDR              R1, = redMask ; mask = redMask
   77 00000048 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   78 0000004C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   79 00000050 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   80 00000054         
   81 00000054 E3A01CFF        LDR              R1, = greenMask
   82 00000058 EB000012        BL               getValueFromMask



ARM Macro Assembler    Page 3 


   83 0000005C EB000006        BL               adjustColor
   84 00000060 EB000018        BL               setValueFromMask
   85 00000064         
   86 00000064 E3A010FF        LDR              R1, = blueMask
   87 00000068 EB00000E        BL               getValueFromMask
   88 0000006C EB000002        BL               adjustColor
   89 00000070 EB000014        BL               setValueFromMask
   90 00000074         
   91 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   92 00000078 E12FFF1E        BX               LR
   93 0000007C         
   94 0000007C         adjustColor
   95 0000007C         ; val = adjustColor(color, contrast, brightness)
   96 0000007C         ; applies the brightness contrast formula
   97 0000007C         ; Paramters:
   98 0000007C         ; R2 = color
   99 0000007C         ; Stack > contrast, brightness that order.
  100 0000007C         ; Return Values
  101 0000007C         ; R2 = color
  102 0000007C         ; Stack > contrast, brightness that order.
  103 0000007C E92D0030        STMFD            SP!, {R4, R5}
  104 00000080 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  105 00000084 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  106 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  107 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
  108 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  109 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  110 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  111 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  112 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  113 000000A4 E12FFF1E        BX               LR
  114 000000A8         
  115 000000A8         getValueFromMask
  116 000000A8         ; Gets the color value under a congruent mask
  117 000000A8         ; Expects masks of type FF
  118 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  119 000000A8         ; Parameters
  120 000000A8         ; R0 = RGB
  121 000000A8         ; R1 = mask
  122 000000A8         ; Return Values
  123 000000A8         ; R1 = mask
  124 000000A8         ; R0 = colorValue
  125 000000A8 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  126 000000AC E52D1004        PUSH             {R1}
  127 000000B0         getMaskWhile
  128 000000B0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  129 000000B4 2A000001        BCS              endGetMaskWhile ; {
  130 000000B8 E1A00220        LSR              R0, R0, #4  ; value >> 4
  131 000000BC EAFFFFFB        B                getMaskWhile ; }



ARM Macro Assembler    Page 4 


  132 000000C0         endGetMaskWhile
  133 000000C0 E49D1004        POP              {R1}
  134 000000C4 E12FFF1E        BX               LR
  135 000000C8         
  136 000000C8         setValueFromMask
  137 000000C8         ; Sets the color value under a congruent mask
  138 000000C8         ; Expects masks of type FF
  139 000000C8         ; Takes in a value and a location in form FF
  140 000000C8         ; Parameters
  141 000000C8         ; R0 = RGB
  142 000000C8         ; R1 = mask
  143 000000C8         ; R2 = colorValue
  144 000000C8         ; Return Values
  145 000000C8         ; R0 = RGB
  146 000000C8 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  147 000000CC         setMaskWhile
  148 000000CC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  149 000000D0 2A000001        BCS              endSetMaskWhile ; {
  150 000000D4 E1A02202        LSL              R2, R2, #4  ; value >> 4
  151 000000D8 EAFFFFFB        B                setMaskWhile ; }
  152 000000DC         endSetMaskWhile                      ;
  153 000000DC E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  154 000000E0 E12FFF1E        BX               LR
  155 000000E4         
  156 000000E4         averageN
  157 000000E4         ; Takes in five RGB values and computes their blur value
                       .
  158 000000E4         ; Parameters:
  159 000000E4         ; Stack > RGB value count    | 0 < count
  160 000000E4         ; Stack > count RGB values
  161 000000E4         ; Returns:
  162 000000E4         ; R0 = average
  163 000000E4         
  164 000000E4 E89D0001        LDMFD            SP, {R0}
  165 000000E8 E92D407E        STMFD            SP!, {R1 - R6, LR}
  166 000000EC E3A04007        LDR              R4, =7
  167 000000F0 E1A03000        MOV              R3, R0
  168 000000F4 E0845003        ADD              R5, R4, R3
  169 000000F8 E3A06000        LDR              R6, =0
  170 000000FC E3A02000        LDR              R2, =0
  171 00000100 E3A018FF        LDR              R1, =redMask
  172 00000104 EB000006        BL               averageColor
  173 00000108 E3A01CFF        LDR              R1, =greenMask
  174 0000010C EB000004        BL               averageColor
  175 00000110 E3A010FF        LDR              R1, =blueMask
  176 00000114 EB000002        BL               averageColor
  177 00000118 E1A00006        MOV              R0, R6
  178 0000011C E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  179 00000120 E12FFF1E        BX               LR
  180 00000124         
  181 00000124         averageColor
  182 00000124         forN
  183 00000124 E1550004        CMP              R5, R4
  184 00000128 0A000006        BEQ              endForN
  185 0000012C E79D0105        LDR              R0, [SP, R5, LSL #2]
  186 00000130 E52DE004        PUSH             {LR}



ARM Macro Assembler    Page 5 


  187 00000134 EBFFFFDB        BL               getValueFromMask
  188 00000138 E49DE004        POP              {LR}
  189 0000013C E0822000        ADD              R2, R2, R0
  190 00000140 E2555001        SUBS             R5, R5, #1
  191 00000144 EAFFFFF6        B                forN
  192 00000148         endForN
  193 00000148 E52D1004        PUSH             {R1}
  194 0000014C E1A00002        MOV              R0, R2
  195 00000150 E1A01003        MOV              R1, R3
  196 00000154 E52DE004        PUSH             {LR}
  197 00000158 EB000079        BL               divide
  198 0000015C E49DE004        POP              {LR}
  199 00000160 E3510000        CMP              R1, #0
  200 00000164 43A01000        LDRMI            R1, =0
  201 00000168 E35100FF        CMP              R1, #255
  202 0000016C C3A010FF        LDRGT            R1, =255
  203 00000170 E1A00006        MOV              R0, R6
  204 00000174 E1A02001        MOV              R2, R1
  205 00000178 E49D1004        POP              {R1}
  206 0000017C E52DE004        PUSH             {LR}
  207 00000180 EBFFFFD0        BL               setValueFromMask
  208 00000184 E49DE004        POP              {LR}
  209 00000188 E1A06000        MOV              R6, R0
  210 0000018C E3A02000        LDR              R2, =0
  211 00000190 E0845003        ADD              R5, R4, R3
  212 00000194 E12FFF1E        BX               LR
  213 00000198         
  214 00000198         greyScale
  215 00000198         ; Converts a pixel to a light intensity value.
  216 00000198         ; Paramteters
  217 00000198         ;    R0 = RGB
  218 00000198         ; Return
  219 00000198         ;    R0 = Light intesity
  220 00000198 E92D401E        PUSH             {R1, R2, R3, R4, LR}
  221 0000019C E1A02000        MOV              R2, R0
  222 000001A0 E3A03000        LDR              R3, =0
  223 000001A4         
  224 000001A4 E3A018FF        LDR              R1, =redMask
  225 000001A8 EBFFFFBE        BL               getValueFromMask
  226 000001AC E59FC2B4        LDR              R12, =299
  227 000001B0 E1A01000        MOV              R1, R0
  228 000001B4 E0000C91        MUL              R0, R1, R12
  229 000001B8 E0833000        ADD              R3, R3, R0
  230 000001BC         
  231 000001BC E1A00002        MOV              R0, R2
  232 000001C0 E3A01CFF        LDR              R1, =greenMask
  233 000001C4 EBFFFFB7        BL               getValueFromMask
  234 000001C8 E59FC29C        LDR              R12, =587
  235 000001CC E1A01000        MOV              R1, R0
  236 000001D0 E0000C91        MUL              R0, R1, R12
  237 000001D4 E0833000        ADD              R3, R3, R0
  238 000001D8         
  239 000001D8 E1A00002        MOV              R0, R2
  240 000001DC E3A010FF        LDR              R1, =blueMask
  241 000001E0 EBFFFFB0        BL               getValueFromMask
  242 000001E4 E3A0C072        LDR              R12, =114
  243 000001E8 E1A01000        MOV              R1, R0
  244 000001EC E0000C91        MUL              R0, R1, R12
  245 000001F0 E0833000        ADD              R3, R3, R0



ARM Macro Assembler    Page 6 


  246 000001F4         
  247 000001F4 E1A00003        MOV              R0, R3
  248 000001F8 E3A01FFA        LDR              R1, =1000
  249 000001FC EB000050        BL               divide
  250 00000200         
  251 00000200 E1A00001        MOV              R0, R1
  252 00000204 E1A01400        LSL              R1, R0, #8
  253 00000208 E0811000        ADD              R1, R1, R0
  254 0000020C E1A01401        LSL              R1, R1, #8
  255 00000210 E0800001        ADD              R0, R0, R1
  256 00000214         
  257 00000214 E8BD401E        POP              {R1, R2, R3, R4, LR}
  258 00000218 E12FFF1E        BX               LR
  259 0000021C         
  260 0000021C         
  261 0000021C         
  262 0000021C         applyFuncToAll
  263 0000021C         ; applies a passed subroutine for every pixel
  264 0000021C         
  265 0000021C         sqrt
  266 0000021C         ; Finds the square root of a number
  267 0000021C         ; Parameters:
  268 0000021C         ;  R0 = number
  269 0000021C         ; Outputs:
  270 0000021C         ;  R0 = sqare root
  271 0000021C E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  272 00000220 012FFF1E        BXEQ             LR
  273 00000224         
  274 00000224 E92D480E        PUSH             {R1, R2, R3, R11, LR}
  275 00000228 E1A0B000        MOV              R11, R0     ; save number
  276 0000022C E3A03000        LDR              R3, =0      ; temp = 0
  277 00000230 E1A02000        MOV              R2, R0      ; x = S
  278 00000234         
  279 00000234         find_sqr_whl
  280 00000234 E1A020A2        LSR              R2, R2, #1  ; x /= 2
  281 00000238 E1520003        CMP              R2, R3      ; if x = temp:
  282 0000023C 0A000005        BEQ              end_sqr_whl ; return x
  283 00000240 E1A03002        MOV              R3, R2      ; else: temp = x
  284 00000244 E1A01002        MOV              R1, R2      ; 
  285 00000248 E1A0000B        MOV              R0, R11     ;
  286 0000024C EB00003C        BL               divide      ; 
  287 00000250 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  288 00000254 EAFFFFF6        B                find_sqr_whl
  289 00000258         end_sqr_whl
  290 00000258         
  291 00000258 E1A00002        MOV              R0, R2
  292 0000025C E8BD480E        POP              {R1, R2, R3, R11, LR}
  293 00000260 E12FFF1E        BX               LR
  294 00000264         
  295 00000264         
  296 00000264         applyLens
  297 00000264         ; R0 = y
  298 00000264         ; R1 = X
  299 00000264         
  300 00000264         normalize_origin
  301 00000264 E92D4C0F        PUSH             {r0, r1, R2, R3, R10, R11, LR}
  302 00000268         



ARM Macro Assembler    Page 7 


  303 00000268 EBFFFFFE        BL               getPicHeight
  304 0000026C E1A000A0        LSR              R0, R0, #1
  305 00000270 E1A02000        MOV              R2, R0
  306 00000274         
  307 00000274 EBFFFFFE        BL               getPicWidth
  308 00000278 E1A000A0        LSR              R0, R0, #1
  309 0000027C E1A03000        MOV              R3, R0
  310 00000280         
  311 00000280 E8BD0003        POP              {r0, r1}
  312 00000284         
  313 00000284 E0400002        SUB              R0, R0, R2  ; y -= centery
  314 00000288 E0411003        SUB              R1, R1, R3  ; x -= centery
  315 0000028C E1A0A000        MOV              R10, R0     ; save y
  316 00000290 E1A0B001        MOV              R11, R1     ; save x
  317 00000294         
  318 00000294         ; P / (1 - a|P|^2)
  319 00000294 EB000022        BL               distanceSqr ; |P|^2
  320 00000298 E3A01FFA        LDR              R1, =lensDivisor
  321 0000029C EB000028        BL               divide      ; (1/10)*|P|^2
  322 000002A0 EBFFFFFE        BL               getPicWidth
  323 000002A4 E1A000A0        LSR              R0, R0, #1
  324 000002A8 E0402001        SUB              R2, R0, R1  ; width/2 - (1/10)*
                                                            |P|^2
  325 000002AC E1A0000A        MOV              R0, R10     ; 
  326 000002B0 E1A01002        MOV              R1, R2      ;
  327 000002B4 EB000022        BL               divide      ; y1 = divide(y, wi
                                                            dth/2 - (1/10)*|P|^
                                                            2)
  328 000002B8 E1A03001        MOV              R3, R1      ; save y1
  329 000002BC E1A0000B        MOV              R0, R11     ;  
  330 000002C0 E1A01002        MOV              R1, R2      ;
  331 000002C4 EB00001E        BL               divide      ; x1 = divide(x, wi
                                                            dth/2 - (1/10)*|P|^
                                                            2) 
  332 000002C8 E1A00003        MOV              R0, R3      ; 
  333 000002CC EB000014        BL               distanceSqr ; d = |x1, y1|^2
  334 000002D0 E3A01FFA        LDR              R1, =lensDivisor ;
  335 000002D4 EB00001A        BL               divide      ; (1/10)*d
  336 000002D8 EBFFFFFE        BL               getPicWidth ;
  337 000002DC E1A000A0        LSR              R0, R0, #1  ; width/2
  338 000002E0 E0402001        SUB              R2, R0, R1  ; width/2 - (1/10)*
                                                            d
  339 000002E4 E1A0000A        MOV              R0, R10
  340 000002E8 E1A01002        MOV              R1, R2
  341 000002EC EB000014        BL               divide      ; y/(width/2 - (1/1
                                                            0)*d)
  342 000002F0 E1A0A001        MOV              R10, R1
  343 000002F4 E1A0000B        MOV              R0, R11
  344 000002F8 E1A01002        MOV              R1, R2
  345 000002FC EB000010        BL               divide      ; x/(width/2 - (1/1
                                                            0)*d)
  346 00000300         
  347 00000300 EBFFFFFE        BL               getPicHeight
  348 00000304 E1A000A0        LSR              R0, R0, #1
  349 00000308 E080A00A        ADD              R10, R0, R10 ; X += height / 2
  350 0000030C         
  351 0000030C EBFFFFFE        BL               getPicWidth
  352 00000310 E1A000A0        LSR              R0, R0, #1
  353 00000314 E0811000        ADD              R1, R1, R0



ARM Macro Assembler    Page 8 


  354 00000318         
  355 00000318 E1A0000A        MOV              R0, R10
  356 0000031C         
  357 0000031C E8BD4C0C        POP              {R2, R3, R10, R11, LR}
  358 00000320 E12FFF1E        BX               LR
  359 00000324         
  360 00000324         
  361 00000324         distanceSqr
  362 00000324         ; R0 = relativex
  363 00000324         ; R1 = relativey
  364 00000324         
  365 00000324         ; R0 = distance^2
  366 00000324 E92D0006        PUSH             {R1, R2}
  367 00000328 E1A02000        MOV              R2, R0
  368 0000032C E0000092        MUL              R0, R2, R0
  369 00000330 E1A02001        MOV              R2, R1
  370 00000334 E0010192        MUL              R1, R2, R1
  371 00000338 E0800001        ADD              R0, R0, R1
  372 0000033C E8BD0006        POP              {R1, R2}
  373 00000340 E12FFF1E        BX               LR
  374 00000344         
  375 00000344         
  376 00000344         
  377 00000344         
  378 00000344         ; taken from my group work in the labs
  379 00000344         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  380 00000344 E92D401C        STMFD            SP!, {R2, R3, R4, LR}
  381 00000348         
  382 00000348 E3A04001        LDR              R4, =1      ;negative flag
  383 0000034C E3500000        CMP              R0, #0      ;if dividend < 0
  384 00000350 42644000        NEGMI            R4, R4      ; flag *= -1
  385 00000354 42600000        NEGMI            R0, R0      ; dividend *= -1
  386 00000358 E3510000        CMP              R1, #0      ; if divisor < 0
  387 0000035C 42644000        NEGMI            R4, R4      ; flag *= -1
  388 00000360 42611000        NEGMI            R1, R1      ; divisor *= -1
  389 00000364         
  390 00000364 E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  391 00000368 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  392 0000036C         
  393 0000036C E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  394 00000370 059F00F8        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  395 00000374 059F10F4        LDREQ            R1, =-1     ;load -1 into quoti
                                                            ent
  396 00000378 0A000039        BEQ              stop        ;stop
  397 0000037C         
  398 0000037C         alignLoop                            ;else
  399 0000037C E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  400 00000380 BA000002        BLT              endAlignLoop ;{
  401 00000384 E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  402 00000388 E1A03083        LSL              R3, #1      ; multiply placehol



ARM Macro Assembler    Page 9 


                                                            der by 2
  403 0000038C EAFFFFFA        B                alignLoop   ;}
  404 00000390         endAlignLoop
  405 00000390         
  406 00000390         THEREVENGEOFTHEALIGNLOOP             ;{
  407 00000390 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  408 00000394 E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  409 00000398 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n
                                                            ot set{ 
  410 0000039C E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  411 000003A0 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  412 000003A4 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  413 000003A8 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 
  414 000003AC         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  415 000003AC E1A01002        MOV              R1, R2
  416 000003B0         
  417 000003B0 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  418 000003B4 E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}
  419 000003B8 E12FFF1E        BX               LR
  420 000003BC         
  421 000003BC         
  422 000003BC         start
  423 000003BC EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  424 000003C0 E1A04000        MOV              R4, R0      ; copy destination
  425 000003C4 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  426 000003C8 E1A06000        MOV              R6, R0
  427 000003CC         
  428 000003CC         copyImage
  429 000003CC E2466001        SUB              R6, R6, #1
  430 000003D0         moveLoopI
  431 000003D0 EBFFFFFE        BL               getPicWidth
  432 000003D4 E1B07000        MOVS             R7, R0
  433 000003D8 E2477001        SUB              R7, R7, #1
  434 000003DC         
  435 000003DC         moveLoopJ
  436 000003DC E1A00006        MOV              R0, R6
  437 000003E0 E1A01007        MOV              R1, R7
  438 000003E4         
  439 000003E4 E1A02004        MOV              R2, R4
  440 000003E8 EBFFFF04        BL               getPixel
  441 000003EC         
  442 000003EC E1A03000        MOV              R3, R0
  443 000003F0 E1A00006        MOV              R0, R6
  444 000003F4 E59F2078        LDR              R2, =copyAddress
  445 000003F8 EBFFFF0B        BL               putPixel
  446 000003FC         
  447 000003FC E2577001        SUBS             R7, R7, #1



ARM Macro Assembler    Page 10 


  448 00000400 AAFFFFF5        BGE              moveLoopJ
  449 00000404         endMoveLoopJ
  450 00000404         
  451 00000404 E2566001        SUBS             R6, R6, #1
  452 00000408 AAFFFFF0        BGE              moveLoopI
  453 0000040C         endMoveLoopI
  454 0000040C         
  455 0000040C         
  456 0000040C         ;; /////////////////////////////////////////////////////
                       /////////////////////
  457 0000040C EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  458 00000410 E1A06000        MOV              R6, R0
  459 00000414         
  460 00000414 E2466001        SUB              R6, R6, #1
  461 00000418         move2LoopI
  462 00000418 EBFFFFFE        BL               getPicWidth
  463 0000041C E1B07000        MOVS             R7, R0
  464 00000420 E2477001        SUB              R7, R7, #1
  465 00000424         
  466 00000424         move2LoopJ
  467 00000424 E1A00006        MOV              R0, R6      ;
  468 00000428 E1A01007        MOV              R1, R7      ;
  469 0000042C EBFFFF8C        BL               applyLens
  470 00000430 E59F203C        LDR              R2, =copyAddress ;
  471 00000434 EBFFFEF1        BL               getPixel    ;
  472 00000438         
  473 00000438 E1A03000        MOV              R3, R0
  474 0000043C E1A00006        MOV              R0, R6      ;
  475 00000440 E1A01007        MOV              R1, R7      ;
  476 00000444 E1A02004        MOV              R2, R4
  477 00000448 EBFFFEF7        BL               putPixel
  478 0000044C         
  479 0000044C         finaly
  480 0000044C E2577001        SUBS             R7, R7, #1  ; column --
  481 00000450 AAFFFFF3        BGE              move2LoopJ
  482 00000454         endMove2LoopJ
  483 00000454 EBFFFFFE        BL               putPic
  484 00000458 E2566001        SUBS             R6, R6, #1
  485 0000045C AAFFFFED        BGE              move2LoopI
  486 00000460         endMove2LoopI
  487 00000460         
  488 00000460         
  489 00000460         
  490 00000460 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  491 00000464         
  492 00000464 EAFFFFFE 
                       stop    B                stop
  493 00000468         
  494 00000468         
  495 00000468 0000012B 
              0000024B 
              FFFFFFFF 
              A1016300         AREA             Variables, DATA, READWRITE
  496 00000000         
  497 00000000 00000002 
                       radius  DCD              2



ARM Macro Assembler    Page 11 


  498 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
THEENDOFTHEREVENGEOFTHEALIGNLOOP 000003AC

Symbol: THEENDOFTHEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 414 in file BonusEffect.s
   Uses
      At line 409 in file BonusEffect.s
Comment: THEENDOFTHEREVENGEOFTHEALIGNLOOP used once
THEREVENGEOFTHEALIGNLOOP 00000390

Symbol: THEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 406 in file BonusEffect.s
   Uses
      At line 413 in file BonusEffect.s
Comment: THEREVENGEOFTHEALIGNLOOP used once
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 94 in file BonusEffect.s
   Uses
      At line 78 in file BonusEffect.s
      At line 83 in file BonusEffect.s
      At line 88 in file BonusEffect.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 66 in file BonusEffect.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 0000037C

Symbol: alignLoop
   Definitions
      At line 398 in file BonusEffect.s
   Uses
      At line 403 in file BonusEffect.s
Comment: alignLoop used once
applyFuncToAll 0000021C

Symbol: applyFuncToAll
   Definitions
      At line 262 in file BonusEffect.s
   Uses
      None
Comment: applyFuncToAll unused
applyLens 00000264



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: applyLens
   Definitions
      At line 296 in file BonusEffect.s
   Uses
      At line 469 in file BonusEffect.s
Comment: applyLens used once
averageColor 00000124

Symbol: averageColor
   Definitions
      At line 181 in file BonusEffect.s
   Uses
      At line 172 in file BonusEffect.s
      At line 174 in file BonusEffect.s
      At line 176 in file BonusEffect.s

averageN 000000E4

Symbol: averageN
   Definitions
      At line 156 in file BonusEffect.s
   Uses
      None
Comment: averageN unused
copyImage 000003CC

Symbol: copyImage
   Definitions
      At line 428 in file BonusEffect.s
   Uses
      None
Comment: copyImage unused
distanceSqr 00000324

Symbol: distanceSqr
   Definitions
      At line 361 in file BonusEffect.s
   Uses
      At line 319 in file BonusEffect.s
      At line 333 in file BonusEffect.s

divide 00000344

Symbol: divide
   Definitions
      At line 379 in file BonusEffect.s
   Uses
      At line 197 in file BonusEffect.s
      At line 249 in file BonusEffect.s
      At line 286 in file BonusEffect.s
      At line 321 in file BonusEffect.s
      At line 327 in file BonusEffect.s
      At line 331 in file BonusEffect.s
      At line 335 in file BonusEffect.s
      At line 341 in file BonusEffect.s
      At line 345 in file BonusEffect.s

endAlignLoop 00000390



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: endAlignLoop
   Definitions
      At line 404 in file BonusEffect.s
   Uses
      At line 400 in file BonusEffect.s
Comment: endAlignLoop used once
endForN 00000148

Symbol: endForN
   Definitions
      At line 192 in file BonusEffect.s
   Uses
      At line 184 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 000000C0

Symbol: endGetMaskWhile
   Definitions
      At line 132 in file BonusEffect.s
   Uses
      At line 129 in file BonusEffect.s
Comment: endGetMaskWhile used once
endMove2LoopI 00000460

Symbol: endMove2LoopI
   Definitions
      At line 486 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopI unused
endMove2LoopJ 00000454

Symbol: endMove2LoopJ
   Definitions
      At line 482 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopJ unused
endMoveLoopI 0000040C

Symbol: endMoveLoopI
   Definitions
      At line 453 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopI unused
endMoveLoopJ 00000404

Symbol: endMoveLoopJ
   Definitions
      At line 449 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopJ unused
endSetMaskWhile 000000DC

Symbol: endSetMaskWhile
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 152 in file BonusEffect.s
   Uses
      At line 149 in file BonusEffect.s
Comment: endSetMaskWhile used once
end_sqr_whl 00000258

Symbol: end_sqr_whl
   Definitions
      At line 289 in file BonusEffect.s
   Uses
      At line 282 in file BonusEffect.s
Comment: end_sqr_whl used once
finaly 0000044C

Symbol: finaly
   Definitions
      At line 479 in file BonusEffect.s
   Uses
      None
Comment: finaly unused
find_sqr_whl 00000234

Symbol: find_sqr_whl
   Definitions
      At line 279 in file BonusEffect.s
   Uses
      At line 288 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 00000124

Symbol: forN
   Definitions
      At line 182 in file BonusEffect.s
   Uses
      At line 191 in file BonusEffect.s
Comment: forN used once
getMaskWhile 000000B0

Symbol: getMaskWhile
   Definitions
      At line 127 in file BonusEffect.s
   Uses
      At line 131 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 18 in file BonusEffect.s
   Uses
      At line 440 in file BonusEffect.s
      At line 471 in file BonusEffect.s

getValueFromMask 000000A8

Symbol: getValueFromMask
   Definitions
      At line 115 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 77 in file BonusEffect.s
      At line 82 in file BonusEffect.s
      At line 87 in file BonusEffect.s
      At line 187 in file BonusEffect.s
      At line 225 in file BonusEffect.s
      At line 233 in file BonusEffect.s
      At line 241 in file BonusEffect.s

greyScale 00000198

Symbol: greyScale
   Definitions
      At line 214 in file BonusEffect.s
   Uses
      None
Comment: greyScale unused
move2LoopI 00000418

Symbol: move2LoopI
   Definitions
      At line 461 in file BonusEffect.s
   Uses
      At line 485 in file BonusEffect.s
Comment: move2LoopI used once
move2LoopJ 00000424

Symbol: move2LoopJ
   Definitions
      At line 466 in file BonusEffect.s
   Uses
      At line 481 in file BonusEffect.s
Comment: move2LoopJ used once
moveLoopI 000003D0

Symbol: moveLoopI
   Definitions
      At line 430 in file BonusEffect.s
   Uses
      At line 452 in file BonusEffect.s
Comment: moveLoopI used once
moveLoopJ 000003DC

Symbol: moveLoopJ
   Definitions
      At line 435 in file BonusEffect.s
   Uses
      At line 448 in file BonusEffect.s
Comment: moveLoopJ used once
normalize_origin 00000264

Symbol: normalize_origin
   Definitions
      At line 300 in file BonusEffect.s
   Uses
      None
Comment: normalize_origin unused
putPixel 0000002C

Symbol: putPixel



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 49 in file BonusEffect.s
   Uses
      At line 445 in file BonusEffect.s
      At line 477 in file BonusEffect.s

rowColToIndex 00000014

Symbol: rowColToIndex
   Definitions
      At line 34 in file BonusEffect.s
   Uses
      At line 28 in file BonusEffect.s
      At line 60 in file BonusEffect.s

setMaskWhile 000000CC

Symbol: setMaskWhile
   Definitions
      At line 147 in file BonusEffect.s
   Uses
      At line 151 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 000000C8

Symbol: setValueFromMask
   Definitions
      At line 136 in file BonusEffect.s
   Uses
      At line 79 in file BonusEffect.s
      At line 84 in file BonusEffect.s
      At line 89 in file BonusEffect.s
      At line 207 in file BonusEffect.s

sqrt 0000021C

Symbol: sqrt
   Definitions
      At line 265 in file BonusEffect.s
   Uses
      None
Comment: sqrt unused
start 000003BC

Symbol: start
   Definitions
      At line 422 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 00000464

Symbol: stop
   Definitions
      At line 492 in file BonusEffect.s
   Uses
      At line 396 in file BonusEffect.s
      At line 492 in file BonusEffect.s




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

41 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 495 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
radius 00000000

Symbol: radius
   Definitions
      At line 497 in file BonusEffect.s
   Uses
      None
Comment: radius unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 86 in file BonusEffect.s
      At line 175 in file BonusEffect.s
      At line 240 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 444 in file BonusEffect.s
      At line 470 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 81 in file BonusEffect.s
      At line 173 in file BonusEffect.s
      At line 232 in file BonusEffect.s

lensDivisor 000003E8

Symbol: lensDivisor
   Definitions
      At line 16 in file BonusEffect.s
   Uses
      At line 320 in file BonusEffect.s
      At line 334 in file BonusEffect.s

redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 76 in file BonusEffect.s
      At line 171 in file BonusEffect.s
      At line 224 in file BonusEffect.s

xhalf 00000028

Symbol: xhalf
   Definitions
      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 423 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 303 in file BonusEffect.s
      At line 347 in file BonusEffect.s
      At line 425 in file BonusEffect.s
      At line 457 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 44 in file BonusEffect.s
      At line 307 in file BonusEffect.s
      At line 322 in file BonusEffect.s
      At line 336 in file BonusEffect.s
      At line 351 in file BonusEffect.s
      At line 431 in file BonusEffect.s
      At line 462 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 483 in file BonusEffect.s
      At line 490 in file BonusEffect.s

5 symbols
394 symbols in table
