


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000 00000001 
                       lensn   EQU              1
   17 00000000 00000006 
                       lensq   EQU              6
   18 00000000         
   19 00000000         
   20 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   21 00000000         ; Parameters:
   22 00000000         ; R0 = row
   23 00000000         ; R1 = column
   24 00000000         ; R2 = image address
   25 00000000         ; Stack must be cleared by caller
   26 00000000         ; Returns:
   27 00000000         ; R0 = RGBvalue
   28 00000000 E92D4000        STMFD            SP!, {LR}
   29 00000004         
   30 00000004 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   31 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   32 0000000C         
   33 0000000C E8BD4000        LDMFD            SP!, {LR}
   34 00000010 E12FFF1E        BX               LR
   35 00000014         
   36 00000014         rowColToIndex
   37 00000014         ; converts row and colum to index
   38 00000014         ; Parameters
   39 00000014         ; R0 = row
   40 00000014         ; R1 = col
   41 00000014         ; Stack must be cleared by caller



ARM Macro Assembler    Page 2 


   42 00000014         ; Return Values
   43 00000014         ; R0 addressIndex
   44 00000014 E92D4004        PUSH             {R2, LR}
   45 00000018 E1A02000        MOV              R2, R0
   46 0000001C EBFFFFFE        BL               getPicWidth
   47 00000020 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   48 00000024 E8BD4004        POP              {R2, LR}
   49 00000028 E12FFF1E        BX               LR
   50 0000002C         
   51 0000002C         putPixel
   52 0000002C         ; Stores a given RGB to a pixel at row, col
   53 0000002C         ; Parameters
   54 0000002C         ; R0 = row
   55 0000002C         ; R1 = col
   56 0000002C         ; R2 = picture address
   57 0000002C         ; R3 = RGB
   58 0000002C         ; Stack must be cleared by caller
   59 0000002C         
   60 0000002C E92D4000        STMFD            SP!, {LR}
   61 00000030         
   62 00000030 EBFFFFF7        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   63 00000034 E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   64 00000038         
   65 00000038 E8BD4000        LDMFD            SP!, {LR}
   66 0000003C E12FFF1E        BX               LR
   67 00000040         
   68 00000040         adjustPixel
   69 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   70 00000040         ; Applies a given contrast and brightness value
   71 00000040         ; Parameters:
   72 00000040         ; R0 = RGB
   73 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   74 00000040         ; R3 = brightness
   75 00000040         
   76 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   77 00000044         
   78 00000044 E3A018FF        LDR              R1, = redMask ; mask = redMask
   79 00000048 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   80 0000004C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   81 00000050 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   82 00000054         



ARM Macro Assembler    Page 3 


   83 00000054 E3A01CFF        LDR              R1, = greenMask
   84 00000058 EB000012        BL               getValueFromMask
   85 0000005C EB000006        BL               adjustColor
   86 00000060 EB000018        BL               setValueFromMask
   87 00000064         
   88 00000064 E3A010FF        LDR              R1, = blueMask
   89 00000068 EB00000E        BL               getValueFromMask
   90 0000006C EB000002        BL               adjustColor
   91 00000070 EB000014        BL               setValueFromMask
   92 00000074         
   93 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   94 00000078 E12FFF1E        BX               LR
   95 0000007C         
   96 0000007C         adjustColor
   97 0000007C         ; val = adjustColor(color, contrast, brightness)
   98 0000007C         ; applies the brightness contrast formula
   99 0000007C         ; Paramters:
  100 0000007C         ; R2 = color
  101 0000007C         ; Stack > contrast, brightness that order.
  102 0000007C         ; Return Values
  103 0000007C         ; R2 = color
  104 0000007C         ; Stack > contrast, brightness that order.
  105 0000007C E92D0030        STMFD            SP!, {R4, R5}
  106 00000080 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  107 00000084 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  108 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  109 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
  110 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  111 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  112 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  113 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  114 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  115 000000A4 E12FFF1E        BX               LR
  116 000000A8         
  117 000000A8         getValueFromMask
  118 000000A8         ; Gets the color value under a congruent mask
  119 000000A8         ; Expects masks of type FF
  120 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  121 000000A8         ; Parameters
  122 000000A8         ; R0 = RGB
  123 000000A8         ; R1 = mask
  124 000000A8         ; Return Values
  125 000000A8         ; R1 = mask
  126 000000A8         ; R0 = colorValue
  127 000000A8 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
  128 000000AC E52D1004        PUSH             {R1}
  129 000000B0         getMaskWhile
  130 000000B0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  131 000000B4 2A000001        BCS              endGetMaskWhile ; {



ARM Macro Assembler    Page 4 


  132 000000B8 E1A00220        LSR              R0, R0, #4  ; value >> 4
  133 000000BC EAFFFFFB        B                getMaskWhile ; }
  134 000000C0         endGetMaskWhile
  135 000000C0 E49D1004        POP              {R1}
  136 000000C4 E12FFF1E        BX               LR
  137 000000C8         
  138 000000C8         setValueFromMask
  139 000000C8         ; Sets the color value under a congruent mask
  140 000000C8         ; Expects masks of type FF
  141 000000C8         ; Takes in a value and a location in form FF
  142 000000C8         ; Parameters
  143 000000C8         ; R0 = RGB
  144 000000C8         ; R1 = mask
  145 000000C8         ; R2 = colorValue
  146 000000C8         ; Return Values
  147 000000C8         ; R0 = RGB
  148 000000C8 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  149 000000CC         setMaskWhile
  150 000000CC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  151 000000D0 2A000001        BCS              endSetMaskWhile ; {
  152 000000D4 E1A02202        LSL              R2, R2, #4  ; value >> 4
  153 000000D8 EAFFFFFB        B                setMaskWhile ; }
  154 000000DC         endSetMaskWhile                      ;
  155 000000DC E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  156 000000E0 E12FFF1E        BX               LR
  157 000000E4         
  158 000000E4         averageN
  159 000000E4         ; Takes in five RGB values and computes their blur value
                       .
  160 000000E4         ; Parameters:
  161 000000E4         ; Stack > RGB value count    | 0 < count
  162 000000E4         ; Stack > count RGB values
  163 000000E4         ; Returns:
  164 000000E4         ; R0 = average
  165 000000E4         
  166 000000E4 E89D0001        LDMFD            SP, {R0}
  167 000000E8 E92D407E        STMFD            SP!, {R1 - R6, LR}
  168 000000EC E3A04007        LDR              R4, =7
  169 000000F0 E1A03000        MOV              R3, R0
  170 000000F4 E0845003        ADD              R5, R4, R3
  171 000000F8 E3A06000        LDR              R6, =0
  172 000000FC E3A02000        LDR              R2, =0
  173 00000100 E3A018FF        LDR              R1, =redMask
  174 00000104 EB000006        BL               averageColor
  175 00000108 E3A01CFF        LDR              R1, =greenMask
  176 0000010C EB000004        BL               averageColor
  177 00000110 E3A010FF        LDR              R1, =blueMask
  178 00000114 EB000002        BL               averageColor
  179 00000118 E1A00006        MOV              R0, R6
  180 0000011C E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  181 00000120 E12FFF1E        BX               LR
  182 00000124         
  183 00000124         averageColor
  184 00000124         forN
  185 00000124 E1550004        CMP              R5, R4
  186 00000128 0A000006        BEQ              endForN



ARM Macro Assembler    Page 5 


  187 0000012C E79D0105        LDR              R0, [SP, R5, LSL #2]
  188 00000130 E52DE004        PUSH             {LR}
  189 00000134 EBFFFFDB        BL               getValueFromMask
  190 00000138 E49DE004        POP              {LR}
  191 0000013C E0822000        ADD              R2, R2, R0
  192 00000140 E2555001        SUBS             R5, R5, #1
  193 00000144 EAFFFFF6        B                forN
  194 00000148         endForN
  195 00000148 E52D1004        PUSH             {R1}
  196 0000014C E1A00002        MOV              R0, R2
  197 00000150 E1A01003        MOV              R1, R3
  198 00000154 E52DE004        PUSH             {LR}
  199 00000158 EB00006F        BL               divide
  200 0000015C E49DE004        POP              {LR}
  201 00000160 E3510000        CMP              R1, #0
  202 00000164 43A01000        LDRMI            R1, =0
  203 00000168 E35100FF        CMP              R1, #255
  204 0000016C C3A010FF        LDRGT            R1, =255
  205 00000170 E1A00006        MOV              R0, R6
  206 00000174 E1A02001        MOV              R2, R1
  207 00000178 E49D1004        POP              {R1}
  208 0000017C E52DE004        PUSH             {LR}
  209 00000180 EBFFFFD0        BL               setValueFromMask
  210 00000184 E49DE004        POP              {LR}
  211 00000188 E1A06000        MOV              R6, R0
  212 0000018C E3A02000        LDR              R2, =0
  213 00000190 E0845003        ADD              R5, R4, R3
  214 00000194 E12FFF1E        BX               LR
  215 00000198         
  216 00000198         greyScale
  217 00000198         ; Converts a pixel to a light intensity value.
  218 00000198         ; Paramteters
  219 00000198         ;    R0 = RGB
  220 00000198         ; Return
  221 00000198         ;    R0 = Light intesity
  222 00000198 E92D401E        PUSH             {R1, R2, R3, R4, LR}
  223 0000019C E1A02000        MOV              R2, R0
  224 000001A0 E3A03000        LDR              R3, =0
  225 000001A4         
  226 000001A4 E3A018FF        LDR              R1, =redMask
  227 000001A8 EBFFFFBE        BL               getValueFromMask
  228 000001AC E59FC28C        LDR              R12, =299
  229 000001B0 E1A01000        MOV              R1, R0
  230 000001B4 E0000C91        MUL              R0, R1, R12
  231 000001B8 E0833000        ADD              R3, R3, R0
  232 000001BC         
  233 000001BC E1A00002        MOV              R0, R2
  234 000001C0 E3A01CFF        LDR              R1, =greenMask
  235 000001C4 EBFFFFB7        BL               getValueFromMask
  236 000001C8 E59FC274        LDR              R12, =587
  237 000001CC E1A01000        MOV              R1, R0
  238 000001D0 E0000C91        MUL              R0, R1, R12
  239 000001D4 E0833000        ADD              R3, R3, R0
  240 000001D8         
  241 000001D8 E1A00002        MOV              R0, R2
  242 000001DC E3A010FF        LDR              R1, =blueMask
  243 000001E0 EBFFFFB0        BL               getValueFromMask
  244 000001E4 E3A0C072        LDR              R12, =114
  245 000001E8 E1A01000        MOV              R1, R0



ARM Macro Assembler    Page 6 


  246 000001EC E0000C91        MUL              R0, R1, R12
  247 000001F0 E0833000        ADD              R3, R3, R0
  248 000001F4         
  249 000001F4 E1A00003        MOV              R0, R3
  250 000001F8 E3A01FFA        LDR              R1, =1000
  251 000001FC EB000046        BL               divide
  252 00000200         
  253 00000200 E1A00001        MOV              R0, R1
  254 00000204 E1A01400        LSL              R1, R0, #8
  255 00000208 E0811000        ADD              R1, R1, R0
  256 0000020C E1A01401        LSL              R1, R1, #8
  257 00000210 E0800001        ADD              R0, R0, R1
  258 00000214         
  259 00000214 E8BD401E        POP              {R1, R2, R3, R4, LR}
  260 00000218 E12FFF1E        BX               LR
  261 0000021C         
  262 0000021C         
  263 0000021C         
  264 0000021C         applyFuncToAll
  265 0000021C         ; applies a passed subroutine for every pixel
  266 0000021C         
  267 0000021C         sqrt
  268 0000021C         ; Finds the square root of a number
  269 0000021C         ; Parameters:
  270 0000021C         ;  R0 = number
  271 0000021C         ; Outputs:
  272 0000021C         ;  R0 = sqare root
  273 0000021C E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  274 00000220 012FFF1E        BXEQ             LR
  275 00000224         
  276 00000224 E92D481E        PUSH             {R1, R2, R3, R4, R11, LR}
  277 00000228 E1A0B000        MOV              R11, R0     ; save number
  278 0000022C E3A03000        LDR              R3, =0      ; temp = 0
  279 00000230 E1A02000        MOV              R2, R0      ; x = S
  280 00000234         
  281 00000234         find_sqr_whl
  282 00000234 E1A020A2        LSR              R2, R2, #1  ; x /= 2
  283 00000238 E0524003        SUBS             R4, R2, R3
  284 0000023C 0A000007        BEQ              end_sqr_whl ; return x
  285 00000240 E3540001        CMP              R4, #1
  286 00000244 0A000005        BEQ              end_sqr_whl
  287 00000248 E1A03002        MOV              R3, R2      ; else: temp = x
  288 0000024C E1A01002        MOV              R1, R2      ; 
  289 00000250 E1A0000B        MOV              R0, R11     ;
  290 00000254 EB000030        BL               divide      ; 
  291 00000258 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  292 0000025C EAFFFFF4        B                find_sqr_whl
  293 00000260         end_sqr_whl
  294 00000260         
  295 00000260 E1A00002        MOV              R0, R2
  296 00000264 E8BD481E        POP              {R1, R2, R3, R4, R11, LR}
  297 00000268 E12FFF1E        BX               LR
  298 0000026C         
  299 0000026C         
  300 0000026C         applyLens
  301 0000026C         ; R0 = y
  302 0000026C         ; R1 = X



ARM Macro Assembler    Page 7 


  303 0000026C         
  304 0000026C         normalize_origin
  305 0000026C E92D4E0F        PUSH             {r0, r1, R2, R3, R9, R10, R11, 
LR}
  306 00000270         
  307 00000270 EBFFFFFE        BL               getPicHeight
  308 00000274 E1A000A0        LSR              R0, R0, #1
  309 00000278 E1A02000        MOV              R2, R0
  310 0000027C         
  311 0000027C EBFFFFFE        BL               getPicWidth
  312 00000280 E1A000A0        LSR              R0, R0, #1
  313 00000284 E1A03000        MOV              R3, R0
  314 00000288         
  315 00000288 E8BD0003        POP              {r0, r1}
  316 0000028C         
  317 0000028C E0400002        SUB              R0, R0, R2  ; y -= centery
  318 00000290 E0411003        SUB              R1, R1, R3  ; x -= centery
  319 00000294         
  320 00000294 E1A0A000        MOV              R10, R0     ; save y
  321 00000298 E1A0B001        MOV              R11, R1     ; save x
  322 0000029C         
  323 0000029C EB000016        BL               distanceSqr
  324 000002A0 EBFFFFDD        BL               sqrt
  325 000002A4 E3A01001        LDR              R1, =lensn
  326 000002A8 E0000091        MUL              R0, R1, R0
  327 000002AC E3A01006        LDR              R1, =lensq
  328 000002B0 EB000019        BL               divide
  329 000002B4 E1A09001        MOV              R9, R1
  330 000002B8         
  331 000002B8 E1A0000A        MOV              R0, R10
  332 000002BC E1A01009        MOV              R1, R9
  333 000002C0 EB000015        BL               divide
  334 000002C4 E04AA001        SUB              R10, R10, R1
  335 000002C8         
  336 000002C8 E1A0000B        MOV              R0, R11
  337 000002CC E1A01009        MOV              R1, R9
  338 000002D0 EB000011        BL               divide
  339 000002D4 E04BB001        SUB              R11, R11, R1
  340 000002D8         
  341 000002D8 EBFFFFFE        BL               getPicHeight
  342 000002DC E1A000A0        LSR              R0, R0, #1
  343 000002E0 E08AA000        ADD              R10, R10, R0
  344 000002E4         
  345 000002E4 EBFFFFFE        BL               getPicWidth
  346 000002E8 E1A000A0        LSR              R0, R0, #1
  347 000002EC E08B1000        ADD              R1, R11, R0
  348 000002F0         
  349 000002F0 E1A0000A        MOV              R0, R10
  350 000002F4         
  351 000002F4         
  352 000002F4 E8BD4E0C        POP              {R2, R3, R9, R10, R11, LR}
  353 000002F8 E12FFF1E        BX               LR
  354 000002FC         
  355 000002FC         
  356 000002FC         distanceSqr
  357 000002FC         ; R0 = relativex
  358 000002FC         ; R1 = relativey
  359 000002FC         
  360 000002FC         ; R0 = distance^2



ARM Macro Assembler    Page 8 


  361 000002FC E92D0006        PUSH             {R1, R2}
  362 00000300 E1A02000        MOV              R2, R0
  363 00000304 E0000092        MUL              R0, R2, R0
  364 00000308 E1A02001        MOV              R2, R1
  365 0000030C E0010192        MUL              R1, R2, R1
  366 00000310 E0800001        ADD              R0, R0, R1
  367 00000314 E8BD0006        POP              {R1, R2}
  368 00000318 E12FFF1E        BX               LR
  369 0000031C         
  370 0000031C         
  371 0000031C         
  372 0000031C         
  373 0000031C         ; taken from my group work in the labs
  374 0000031C         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  375 0000031C E92D401C        STMFD            SP!, {R2, R3, R4, LR}
  376 00000320         
  377 00000320 E3A04001        LDR              R4, =1      ;negative flag
  378 00000324 E3500000        CMP              R0, #0      ;if dividend < 0
  379 00000328 42644000        NEGMI            R4, R4      ; flag *= -1
  380 0000032C 42600000        NEGMI            R0, R0      ; dividend *= -1
  381 00000330 E3510000        CMP              R1, #0      ; if divisor < 0
  382 00000334 42644000        NEGMI            R4, R4      ; flag *= -1
  383 00000338 42611000        NEGMI            R1, R1      ; divisor *= -1
  384 0000033C         
  385 0000033C E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  386 00000340 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  387 00000344         
  388 00000344 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  389 00000348 059F00F8        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  390 0000034C 03A02001        MOVEQ            R2, #1      ;load -1 into quoti
                                                            ent
  391 00000350 0A00000B        BEQ              div_zero    ;stop
  392 00000354         
  393 00000354         alignLoop                            ;else
  394 00000354 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  395 00000358 BA000002        BLT              endAlignLoop ;{
  396 0000035C E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  397 00000360 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  398 00000364 EAFFFFFA        B                alignLoop   ;}
  399 00000368         endAlignLoop
  400 00000368         
  401 00000368         THEREVENGEOFTHEALIGNLOOP             ;{
  402 00000368 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  403 0000036C E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  404 00000370 2A000003        BCS              THEENDOFTHEREVENGEOFTHEALIGNLOO
P 
                                                            ;while carry flag n



ARM Macro Assembler    Page 9 


                                                            ot set{ 
  405 00000374 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  406 00000378 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  407 0000037C 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  408 00000380 EAFFFFF8        B                THEREVENGEOFTHEALIGNLOOP ; 
  409 00000384         THEENDOFTHEREVENGEOFTHEALIGNLOOP     ; }
  410 00000384         div_zero
  411 00000384 E1A01002        MOV              R1, R2
  412 00000388         
  413 00000388 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  414 0000038C E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}
  415 00000390 E12FFF1E        BX               LR
  416 00000394         
  417 00000394         
  418 00000394         start
  419 00000394 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  420 00000398 E1A04000        MOV              R4, R0      ; copy destination
  421 0000039C EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  422 000003A0 E1A06000        MOV              R6, R0
  423 000003A4         
  424 000003A4         copyImage
  425 000003A4 E2466001        SUB              R6, R6, #1
  426 000003A8         moveLoopI
  427 000003A8 EBFFFFFE        BL               getPicWidth
  428 000003AC E1B07000        MOVS             R7, R0
  429 000003B0 E2477001        SUB              R7, R7, #1
  430 000003B4         
  431 000003B4         moveLoopJ
  432 000003B4 E1A00006        MOV              R0, R6
  433 000003B8 E1A01007        MOV              R1, R7
  434 000003BC         
  435 000003BC E1A02004        MOV              R2, R4
  436 000003C0 EBFFFF0E        BL               getPixel
  437 000003C4         
  438 000003C4 E1A03000        MOV              R3, R0
  439 000003C8 E1A00006        MOV              R0, R6
  440 000003CC E59F2078        LDR              R2, =copyAddress
  441 000003D0 EBFFFF15        BL               putPixel
  442 000003D4         
  443 000003D4 E2577001        SUBS             R7, R7, #1
  444 000003D8 AAFFFFF5        BGE              moveLoopJ
  445 000003DC         endMoveLoopJ
  446 000003DC         
  447 000003DC E2566001        SUBS             R6, R6, #1
  448 000003E0 AAFFFFF0        BGE              moveLoopI
  449 000003E4         endMoveLoopI
  450 000003E4         
  451 000003E4         
  452 000003E4         ;; /////////////////////////////////////////////////////
                       /////////////////////
  453 000003E4 EBFFFFFE        BL               getPicHeight ; load the height 



ARM Macro Assembler    Page 10 


                                                            of the image (rows)
                                                             in R5
  454 000003E8 E1A06000        MOV              R6, R0
  455 000003EC         
  456 000003EC E2466001        SUB              R6, R6, #1
  457 000003F0         move2LoopI
  458 000003F0 EBFFFFFE        BL               getPicWidth
  459 000003F4 E1B07000        MOVS             R7, R0
  460 000003F8 E2477001        SUB              R7, R7, #1
  461 000003FC         
  462 000003FC         move2LoopJ
  463 000003FC E1A00006        MOV              R0, R6      ;
  464 00000400 E1A01007        MOV              R1, R7      ;
  465 00000404 EBFFFF98        BL               applyLens
  466 00000408 E59F203C        LDR              R2, =copyAddress ;
  467 0000040C EBFFFEFB        BL               getPixel    ;
  468 00000410         
  469 00000410 E1A03000        MOV              R3, R0
  470 00000414 E1A00006        MOV              R0, R6      ;
  471 00000418 E1A01007        MOV              R1, R7      ;
  472 0000041C E1A02004        MOV              R2, R4
  473 00000420 EBFFFF01        BL               putPixel
  474 00000424         
  475 00000424         finaly
  476 00000424 E2577001        SUBS             R7, R7, #1  ; column --
  477 00000428 AAFFFFF3        BGE              move2LoopJ
  478 0000042C         endMove2LoopJ
  479 0000042C EBFFFFFE        BL               putPic
  480 00000430 E2566001        SUBS             R6, R6, #1
  481 00000434 AAFFFFED        BGE              move2LoopI
  482 00000438         endMove2LoopI
  483 00000438         
  484 00000438         
  485 00000438         
  486 00000438 EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  487 0000043C         
  488 0000043C EAFFFFFE 
                       stop    B                stop
  489 00000440         
  490 00000440         
  491 00000440 0000012B 
              0000024B 
              FFFFFFFF 
              A1016300         AREA             Variables, DATA, READWRITE
  492 00000000         
  493 00000000 00000002 
                       radius  DCD              2
  494 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
THEENDOFTHEREVENGEOFTHEALIGNLOOP 00000384

Symbol: THEENDOFTHEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 409 in file BonusEffect.s
   Uses
      At line 404 in file BonusEffect.s
Comment: THEENDOFTHEREVENGEOFTHEALIGNLOOP used once
THEREVENGEOFTHEALIGNLOOP 00000368

Symbol: THEREVENGEOFTHEALIGNLOOP
   Definitions
      At line 401 in file BonusEffect.s
   Uses
      At line 408 in file BonusEffect.s
Comment: THEREVENGEOFTHEALIGNLOOP used once
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 96 in file BonusEffect.s
   Uses
      At line 80 in file BonusEffect.s
      At line 85 in file BonusEffect.s
      At line 90 in file BonusEffect.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 68 in file BonusEffect.s
   Uses
      None
Comment: adjustPixel unused
alignLoop 00000354

Symbol: alignLoop
   Definitions
      At line 393 in file BonusEffect.s
   Uses
      At line 398 in file BonusEffect.s
Comment: alignLoop used once
applyFuncToAll 0000021C

Symbol: applyFuncToAll
   Definitions
      At line 264 in file BonusEffect.s
   Uses
      None
Comment: applyFuncToAll unused
applyLens 0000026C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: applyLens
   Definitions
      At line 300 in file BonusEffect.s
   Uses
      At line 465 in file BonusEffect.s
Comment: applyLens used once
averageColor 00000124

Symbol: averageColor
   Definitions
      At line 183 in file BonusEffect.s
   Uses
      At line 174 in file BonusEffect.s
      At line 176 in file BonusEffect.s
      At line 178 in file BonusEffect.s

averageN 000000E4

Symbol: averageN
   Definitions
      At line 158 in file BonusEffect.s
   Uses
      None
Comment: averageN unused
copyImage 000003A4

Symbol: copyImage
   Definitions
      At line 424 in file BonusEffect.s
   Uses
      None
Comment: copyImage unused
distanceSqr 000002FC

Symbol: distanceSqr
   Definitions
      At line 356 in file BonusEffect.s
   Uses
      At line 323 in file BonusEffect.s
Comment: distanceSqr used once
div_zero 00000384

Symbol: div_zero
   Definitions
      At line 410 in file BonusEffect.s
   Uses
      At line 391 in file BonusEffect.s
Comment: div_zero used once
divide 0000031C

Symbol: divide
   Definitions
      At line 374 in file BonusEffect.s
   Uses
      At line 199 in file BonusEffect.s
      At line 251 in file BonusEffect.s
      At line 290 in file BonusEffect.s
      At line 328 in file BonusEffect.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 333 in file BonusEffect.s
      At line 338 in file BonusEffect.s

endAlignLoop 00000368

Symbol: endAlignLoop
   Definitions
      At line 399 in file BonusEffect.s
   Uses
      At line 395 in file BonusEffect.s
Comment: endAlignLoop used once
endForN 00000148

Symbol: endForN
   Definitions
      At line 194 in file BonusEffect.s
   Uses
      At line 186 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 000000C0

Symbol: endGetMaskWhile
   Definitions
      At line 134 in file BonusEffect.s
   Uses
      At line 131 in file BonusEffect.s
Comment: endGetMaskWhile used once
endMove2LoopI 00000438

Symbol: endMove2LoopI
   Definitions
      At line 482 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopI unused
endMove2LoopJ 0000042C

Symbol: endMove2LoopJ
   Definitions
      At line 478 in file BonusEffect.s
   Uses
      None
Comment: endMove2LoopJ unused
endMoveLoopI 000003E4

Symbol: endMoveLoopI
   Definitions
      At line 449 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopI unused
endMoveLoopJ 000003DC

Symbol: endMoveLoopJ
   Definitions
      At line 445 in file BonusEffect.s
   Uses
      None
Comment: endMoveLoopJ unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

endSetMaskWhile 000000DC

Symbol: endSetMaskWhile
   Definitions
      At line 154 in file BonusEffect.s
   Uses
      At line 151 in file BonusEffect.s
Comment: endSetMaskWhile used once
end_sqr_whl 00000260

Symbol: end_sqr_whl
   Definitions
      At line 293 in file BonusEffect.s
   Uses
      At line 284 in file BonusEffect.s
      At line 286 in file BonusEffect.s

finaly 00000424

Symbol: finaly
   Definitions
      At line 475 in file BonusEffect.s
   Uses
      None
Comment: finaly unused
find_sqr_whl 00000234

Symbol: find_sqr_whl
   Definitions
      At line 281 in file BonusEffect.s
   Uses
      At line 292 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 00000124

Symbol: forN
   Definitions
      At line 184 in file BonusEffect.s
   Uses
      At line 193 in file BonusEffect.s
Comment: forN used once
getMaskWhile 000000B0

Symbol: getMaskWhile
   Definitions
      At line 129 in file BonusEffect.s
   Uses
      At line 133 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 20 in file BonusEffect.s
   Uses
      At line 436 in file BonusEffect.s
      At line 467 in file BonusEffect.s

getValueFromMask 000000A8



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: getValueFromMask
   Definitions
      At line 117 in file BonusEffect.s
   Uses
      At line 79 in file BonusEffect.s
      At line 84 in file BonusEffect.s
      At line 89 in file BonusEffect.s
      At line 189 in file BonusEffect.s
      At line 227 in file BonusEffect.s
      At line 235 in file BonusEffect.s
      At line 243 in file BonusEffect.s

greyScale 00000198

Symbol: greyScale
   Definitions
      At line 216 in file BonusEffect.s
   Uses
      None
Comment: greyScale unused
move2LoopI 000003F0

Symbol: move2LoopI
   Definitions
      At line 457 in file BonusEffect.s
   Uses
      At line 481 in file BonusEffect.s
Comment: move2LoopI used once
move2LoopJ 000003FC

Symbol: move2LoopJ
   Definitions
      At line 462 in file BonusEffect.s
   Uses
      At line 477 in file BonusEffect.s
Comment: move2LoopJ used once
moveLoopI 000003A8

Symbol: moveLoopI
   Definitions
      At line 426 in file BonusEffect.s
   Uses
      At line 448 in file BonusEffect.s
Comment: moveLoopI used once
moveLoopJ 000003B4

Symbol: moveLoopJ
   Definitions
      At line 431 in file BonusEffect.s
   Uses
      At line 444 in file BonusEffect.s
Comment: moveLoopJ used once
normalize_origin 0000026C

Symbol: normalize_origin
   Definitions
      At line 304 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: normalize_origin unused
putPixel 0000002C

Symbol: putPixel
   Definitions
      At line 51 in file BonusEffect.s
   Uses
      At line 441 in file BonusEffect.s
      At line 473 in file BonusEffect.s

rowColToIndex 00000014

Symbol: rowColToIndex
   Definitions
      At line 36 in file BonusEffect.s
   Uses
      At line 30 in file BonusEffect.s
      At line 62 in file BonusEffect.s

setMaskWhile 000000CC

Symbol: setMaskWhile
   Definitions
      At line 149 in file BonusEffect.s
   Uses
      At line 153 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 000000C8

Symbol: setValueFromMask
   Definitions
      At line 138 in file BonusEffect.s
   Uses
      At line 81 in file BonusEffect.s
      At line 86 in file BonusEffect.s
      At line 91 in file BonusEffect.s
      At line 209 in file BonusEffect.s

sqrt 0000021C

Symbol: sqrt
   Definitions
      At line 267 in file BonusEffect.s
   Uses
      At line 324 in file BonusEffect.s
Comment: sqrt used once
start 00000394

Symbol: start
   Definitions
      At line 418 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 0000043C

Symbol: stop
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 488 in file BonusEffect.s
   Uses
      At line 488 in file BonusEffect.s
Comment: stop used once
42 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 491 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
radius 00000000

Symbol: radius
   Definitions
      At line 493 in file BonusEffect.s
   Uses
      None
Comment: radius unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 88 in file BonusEffect.s
      At line 177 in file BonusEffect.s
      At line 242 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 440 in file BonusEffect.s
      At line 466 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 83 in file BonusEffect.s
      At line 175 in file BonusEffect.s
      At line 234 in file BonusEffect.s

lensn 00000001

Symbol: lensn
   Definitions
      At line 16 in file BonusEffect.s
   Uses
      At line 325 in file BonusEffect.s
Comment: lensn used once
lensq 00000006

Symbol: lensq
   Definitions
      At line 17 in file BonusEffect.s
   Uses
      At line 327 in file BonusEffect.s
Comment: lensq used once
redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 78 in file BonusEffect.s
      At line 173 in file BonusEffect.s
      At line 226 in file BonusEffect.s

xhalf 00000028

Symbol: xhalf
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 419 in file BonusEffect.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 307 in file BonusEffect.s
      At line 341 in file BonusEffect.s
      At line 421 in file BonusEffect.s
      At line 453 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 46 in file BonusEffect.s
      At line 311 in file BonusEffect.s
      At line 345 in file BonusEffect.s
      At line 427 in file BonusEffect.s
      At line 458 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      At line 479 in file BonusEffect.s
      At line 486 in file BonusEffect.s

5 symbols
396 symbols in table
