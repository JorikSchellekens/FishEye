


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000 A1016300 
                       copyAddress
                               EQU              0xA1016300
   11 00000000 00FF0000 
                       redMask EQU              0x00FF0000
   12 00000000 0000FF00 
                       greenMask
                               EQU              0x0000FF00
   13 00000000 000000FF 
                       blueMask
                               EQU              0x000000FF
   14 00000000 00000028 
                       xhalf   EQU              40
   15 00000000 00000031 
                       yhalf   EQU              49
   16 00000000 00000001 
                       lensn   EQU              1
   17 00000000 00000014 
                       lensq   EQU              20
   18 00000000         
   19 00000000         
   20 00000000         
   21 00000000         ;<--------------Pixel Manipulation-------------->
   22 00000000         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   23 00000000         ; Parameters:
   24 00000000         ; R0 = row
   25 00000000         ; R1 = column
   26 00000000         ; R2 = image address
   27 00000000         ; Stack must be cleared by caller
   28 00000000         ; Returns:
   29 00000000         ; R0 = RGBvalue
   30 00000000 E92D4000        STMFD            SP!, {LR}
   31 00000004         
   32 00000004 EB000007        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   33 00000008 E7920100        LDR              R0, [R2, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   34 0000000C         
   35 0000000C E8BD4000        LDMFD            SP!, {LR}
   36 00000010 E12FFF1E        BX               LR
   37 00000014         
   38 00000014         putPixel
   39 00000014         ; Stores a given RGB to a pixel at row, col
   40 00000014         ; Parameters
   41 00000014         ; R0 = row



ARM Macro Assembler    Page 2 


   42 00000014         ; R1 = col
   43 00000014         ; R2 = picture address
   44 00000014         ; R3 = RGB
   45 00000014         ; Stack must be cleared by caller
   46 00000014         
   47 00000014 E92D4000        STMFD            SP!, {LR}
   48 00000018         
   49 00000018 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   50 0000001C E7823100        STR              R3, [R2, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            ) = RGB
   51 00000020         
   52 00000020 E8BD4000        LDMFD            SP!, {LR}
   53 00000024 E12FFF1E        BX               LR
   54 00000028         
   55 00000028         rowColToIndex
   56 00000028         ; converts row and colum to index
   57 00000028         ; Parameters
   58 00000028         ; R0 = row
   59 00000028         ; R1 = col
   60 00000028         ; Stack must be cleared by caller
   61 00000028         ; Return Values
   62 00000028         ; R0 addressIndex
   63 00000028 E92D4004        PUSH             {R2, LR}
   64 0000002C E1A02000        MOV              R2, R0
   65 00000030 EBFFFFFE        BL               getPicWidth
   66 00000034 E0201092        MLA              R0, R2, R0, R1 ; addressOffset 
                                                            = row * width + col
                                                             
   67 00000038 E8BD4004        POP              {R2, LR}
   68 0000003C E12FFF1E        BX               LR
   69 00000040         
   70 00000040         getValueFromMask
   71 00000040         ; Gets the color value under a congruent mask
   72 00000040         ; Expects masks of type FF
   73 00000040         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
   74 00000040         ; Parameters
   75 00000040         ; R0 = RGB
   76 00000040         ; R1 = mask
   77 00000040         ; Return Values
   78 00000040         ; R1 = mask
   79 00000040         ; R0 = colorValue
   80 00000040 E0000001        AND              R0, R0, R1  ; value = RGB & mas
                                                            k
   81 00000044 E52D1004        PUSH             {R1}
   82 00000048         getMaskWhile
   83 00000048 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
   84 0000004C 2A000001        BCS              endGetMaskWhile ; {
   85 00000050 E1A00220        LSR              R0, R0, #4  ; value >> 4
   86 00000054 EAFFFFFB        B                getMaskWhile ; }
   87 00000058         endGetMaskWhile
   88 00000058 E49D1004        POP              {R1}
   89 0000005C E12FFF1E        BX               LR
   90 00000060         



ARM Macro Assembler    Page 3 


   91 00000060         setValueFromMask
   92 00000060         ; Sets the color value under a congruent mask
   93 00000060         ; Expects masks of type FF
   94 00000060         ; Takes in a value and a location in form FF
   95 00000060         ; Parameters
   96 00000060         ; R0 = RGB
   97 00000060         ; R1 = mask
   98 00000060         ; R2 = colorValue
   99 00000060         ; Return Values
  100 00000060         ; R0 = RGB
  101 00000060 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  102 00000064         setMaskWhile
  103 00000064 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  104 00000068 2A000001        BCS              endSetMaskWhile ; {
  105 0000006C E1A02202        LSL              R2, R2, #4  ; value >> 4
  106 00000070 EAFFFFFB        B                setMaskWhile ; }
  107 00000074         endSetMaskWhile                      ;
  108 00000074 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  109 00000078 E12FFF1E        BX               LR
  110 0000007C         
  111 0000007C         copy
  112 0000007C         ; Copies between the original and duplicate image locati
                       ons
  113 0000007C         ; Parameters:
  114 0000007C         ;     R0 = row
  115 0000007C         ;    R1 = col
  116 0000007C E92D40CF        PUSH             {R0, R1, R2, R3, R6, R7, LR}
  117 00000080 E1A06000        MOV              R6, R0
  118 00000084 E1A07001        MOV              R7, R1
  119 00000088         
  120 00000088 EBFFFFFE        BL               getPicAddr
  121 0000008C E1A02000        MOV              R2, R0
  122 00000090 E1A00006        MOV              R0, R6
  123 00000094 E1A01007        MOV              R1, R7
  124 00000098 EBFFFFD8        BL               getPixel
  125 0000009C         
  126 0000009C E1A03000        MOV              R3, R0
  127 000000A0 E1A00006        MOV              R0, R6
  128 000000A4 E59F255C        LDR              R2, =copyAddress
  129 000000A8 EBFFFFD9        BL               putPixel
  130 000000AC         
  131 000000AC E8BD40CF        POP              {R0, R1, R2, R3, R6, R7, LR}
  132 000000B0 E12FFF1E        BX               LR
  133 000000B4         
  134 000000B4         lensEffectCopy
  135 000000B4 E92D40DF        PUSH             {R0, R1, R2, R3, R4, R6, R7, LR
}
  136 000000B8 E1A06000        MOV              R6, R0      ;
  137 000000BC E1A07001        MOV              R7, R1      ;
  138 000000C0         
  139 000000C0 EBFFFFFE        BL               getPicAddr
  140 000000C4 E1A04000        MOV              R4, R0
  141 000000C8         
  142 000000C8 E1A00006        MOV              R0, R6      ;
  143 000000CC         
  144 000000CC EB0000EB        BL               applyLens



ARM Macro Assembler    Page 4 


  145 000000D0 E59F2530        LDR              R2, =copyAddress ;
  146 000000D4 EBFFFFC9        BL               getPixel    ;
  147 000000D8         
  148 000000D8 E1A03000        MOV              R3, R0
  149 000000DC E1A00006        MOV              R0, R6      ;
  150 000000E0 E1A01007        MOV              R1, R7      ;
  151 000000E4 E1A02004        MOV              R2, R4
  152 000000E8 EBFFFFC9        BL               putPixel
  153 000000EC         
  154 000000EC E8BD40DF        POP              {R0, R1, R2, R3, R4, R6, R7, LR
}
  155 000000F0 E12FFF1E        BX               LR
  156 000000F4         
  157 000000F4         applyGreyScale
  158 000000F4         ; Wrapper to apply greyscale to original
  159 000000F4         ; Parameters:
  160 000000F4         ;    R0 = row
  161 000000F4         ;    R1 = col
  162 000000F4 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  163 000000F8 E1A04000        MOV              R4, R0
  164 000000FC EBFFFFFE        BL               getPicAddr
  165 00000100 E1A02000        MOV              R2, R0
  166 00000104 E1A00003        MOV              R0, R3
  167 00000108 EBFFFFBC        BL               getPixel
  168 0000010C EB0000BA        BL               greyScale
  169 00000110 E1A03000        MOV              R3, R0
  170 00000114 E1A00004        MOV              R0, R4
  171 00000118 EBFFFFBD        BL               putPixel
  172 0000011C E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  173 00000120 E12FFF1E        BX               LR
  174 00000124         
  175 00000124         applyToAll
  176 00000124         ; Loops through all (row, col) combinations and executes
                        the given subroutine.
  177 00000124         ; Paramenters:
  178 00000124         ;  R0 = routine address
  179 00000124 E92D400F        PUSH             {R0, R1, R2, R3, LR}
  180 00000128 E1A02000        MOV              R2, R0
  181 0000012C EBFFFFFE        BL               getPicWidth
  182 00000130 E1A01000        MOV              R1, R0
  183 00000134 EBFFFFFE        BL               getPicHeight
  184 00000138         
  185 00000138 E2400001        SUB              R0, R0, #1
  186 0000013C         row_whl
  187 0000013C E1A03000        MOV              R3, R0
  188 00000140 EBFFFFFE        BL               getPicWidth
  189 00000144 E1A01000        MOV              R1, R0
  190 00000148 E1A00003        MOV              R0, R3
  191 0000014C E2411001        SUB              R1, R1, #1
  192 00000150         col_whl
  193 00000150 E1A0E00F        MOV              LR, PC
  194 00000154 E12FFF12        BX               R2
  195 00000158 E2511001        SUBS             R1, R1, #1
  196 0000015C AAFFFFFB        BGE              col_whl
  197 00000160         end_col_whl
  198 00000160 E2500001        SUBS             R0, R0, #1
  199 00000164 AAFFFFF4        BGE              row_whl
  200 00000168         end_row_whl
  201 00000168 E8BD400F        POP              {R0, R1, R2, R3, LR}



ARM Macro Assembler    Page 5 


  202 0000016C E12FFF1E        BX               LR
  203 00000170         
  204 00000170         applyAdjust
  205 00000170         ; Parameters:
  206 00000170         ;    R0 = row
  207 00000170         ;    R1 = col
  208 00000170         
  209 00000170 E92D401F        PUSH             {R0, R1, R2, R3, R4, LR}
  210 00000174 E1A04000        MOV              R4, R0
  211 00000178 EBFFFFFE        BL               getPicAddr
  212 0000017C E1A02000        MOV              R2, R0
  213 00000180 E1A00004        MOV              R0, R4
  214 00000184 EBFFFF9D        BL               getPixel
  215 00000188 EB000045        BL               adjustPixelColor
  216 0000018C         
  217 0000018C E1A03000        MOV              R3, R0
  218 00000190 EBFFFFFE        BL               getPicAddr
  219 00000194 E1A02000        MOV              R2, R0
  220 00000198 E1A00004        MOV              R0, R4
  221 0000019C EBFFFF9C        BL               putPixel
  222 000001A0 E8BD401F        POP              {R0, R1, R2, R3, R4, LR}
  223 000001A4 E12FFF1E        BX               LR
  224 000001A8         
  225 000001A8         applyMotionBlur
  226 000001A8         ; Parameters:
  227 000001A8         ;     R0 = row
  228 000001A8         ;    R1 = col
  229 000001A8         
  230 000001A8 E92D4FD7        PUSH             {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  231 000001AC         
  232 000001AC E3A09001        LDR              R9, =1      ; count = 1 (curren
                                                            t pixel)
  233 000001B0         
  234 000001B0 E59F8454        LDR              R8, =radius
  235 000001B4 E5988000        LDR              R8, [R8]
  236 000001B8 E1A0A000        MOV              R10, R0
  237 000001BC E1A0B001        MOV              R11, R1
  238 000001C0         
  239 000001C0 E1A06000        MOV              R6, R0      ;
  240 000001C4 E1A07001        MOV              R7, R1      ;
  241 000001C8         
  242 000001C8 E59F2438        LDR              R2, =copyAddress
  243 000001CC         
  244 000001CC EBFFFF8B        BL               getPixel    ; 
  245 000001D0 E52D0004        PUSH             {R0}
  246 000001D4 E3560000        CMP              R6, #0
  247 000001D8         topLoop
  248 000001D8 4A00000B        BMI              endTopLoop
  249 000001DC E2566001        SUBS             R6, R6, #1
  250 000001E0 4A000007        BMI              topFinally
  251 000001E4 E2577001        SUBS             R7, R7, #1
  252 000001E8 4A000005        BMI              topFinally
  253 000001EC E1A00006        MOV              R0, R6
  254 000001F0 E1A01007        MOV              R1, R7
  255 000001F4 E59F240C        LDR              R2, =copyAddress
  256 000001F8 EBFFFF80        BL               getPixel
  257 000001FC E52D0004        PUSH             {R0}
  258 00000200 E2899001        ADD              R9, R9, #1



ARM Macro Assembler    Page 6 


  259 00000204         topFinally
  260 00000204 E2588001        SUBS             R8, R8, #1
  261 00000208 1AFFFFF2        BNE              topLoop
  262 0000020C         endTopLoop
  263 0000020C         
  264 0000020C E59F83F8        LDR              R8, =radius
  265 00000210 E5988000        LDR              R8, [R8]
  266 00000214 E1A0600A        MOV              R6, R10
  267 00000218 E1A0700B        MOV              R7, R11
  268 0000021C         
  269 0000021C E3560000        CMP              R6, #0
  270 00000220         bottomLoop
  271 00000220 4A00000F        BMI              endBottomLoop
  272 00000224 E2866001        ADD              R6, R6, #1
  273 00000228 EBFFFFFE        BL               getPicHeight
  274 0000022C E1560000        CMP              R6, R0
  275 00000230 AA000009        BGE              bottomFinally
  276 00000234 E2877001        ADD              R7, R7, #1
  277 00000238 EBFFFFFE        BL               getPicWidth
  278 0000023C E1570000        CMP              R7, R0
  279 00000240 AA000005        BGE              bottomFinally
  280 00000244 E1A00006        MOV              R0, R6      ;
  281 00000248 E1A01007        MOV              R1, R7      ;
  282 0000024C E59F23B4        LDR              R2, =copyAddress ;
  283 00000250 EBFFFF6A        BL               getPixel    ; 
  284 00000254 E52D0004        PUSH             {R0}
  285 00000258 E2899001        ADD              R9, R9, #1
  286 0000025C         bottomFinally
  287 0000025C E2588001        SUBS             R8, R8, #1
  288 00000260 1AFFFFEE        BNE              bottomLoop
  289 00000264         endBottomLoop
  290 00000264         
  291 00000264 E52D9004        PUSH             {R9}
  292 00000268 EB000036        BL               averageN
  293 0000026C         
  294 0000026C E1A0600A        MOV              R6, R10
  295 00000270 E1A0700B        MOV              R7, R11
  296 00000274         
  297 00000274 E1A03000        MOV              R3, R0
  298 00000278 EBFFFFFE        BL               getPicAddr
  299 0000027C E1A02000        MOV              R2, R0
  300 00000280 E1A00006        MOV              R0, R6
  301 00000284 E1A01007        MOV              R1, R7
  302 00000288 EBFFFF61        BL               putPixel
  303 0000028C         
  304 0000028C E49D9004        POP              {R9}
  305 00000290         clear_stack
  306 00000290 E49DC004        POP              {R12}
  307 00000294 E2599001        SUBS             R9, R9, #1
  308 00000298 1AFFFFFC        BNE              clear_stack
  309 0000029C         
  310 0000029C E8BD4FD7        POP              {R0, R1, R2, R4, R6, R7, R8, R9
, R10, R11, LR}
  311 000002A0 E12FFF1E        BX               LR
  312 000002A4         
  313 000002A4         ;<--------------Effects-------------->
  314 000002A4         
  315 000002A4         adjustPixelColor
  316 000002A4         ; adjustedVal = adjustPixel(value, contrast, brightness)



ARM Macro Assembler    Page 7 


                       
  317 000002A4         ; Applies a given contrast and brightness value
  318 000002A4         ; Parameters:
  319 000002A4         ; R0 = RGB
  320 000002A4 E92D400E        PUSH             {R1, R2, R3, LR}
  321 000002A8 E59F2360        LDR              R2, =contrast
  322 000002AC E5922000        LDR              R2, [R2]
  323 000002B0 E59F335C        LDR              R3, =brightness
  324 000002B4 E5933000        LDR              R3, [R3]
  325 000002B8 E92D000C        PUSH             {R2, R3}    ; save link registe
                                                            r and pass paramter
                                                            s contrast and brig
                                                            htness
  326 000002BC E1A03000        MOV              R3, R0
  327 000002C0         
  328 000002C0 E3A018FF        LDR              R1, = redMask ; mask = redMask
  329 000002C4 EBFFFF5D        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
  330 000002C8 E1A02000        MOV              R2, R0
  331 000002CC EB000012        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
  332 000002D0 E1A00003        MOV              R0, R3
  333 000002D4 EBFFFF61        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
  334 000002D8 E1A03000        MOV              R3, R0
  335 000002DC         
  336 000002DC E3A01CFF        LDR              R1, = greenMask
  337 000002E0 EBFFFF56        BL               getValueFromMask
  338 000002E4 E1A02000        MOV              R2, R0
  339 000002E8 EB00000B        BL               adjustColor
  340 000002EC E1A00003        MOV              R0, R3
  341 000002F0 EBFFFF5A        BL               setValueFromMask
  342 000002F4 E1A03000        MOV              R3, R0
  343 000002F8         
  344 000002F8         
  345 000002F8 E3A010FF        LDR              R1, = blueMask
  346 000002FC EBFFFF4F        BL               getValueFromMask
  347 00000300 E1A02000        MOV              R2, R0
  348 00000304 EB000004        BL               adjustColor
  349 00000308 E1A00003        MOV              R0, R3
  350 0000030C EBFFFF53        BL               setValueFromMask
  351 00000310         
  352 00000310 E8BD000C        POP              {R2, R3}
  353 00000314 E8BD400E        POP              {R1, R2, R3, LR}
  354 00000318 E12FFF1E        BX               LR
  355 0000031C         
  356 0000031C         adjustColor
  357 0000031C         ; val = adjustColor(color, contrast, brightness)
  358 0000031C         ; applies the brightness contrast formula
  359 0000031C         ; Paramters:
  360 0000031C         ; R2 = color
  361 0000031C         ; Stack > contrast, brightness that order.
  362 0000031C         ; Return Values
  363 0000031C         ; R2 = color
  364 0000031C         ; Stack > contrast, brightness that order.
  365 0000031C E92D0030        STMFD            SP!, {R4, R5}



ARM Macro Assembler    Page 8 


  366 00000320 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
  367 00000324 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
  368 00000328 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  369 0000032C E1A02222        LSR              R2, R2, #4  ; color /= 16
  370 00000330 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  371 00000334 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  372 00000338 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  373 0000033C C3A020FF        LDRGT            R2, =255    ; color = 255
  374 00000340 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  375 00000344 E12FFF1E        BX               LR
  376 00000348         
  377 00000348         averageN
  378 00000348         ; Takes in five RGB values and computes their blur value
                       .
  379 00000348         ; Parameters:
  380 00000348         ; Stack > RGB value count    | 0 < count
  381 00000348         ; Stack > count RGB values
  382 00000348         ; Returns:
  383 00000348         ; R0 = average
  384 00000348         
  385 00000348 E89D0001        LDMFD            SP, {R0}
  386 0000034C E92D407E        STMFD            SP!, {R1 - R6, LR}
  387 00000350 E3A04007        LDR              R4, =7
  388 00000354 E1A03000        MOV              R3, R0
  389 00000358 E0845003        ADD              R5, R4, R3
  390 0000035C E3A06000        LDR              R6, =0
  391 00000360 E3A02000        LDR              R2, =0
  392 00000364 E3A018FF        LDR              R1, =redMask
  393 00000368 EB000006        BL               averageColor
  394 0000036C E3A01CFF        LDR              R1, =greenMask
  395 00000370 EB000004        BL               averageColor
  396 00000374 E3A010FF        LDR              R1, =blueMask
  397 00000378 EB000002        BL               averageColor
  398 0000037C E1A00006        MOV              R0, R6
  399 00000380 E8BD407E        LDMFD            SP!, {R1 - R6, LR}
  400 00000384 E12FFF1E        BX               LR
  401 00000388         averageColor
  402 00000388         forN
  403 00000388 E1550004        CMP              R5, R4
  404 0000038C 0A000006        BEQ              endForN
  405 00000390 E79D0105        LDR              R0, [SP, R5, LSL #2]
  406 00000394 E52DE004        PUSH             {LR}
  407 00000398 EBFFFF28        BL               getValueFromMask
  408 0000039C E49DE004        POP              {LR}
  409 000003A0 E0822000        ADD              R2, R2, R0
  410 000003A4 E2555001        SUBS             R5, R5, #1
  411 000003A8 EAFFFFF6        B                forN
  412 000003AC         endForN
  413 000003AC E52D1004        PUSH             {R1}
  414 000003B0 E1A00002        MOV              R0, R2
  415 000003B4 E1A01003        MOV              R1, R3
  416 000003B8 E52DE004        PUSH             {LR}



ARM Macro Assembler    Page 9 


  417 000003BC EB000072        BL               divide
  418 000003C0 E49DE004        POP              {LR}
  419 000003C4 E3510000        CMP              R1, #0
  420 000003C8 43A01000        LDRMI            R1, =0
  421 000003CC E35100FF        CMP              R1, #255
  422 000003D0 C3A010FF        LDRGT            R1, =255
  423 000003D4 E1A00006        MOV              R0, R6
  424 000003D8 E1A02001        MOV              R2, R1
  425 000003DC E49D1004        POP              {R1}
  426 000003E0 E52DE004        PUSH             {LR}
  427 000003E4 EBFFFF1D        BL               setValueFromMask
  428 000003E8 E49DE004        POP              {LR}
  429 000003EC E1A06000        MOV              R6, R0
  430 000003F0 E3A02000        LDR              R2, =0
  431 000003F4 E0845003        ADD              R5, R4, R3
  432 000003F8 E12FFF1E        BX               LR
  433 000003FC         
  434 000003FC         greyScale
  435 000003FC         ; Converts a pixel to a light intensity value.
  436 000003FC         ; Paramteters
  437 000003FC         ;    R0 = RGB
  438 000003FC         ; Return
  439 000003FC         ;    R0 = Light intesity
  440 000003FC E92D401E        PUSH             {R1, R2, R3, R4, LR}
  441 00000400 E1A02000        MOV              R2, R0
  442 00000404 E3A03000        LDR              R3, =0
  443 00000408         
  444 00000408 E3A018FF        LDR              R1, =redMask
  445 0000040C EBFFFF0B        BL               getValueFromMask
  446 00000410 E59FC204        LDR              R12, =299
  447 00000414 E1A01000        MOV              R1, R0
  448 00000418 E0000C91        MUL              R0, R1, R12
  449 0000041C E0833000        ADD              R3, R3, R0
  450 00000420         
  451 00000420 E1A00002        MOV              R0, R2
  452 00000424 E3A01CFF        LDR              R1, =greenMask
  453 00000428 EBFFFF04        BL               getValueFromMask
  454 0000042C E59FC1EC        LDR              R12, =587
  455 00000430 E1A01000        MOV              R1, R0
  456 00000434 E0000C91        MUL              R0, R1, R12
  457 00000438 E0833000        ADD              R3, R3, R0
  458 0000043C         
  459 0000043C E1A00002        MOV              R0, R2
  460 00000440 E3A010FF        LDR              R1, =blueMask
  461 00000444 EBFFFEFD        BL               getValueFromMask
  462 00000448 E3A0C072        LDR              R12, =114
  463 0000044C E1A01000        MOV              R1, R0
  464 00000450 E0000C91        MUL              R0, R1, R12
  465 00000454 E0833000        ADD              R3, R3, R0
  466 00000458         
  467 00000458 E1A00003        MOV              R0, R3
  468 0000045C E3A01FFA        LDR              R1, =1000
  469 00000460 EB000049        BL               divide
  470 00000464         
  471 00000464 E1A00001        MOV              R0, R1
  472 00000468 E1A01400        LSL              R1, R0, #8
  473 0000046C E0811000        ADD              R1, R1, R0
  474 00000470 E1A01401        LSL              R1, R1, #8
  475 00000474 E0800001        ADD              R0, R0, R1



ARM Macro Assembler    Page 10 


  476 00000478         
  477 00000478 E8BD401E        POP              {R1, R2, R3, R4, LR}
  478 0000047C E12FFF1E        BX               LR
  479 00000480         
  480 00000480         applyLens
  481 00000480         ; R0 = y
  482 00000480         ; R1 = X
  483 00000480         
  484 00000480         normalize_origin
  485 00000480 E92D4E1F        PUSH             {r0, r1, R2, R3, R4, R9, R10, R
11, LR}
  486 00000484         
  487 00000484 E3A04014        LDR              R4, =lensq
  488 00000488 EBFFFFFE        BL               getPicHeight
  489 0000048C E1A000A0        LSR              R0, R0, #1
  490 00000490 E1A02000        MOV              R2, R0
  491 00000494         
  492 00000494 EBFFFFFE        BL               getPicWidth
  493 00000498 E1A000A0        LSR              R0, R0, #1
  494 0000049C E1A03000        MOV              R3, R0
  495 000004A0         
  496 000004A0 E8BD0003        POP              {r0, r1}
  497 000004A4         
  498 000004A4 E0400002        SUB              R0, R0, R2  ; y -= centery
  499 000004A8 E0411003        SUB              R1, R1, R3  ; x -= centery
  500 000004AC         
  501 000004AC E1A0A000        MOV              R10, R0     ; save y
  502 000004B0 E1A0B001        MOV              R11, R1     ; save x
  503 000004B4         
  504 000004B4 EB00002C        BL               distanceSqr
  505 000004B8 EB000017        BL               sqrt
  506 000004BC E1A09000        MOV              R9, R0
  507 000004C0         
  508 000004C0 E1A0000A        MOV              R0, R10
  509 000004C4 E1540009        CMP              R4, R9
  510 000004C8 B0000094        MULLT            R0, R4, R0
  511 000004CC A0000099        MULGE            R0, R9, R0
  512 000004D0 E1A01009        MOV              R1, R9
  513 000004D4 EB00002C        BL               divide
  514 000004D8 E04AA001        SUB              R10, R10, R1
  515 000004DC         
  516 000004DC E1A0000B        MOV              R0, R11
  517 000004E0 E1540009        CMP              R4, R9
  518 000004E4 B0000094        MULLT            R0, R4, R0
  519 000004E8 A0000099        MULGE            R0, R9, R0
  520 000004EC E1A01009        MOV              R1, R9
  521 000004F0 EB000025        BL               divide
  522 000004F4 E04BB001        SUB              R11, R11, R1
  523 000004F8         
  524 000004F8 EBFFFFFE        BL               getPicHeight
  525 000004FC E1A000A0        LSR              R0, R0, #1
  526 00000500 E08AA000        ADD              R10, R10, R0
  527 00000504         
  528 00000504 EBFFFFFE        BL               getPicWidth
  529 00000508 E1A000A0        LSR              R0, R0, #1
  530 0000050C E08B1000        ADD              R1, R11, R0
  531 00000510         
  532 00000510 E1A0000A        MOV              R0, R10
  533 00000514         



ARM Macro Assembler    Page 11 


  534 00000514         
  535 00000514 E8BD4E1C        POP              {R2, R3, R4, R9, R10, R11, LR}
  536 00000518 E12FFF1E        BX               LR
  537 0000051C         
  538 0000051C         
  539 0000051C         ;<---------------Square root methods---------------->
  540 0000051C         
  541 0000051C         sqrt
  542 0000051C         ; Finds the square root of a number
  543 0000051C         ; Parameters:
  544 0000051C         ;  R0 = number
  545 0000051C         ; Outputs:
  546 0000051C         ;  R0 = sqare root
  547 0000051C E3500001        CMP              R0, #1      ; if the number is 
                                                            one return one
  548 00000520 012FFF1E        BXEQ             LR
  549 00000524         
  550 00000524 E92D481E        PUSH             {R1, R2, R3, R4, R11, LR}
  551 00000528 E1A0B000        MOV              R11, R0     ; save number
  552 0000052C E3A03000        LDR              R3, =0      ; temp = 0
  553 00000530 E1A02000        MOV              R2, R0      ; x = S
  554 00000534         
  555 00000534         find_sqr_whl
  556 00000534 E1A020A2        LSR              R2, R2, #1  ; x /= 2
  557 00000538 E0524003        SUBS             R4, R2, R3
  558 0000053C 0A000007        BEQ              end_sqr_whl ; return x
  559 00000540 E3540001        CMP              R4, #1
  560 00000544 0A000005        BEQ              end_sqr_whl
  561 00000548 E1A03002        MOV              R3, R2      ; else: temp = x
  562 0000054C E1A01002        MOV              R1, R2      ; 
  563 00000550 E1A0000B        MOV              R0, R11     ;
  564 00000554 EB00000C        BL               divide      ; 
  565 00000558 E0822001        ADD              R2, R2, R1  ;  x = x + divide(n
                                                            umber, x)
  566 0000055C EAFFFFF4        B                find_sqr_whl
  567 00000560         end_sqr_whl
  568 00000560         
  569 00000560 E1A00002        MOV              R0, R2
  570 00000564 E8BD481E        POP              {R1, R2, R3, R4, R11, LR}
  571 00000568 E12FFF1E        BX               LR
  572 0000056C         
  573 0000056C         distanceSqr
  574 0000056C         ; Parameters:
  575 0000056C         ;  R0 = relativex
  576 0000056C         ;  R1 = relativey
  577 0000056C         ; Return:
  578 0000056C         ;  R0 = distance^2
  579 0000056C E92D0006        PUSH             {R1, R2}
  580 00000570 E1A02000        MOV              R2, R0
  581 00000574 E0000092        MUL              R0, R2, R0
  582 00000578 E1A02001        MOV              R2, R1
  583 0000057C E0010192        MUL              R1, R2, R1
  584 00000580 E0800001        ADD              R0, R0, R1
  585 00000584 E8BD0006        POP              {R1, R2}
  586 00000588 E12FFF1E        BX               LR
  587 0000058C         
  588 0000058C         
  589 0000058C         
  590 0000058C         ;<-------------- Division Method -------------->;



ARM Macro Assembler    Page 12 


  591 0000058C         ; taken from my group work in the labs
  592 0000058C         divide                               ;division loop, lea
                                                            ves Quotient in R1 
                                                            and Remainder in R0
                                                            
  593 0000058C E92D401C        STMFD            SP!, {R2, R3, R4, LR}
  594 00000590         
  595 00000590 E3A04001        LDR              R4, =1      ;negative flag
  596 00000594 E3500000        CMP              R0, #0      ;if dividend < 0
  597 00000598 42644000        NEGMI            R4, R4      ; flag *= -1
  598 0000059C 42600000        NEGMI            R0, R0      ; dividend *= -1
  599 000005A0 E3510000        CMP              R1, #0      ; if divisor < 0
  600 000005A4 42644000        NEGMI            R4, R4      ; flag *= -1
  601 000005A8 42611000        NEGMI            R1, R1      ; divisor *= -1
  602 000005AC         
  603 000005AC E3A02000        LDR              R2, =0      ; Q        ;set tem
                                                            p quotient to 0
  604 000005B0 E3A03001        LDR              R3, =1      ; T        ;set pla
                                                            ceholder to 1
  605 000005B4         
  606 000005B4 E3510000        CMP              R1, #0      ;         ;if Divis
                                                            or == 0
  607 000005B8 059F0064        LDREQ            R0, =-1     ;load -1 into remai
                                                            nder
  608 000005BC 01A02000        MOVEQ            R2, R0      ;load -1 into quoti
                                                            ent
  609 000005C0 0A00000B        BEQ              div_zero    ;stop
  610 000005C4         
  611 000005C4         alignLoop                            ;else
  612 000005C4 E1500001        CMP              R0, R1      ;while dividend>div
                                                            isor
  613 000005C8 BA000002        BLT              endAlignLoop ;{
  614 000005CC E1A01081        LSL              R1, #1      ; multiply divisor 
                                                            by 2
  615 000005D0 E1A03083        LSL              R3, #1      ; multiply placehol
                                                            der by 2
  616 000005D4 EAFFFFFA        B                alignLoop   ;}
  617 000005D8         endAlignLoop
  618 000005D8         
  619 000005D8         division_whl                         ;{
  620 000005D8 E1A010A1        LSR              R1, #1      ;divide divisor by 
                                                            2
  621 000005DC E1B030A3        LSRS             R3, #1      ;divide r3 by 2 and
                                                             set flag
  622 000005E0 2A000003        BCS              end_division_whl ;while carry f
                                                            lag not set{ 
  623 000005E4 E1500001        CMP              R0, R1      ; if(dividend>=divi
                                                            sor):
  624 000005E8 20400001        SUBHS            R0, R0, R1  ;  subtract dividen
                                                            d from divisor
  625 000005EC 20822003        ADDHS            R2, R2, R3  ;  add placeholder 
                                                            to temp quotient
  626 000005F0 EAFFFFF8        B                division_whl ; 
  627 000005F4         end_division_whl                     ; }
  628 000005F4         div_zero
  629 000005F4 E1A01002        MOV              R1, R2
  630 000005F8 E0010194        MUL              R1, R4, R1  ; quotient *= negat
                                                            ive flag
  631 000005FC E8BD401C        LDMFD            SP!, {R2, R3, R4, LR}



ARM Macro Assembler    Page 13 


  632 00000600 E12FFF1E        BX               LR
  633 00000604         
  634 00000604         ;<-----------------Main---------------->
  635 00000604         start
  636 00000604         
  637 00000604         ;LDR R0, =applyAdjust
  638 00000604         ;BL applyToAll
  639 00000604         ;LDR R0, =copy
  640 00000604         ;BL applyToAll
  641 00000604         ;LDR R0, =applyMotionBlur
  642 00000604         ;BL applyToAll
  643 00000604         ;LDR R0, =lensEffectCopy
  644 00000604         ;BL applyToAll
  645 00000604         ;LDR R0, = applyGreyScale
  646 00000604         ;BL applyToAll
  647 00000604         ;BL putPic  ; re-display the updated image
  648 00000604         
  649 00000604 EAFFFFFE 
                       stop    B                stop
  650 00000608         
  651 00000608         ;<----------------Memory--------------->
  652 00000608         
  653 00000608 A1016300 
              00000000 
              00000000 
              00000000 
              00000000 
              0000012B 
              0000024B 
              FFFFFFFF         AREA             Variables, DATA, READWRITE
  654 00000000         
  655 00000000 00000002 
                       radius  DCD              2
  656 00000004 00000011 
                       contrast
                               DCD              17
  657 00000008 00000064 
                       brightness
                               DCD              100
  658 0000000C         
  659 0000000C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\bonuseffect.d -o.\bonu
seffect.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine
="NO_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INT
VEC SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\b
onuseffect.lst BonusEffect.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file BonusEffect.s
   Uses
      None
Comment: MotionBlur unused
adjustColor 0000031C

Symbol: adjustColor
   Definitions
      At line 356 in file BonusEffect.s
   Uses
      At line 331 in file BonusEffect.s
      At line 339 in file BonusEffect.s
      At line 348 in file BonusEffect.s

adjustPixelColor 000002A4

Symbol: adjustPixelColor
   Definitions
      At line 315 in file BonusEffect.s
   Uses
      At line 215 in file BonusEffect.s
Comment: adjustPixelColor used once
alignLoop 000005C4

Symbol: alignLoop
   Definitions
      At line 611 in file BonusEffect.s
   Uses
      At line 616 in file BonusEffect.s
Comment: alignLoop used once
applyAdjust 00000170

Symbol: applyAdjust
   Definitions
      At line 204 in file BonusEffect.s
   Uses
      None
Comment: applyAdjust unused
applyGreyScale 000000F4

Symbol: applyGreyScale
   Definitions
      At line 157 in file BonusEffect.s
   Uses
      None
Comment: applyGreyScale unused
applyLens 00000480

Symbol: applyLens
   Definitions
      At line 480 in file BonusEffect.s
   Uses
      At line 144 in file BonusEffect.s
Comment: applyLens used once
applyMotionBlur 000001A8



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: applyMotionBlur
   Definitions
      At line 225 in file BonusEffect.s
   Uses
      None
Comment: applyMotionBlur unused
applyToAll 00000124

Symbol: applyToAll
   Definitions
      At line 175 in file BonusEffect.s
   Uses
      None
Comment: applyToAll unused
averageColor 00000388

Symbol: averageColor
   Definitions
      At line 401 in file BonusEffect.s
   Uses
      At line 393 in file BonusEffect.s
      At line 395 in file BonusEffect.s
      At line 397 in file BonusEffect.s

averageN 00000348

Symbol: averageN
   Definitions
      At line 377 in file BonusEffect.s
   Uses
      At line 292 in file BonusEffect.s
Comment: averageN used once
bottomFinally 0000025C

Symbol: bottomFinally
   Definitions
      At line 286 in file BonusEffect.s
   Uses
      At line 275 in file BonusEffect.s
      At line 279 in file BonusEffect.s

bottomLoop 00000220

Symbol: bottomLoop
   Definitions
      At line 270 in file BonusEffect.s
   Uses
      At line 288 in file BonusEffect.s
Comment: bottomLoop used once
clear_stack 00000290

Symbol: clear_stack
   Definitions
      At line 305 in file BonusEffect.s
   Uses
      At line 308 in file BonusEffect.s
Comment: clear_stack used once
col_whl 00000150



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: col_whl
   Definitions
      At line 192 in file BonusEffect.s
   Uses
      At line 196 in file BonusEffect.s
Comment: col_whl used once
copy 0000007C

Symbol: copy
   Definitions
      At line 111 in file BonusEffect.s
   Uses
      None
Comment: copy unused
distanceSqr 0000056C

Symbol: distanceSqr
   Definitions
      At line 573 in file BonusEffect.s
   Uses
      At line 504 in file BonusEffect.s
Comment: distanceSqr used once
div_zero 000005F4

Symbol: div_zero
   Definitions
      At line 628 in file BonusEffect.s
   Uses
      At line 609 in file BonusEffect.s
Comment: div_zero used once
divide 0000058C

Symbol: divide
   Definitions
      At line 592 in file BonusEffect.s
   Uses
      At line 417 in file BonusEffect.s
      At line 469 in file BonusEffect.s
      At line 513 in file BonusEffect.s
      At line 521 in file BonusEffect.s
      At line 564 in file BonusEffect.s

division_whl 000005D8

Symbol: division_whl
   Definitions
      At line 619 in file BonusEffect.s
   Uses
      At line 626 in file BonusEffect.s
Comment: division_whl used once
endAlignLoop 000005D8

Symbol: endAlignLoop
   Definitions
      At line 617 in file BonusEffect.s
   Uses
      At line 613 in file BonusEffect.s
Comment: endAlignLoop used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

endBottomLoop 00000264

Symbol: endBottomLoop
   Definitions
      At line 289 in file BonusEffect.s
   Uses
      At line 271 in file BonusEffect.s
Comment: endBottomLoop used once
endForN 000003AC

Symbol: endForN
   Definitions
      At line 412 in file BonusEffect.s
   Uses
      At line 404 in file BonusEffect.s
Comment: endForN used once
endGetMaskWhile 00000058

Symbol: endGetMaskWhile
   Definitions
      At line 87 in file BonusEffect.s
   Uses
      At line 84 in file BonusEffect.s
Comment: endGetMaskWhile used once
endSetMaskWhile 00000074

Symbol: endSetMaskWhile
   Definitions
      At line 107 in file BonusEffect.s
   Uses
      At line 104 in file BonusEffect.s
Comment: endSetMaskWhile used once
endTopLoop 0000020C

Symbol: endTopLoop
   Definitions
      At line 262 in file BonusEffect.s
   Uses
      At line 248 in file BonusEffect.s
Comment: endTopLoop used once
end_col_whl 00000160

Symbol: end_col_whl
   Definitions
      At line 197 in file BonusEffect.s
   Uses
      None
Comment: end_col_whl unused
end_division_whl 000005F4

Symbol: end_division_whl
   Definitions
      At line 627 in file BonusEffect.s
   Uses
      At line 622 in file BonusEffect.s
Comment: end_division_whl used once
end_row_whl 00000168

Symbol: end_row_whl



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 200 in file BonusEffect.s
   Uses
      None
Comment: end_row_whl unused
end_sqr_whl 00000560

Symbol: end_sqr_whl
   Definitions
      At line 567 in file BonusEffect.s
   Uses
      At line 558 in file BonusEffect.s
      At line 560 in file BonusEffect.s

find_sqr_whl 00000534

Symbol: find_sqr_whl
   Definitions
      At line 555 in file BonusEffect.s
   Uses
      At line 566 in file BonusEffect.s
Comment: find_sqr_whl used once
forN 00000388

Symbol: forN
   Definitions
      At line 402 in file BonusEffect.s
   Uses
      At line 411 in file BonusEffect.s
Comment: forN used once
getMaskWhile 00000048

Symbol: getMaskWhile
   Definitions
      At line 82 in file BonusEffect.s
   Uses
      At line 86 in file BonusEffect.s
Comment: getMaskWhile used once
getPixel 00000000

Symbol: getPixel
   Definitions
      At line 22 in file BonusEffect.s
   Uses
      At line 124 in file BonusEffect.s
      At line 146 in file BonusEffect.s
      At line 167 in file BonusEffect.s
      At line 214 in file BonusEffect.s
      At line 244 in file BonusEffect.s
      At line 256 in file BonusEffect.s
      At line 283 in file BonusEffect.s

getValueFromMask 00000040

Symbol: getValueFromMask
   Definitions
      At line 70 in file BonusEffect.s
   Uses
      At line 329 in file BonusEffect.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 337 in file BonusEffect.s
      At line 346 in file BonusEffect.s
      At line 407 in file BonusEffect.s
      At line 445 in file BonusEffect.s
      At line 453 in file BonusEffect.s
      At line 461 in file BonusEffect.s

greyScale 000003FC

Symbol: greyScale
   Definitions
      At line 434 in file BonusEffect.s
   Uses
      At line 168 in file BonusEffect.s
Comment: greyScale used once
lensEffectCopy 000000B4

Symbol: lensEffectCopy
   Definitions
      At line 134 in file BonusEffect.s
   Uses
      None
Comment: lensEffectCopy unused
normalize_origin 00000480

Symbol: normalize_origin
   Definitions
      At line 484 in file BonusEffect.s
   Uses
      None
Comment: normalize_origin unused
putPixel 00000014

Symbol: putPixel
   Definitions
      At line 38 in file BonusEffect.s
   Uses
      At line 129 in file BonusEffect.s
      At line 152 in file BonusEffect.s
      At line 171 in file BonusEffect.s
      At line 221 in file BonusEffect.s
      At line 302 in file BonusEffect.s

rowColToIndex 00000028

Symbol: rowColToIndex
   Definitions
      At line 55 in file BonusEffect.s
   Uses
      At line 32 in file BonusEffect.s
      At line 49 in file BonusEffect.s

row_whl 0000013C

Symbol: row_whl
   Definitions
      At line 186 in file BonusEffect.s
   Uses
      At line 199 in file BonusEffect.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: row_whl used once
setMaskWhile 00000064

Symbol: setMaskWhile
   Definitions
      At line 102 in file BonusEffect.s
   Uses
      At line 106 in file BonusEffect.s
Comment: setMaskWhile used once
setValueFromMask 00000060

Symbol: setValueFromMask
   Definitions
      At line 91 in file BonusEffect.s
   Uses
      At line 333 in file BonusEffect.s
      At line 341 in file BonusEffect.s
      At line 350 in file BonusEffect.s
      At line 427 in file BonusEffect.s

sqrt 0000051C

Symbol: sqrt
   Definitions
      At line 541 in file BonusEffect.s
   Uses
      At line 505 in file BonusEffect.s
Comment: sqrt used once
start 00000604

Symbol: start
   Definitions
      At line 635 in file BonusEffect.s
   Uses
      At line 8 in file BonusEffect.s
Comment: start used once
stop 00000604

Symbol: stop
   Definitions
      At line 649 in file BonusEffect.s
   Uses
      At line 649 in file BonusEffect.s
Comment: stop used once
topFinally 00000204

Symbol: topFinally
   Definitions
      At line 259 in file BonusEffect.s
   Uses
      At line 250 in file BonusEffect.s
      At line 252 in file BonusEffect.s

topLoop 000001D8

Symbol: topLoop
   Definitions
      At line 247 in file BonusEffect.s
   Uses



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 261 in file BonusEffect.s
Comment: topLoop used once
48 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Variables 00000000

Symbol: Variables
   Definitions
      At line 653 in file BonusEffect.s
   Uses
      None
Comment: Variables unused
brightness 00000008

Symbol: brightness
   Definitions
      At line 657 in file BonusEffect.s
   Uses
      At line 323 in file BonusEffect.s
Comment: brightness used once
contrast 00000004

Symbol: contrast
   Definitions
      At line 656 in file BonusEffect.s
   Uses
      At line 321 in file BonusEffect.s
Comment: contrast used once
radius 00000000

Symbol: radius
   Definitions
      At line 655 in file BonusEffect.s
   Uses
      At line 234 in file BonusEffect.s
      At line 264 in file BonusEffect.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

blueMask 000000FF

Symbol: blueMask
   Definitions
      At line 13 in file BonusEffect.s
   Uses
      At line 345 in file BonusEffect.s
      At line 396 in file BonusEffect.s
      At line 460 in file BonusEffect.s

copyAddress A1016300

Symbol: copyAddress
   Definitions
      At line 10 in file BonusEffect.s
   Uses
      At line 128 in file BonusEffect.s
      At line 145 in file BonusEffect.s
      At line 242 in file BonusEffect.s
      At line 255 in file BonusEffect.s
      At line 282 in file BonusEffect.s

greenMask 0000FF00

Symbol: greenMask
   Definitions
      At line 12 in file BonusEffect.s
   Uses
      At line 336 in file BonusEffect.s
      At line 394 in file BonusEffect.s
      At line 452 in file BonusEffect.s

lensn 00000001

Symbol: lensn
   Definitions
      At line 16 in file BonusEffect.s
   Uses
      None
Comment: lensn unused
lensq 00000014

Symbol: lensq
   Definitions
      At line 17 in file BonusEffect.s
   Uses
      At line 487 in file BonusEffect.s
Comment: lensq used once
redMask 00FF0000

Symbol: redMask
   Definitions
      At line 11 in file BonusEffect.s
   Uses
      At line 328 in file BonusEffect.s
      At line 392 in file BonusEffect.s
      At line 444 in file BonusEffect.s

xhalf 00000028



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: xhalf
   Definitions
      At line 14 in file BonusEffect.s
   Uses
      None
Comment: xhalf unused
yhalf 00000031

Symbol: yhalf
   Definitions
      At line 15 in file BonusEffect.s
   Uses
      None
Comment: yhalf unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file BonusEffect.s
   Uses
      At line 120 in file BonusEffect.s
      At line 139 in file BonusEffect.s
      At line 164 in file BonusEffect.s
      At line 211 in file BonusEffect.s
      At line 218 in file BonusEffect.s
      At line 298 in file BonusEffect.s

getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file BonusEffect.s
   Uses
      At line 183 in file BonusEffect.s
      At line 273 in file BonusEffect.s
      At line 488 in file BonusEffect.s
      At line 524 in file BonusEffect.s

getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file BonusEffect.s
   Uses
      At line 65 in file BonusEffect.s
      At line 181 in file BonusEffect.s
      At line 188 in file BonusEffect.s
      At line 277 in file BonusEffect.s
      At line 492 in file BonusEffect.s
      At line 528 in file BonusEffect.s

main 00000000

Symbol: main
   Definitions
      At line 3 in file BonusEffect.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file BonusEffect.s
   Uses
      None
Comment: putPic unused
5 symbols
404 symbols in table
