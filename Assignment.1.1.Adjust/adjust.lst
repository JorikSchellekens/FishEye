


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Adjust, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000         getPixelError
   11 00000000 E59F0140        LDR              R0, =-1
   12 00000004 E59F113C        LDR              R1, =-1
   13 00000008 EA000002        B                getPixelFinally
   14 0000000C         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   15 0000000C         ; Parameters:
   16 0000000C         ; R0 = row
   17 0000000C         ; R1 = column
   18 0000000C         ; Returns:
   19 0000000C         ; R0 = RGBvalue
   20 0000000C E92D4000        STMFD            SP!, {LR}
   21 00000010         
   22 00000010         ;CMP R0, R5  ; if (row >= height || col >= width):
   23 00000010         ;BHS getPixelError ; return -1; (throw error)
   24 00000010         ;CMP R1, R6
   25 00000010         ;BHS getPixelError
   26 00000010         
   27 00000010 EA000002        B                rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   28 00000014 E7940100        LDR              R0, [R4, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   29 00000018         getPixelFinally
   30 00000018 E8BD4000        LDMFD            SP!, {LR}
   31 0000001C E12FFF1E        BX               LR
   32 00000020         
   33 00000020         rowColToIndex
   34 00000020         ; converts row and colum to index
   35 00000020         ; Parameters
   36 00000020         ; R0 = row
   37 00000020         ; R1 = col
   38 00000020         ; Return Values
   39 00000020         ; R0 addressIndex
   40 00000020 E0000091        MUL              R0, R1, R0  ; addressOffset = r
                                                            ow * col
   41 00000024 E0800001        ADD              R0, R0, R1  ; addressOffset += 
                                                            col
   42 00000028 E12FFF1E        BX               LR
   43 0000002C         
   44 0000002C         putPixel
   45 0000002C         ; Stores a given RGB to an pixel of at row, col
   46 0000002C         ; Parameters
   47 0000002C         ; R0 = row
   48 0000002C         ; R1 = col
   49 0000002C         ; R2 = RGB
   50 0000002C E92D4000        STMFD            SP!, {LR}



ARM Macro Assembler    Page 2 


   51 00000030         
   52 00000030 EAFFFFFA        B                rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   53 00000034 E7842100        STR              R2, [R4, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            )
   54 00000038         
   55 00000038 E8BD4000        LDMFD            SP!, {LR}
   56 0000003C E12FFF1E        BX               LR
   57 00000040         
   58 00000040         adjustPixel
   59 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   60 00000040         ; Applies a given contrast and brightness value
   61 00000040         ; Parameters:
   62 00000040         ; R0 = RGB
   63 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   64 00000040         ; R3 = brightness
   65 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   66 00000044         
   67 00000044 E3A018FF        LDR              R1, = 0x00FF0000 
                                                            ; mask = redMask
   68 00000048 EA000016        B                getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   69 0000004C EA00000A        B                adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   70 00000050 EA00001A        B                setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   71 00000054         
   72 00000054 E3A01CFF        LDR              R1, = 0x0000FF00
   73 00000058 EA000012        B                getValueFromMask
   74 0000005C EA000006        B                adjustColor
   75 00000060 EA000016        B                setValueFromMask
   76 00000064         
   77 00000064 E3A01CFF        LDR              R1, = 0x0000FF00
   78 00000068 EA00000E        B                getValueFromMask
   79 0000006C EA000002        B                adjustColor
   80 00000070 EA000012        B                setValueFromMask
   81 00000074         
   82 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   83 00000078 E12FFF1E        BX               LR
   84 0000007C         
   85 0000007C         adjustColor
   86 0000007C         ; val = adjustColor(color, contrast, brightness)
   87 0000007C         ; applies the brightness contrast formula
   88 0000007C         ; Paramters:
   89 0000007C         ; R2 = color
   90 0000007C         ; Stack > contrast, brightness that order.
   91 0000007C         ; Return Values
   92 0000007C         ; R2 = color



ARM Macro Assembler    Page 3 


   93 0000007C         ; Stack > contrast, brightness that order.
   94 0000007C E92D0030        STMFD            SP!, {R4, R5}
   95 00000080 E51D400C        LDR              R4, [SP, #-12] ; contrast = sta
                                                            ck.getParameter()
   96 00000084 E51D5008        LDR              R5, [SP, #-8] ; brightness = st
                                                            ack.getParameter()
   97 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
   98 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
   99 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  100 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  101 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  102 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  103 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  104 000000A4 E12FFF1E        BX               LR
  105 000000A8         
  106 000000A8         
  107 000000A8         
  108 000000A8         
  109 000000A8         getValueFromMask
  110 000000A8         ; Gets the color value under a congruent mask
  111 000000A8         ; Expects masks of type FF
  112 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  113 000000A8         ; Parameters
  114 000000A8         ; R0 = RGB
  115 000000A8         ; R1 = mask
  116 000000A8         ; Return Values
  117 000000A8         ; R2 = colorValue
  118 000000A8 E1C02001        BIC              R2, R0, R1  ; value = RGB & mas
                                                            k
  119 000000AC         getMaskWhile
  120 000000AC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  121 000000B0 2A000001        BCS              endGetMaskWhile ; {
  122 000000B4 E1A02222        LSR              R2, R2, #4  ; value >> 4
  123 000000B8 EAFFFFFB        B                getMaskWhile ; }
  124 000000BC         endGetMaskWhile
  125 000000BC E12FFF1E        BX               LR
  126 000000C0         
  127 000000C0         setValueFromMask
  128 000000C0         ; Sets the color value under a congruent mask
  129 000000C0         ; Expects masks of type FF
  130 000000C0         ; Takes in a value and a location in form FF
  131 000000C0         ; Parameters
  132 000000C0         ; R0 = RGB
  133 000000C0         ; R1 = mask
  134 000000C0         ; R2 = colorValue
  135 000000C0         ; Return Values
  136 000000C0         ; R0 = RGB
  137 000000C0 E1E01001        MVN              R1, R1      ; invertmask for si
                                                            mplicity
  138 000000C4 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  139 000000C8         setMaskWhile



ARM Macro Assembler    Page 4 


  140 000000C8 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  141 000000CC 3A000001        BCC              endSetMaskWhile ; {
  142 000000D0 E1A02202        LSL              R2, R2, #4  ; value >> 4
  143 000000D4 EAFFFFFB        B                setMaskWhile ; }
  144 000000D8         endSetMaskWhile                      ;
  145 000000D8 E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  146 000000DC E12FFF1E        BX               LR
  147 000000E0         
  148 000000E0         start
  149 000000E0 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  150 000000E4 E1A04000        MOV              R4, R0
  151 000000E8 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  152 000000EC E1A05000        MOV              R5, R0
  153 000000F0 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
  154 000000F4 E1A06000        MOV              R6, R0
  155 000000F8         
  156 000000F8 E3A08014        LDR              R8, =20     ;  Contrast
  157 000000FC E3A09000        LDR              R9, = 0     ; Brightness
  158 00000100         
  159 00000100         iLoop
  160 00000100 E1A07006        MOV              R7, R6
  161 00000104 E2555001        SUBS             R5, R5, #1
  162 00000108 4A00000C        BMI              endiLoop
  163 0000010C         jLoop
  164 0000010C E2577001        SUBS             R7, R7, #1
  165 00000110 4A000009        BMI              endjLoop
  166 00000114 E1A00005        MOV              R0, R5
  167 00000118 E1A01007        MOV              R1, R7
  168 0000011C EBFFFFBA        BL               getPixel
  169 00000120 E1A02008        MOV              R2, R8
  170 00000124 E1A03009        MOV              R3, R9
  171 00000128 EBFFFFC4        BL               adjustPixel
  172 0000012C E1A00005        MOV              R0, R5
  173 00000130 E1A01007        MOV              R1, R7
  174 00000134 EBFFFFBC        BL               putPixel
  175 00000138 EAFFFFF3        B                jLoop
  176 0000013C         endjLoop
  177 0000013C EAFFFFEF        B                iLoop
  178 00000140         endiLoop
  179 00000140 EBFFFFFE        BL               putPic
  180 00000144         ; re-display the updated image
  181 00000144         
  182 00000144 EAFFFFFE 
                       stop    B                stop
  183 00000148         
  184 00000148         
  185 00000148                 END
              FFFFFFFF 
Command Line: --debug --xref --apcs=interwork --depend=.\adjust.d -o.\adjust.o 
-IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --
predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK



ARM Macro Assembler    Page 5 


_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1
" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\adjust.lst 
Adjust.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Adjust 00000000

Symbol: Adjust
   Definitions
      At line 1 in file Adjust.s
   Uses
      None
Comment: Adjust unused
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 85 in file Adjust.s
   Uses
      At line 69 in file Adjust.s
      At line 74 in file Adjust.s
      At line 79 in file Adjust.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 58 in file Adjust.s
   Uses
      At line 171 in file Adjust.s
Comment: adjustPixel used once
endGetMaskWhile 000000BC

Symbol: endGetMaskWhile
   Definitions
      At line 124 in file Adjust.s
   Uses
      At line 121 in file Adjust.s
Comment: endGetMaskWhile used once
endSetMaskWhile 000000D8

Symbol: endSetMaskWhile
   Definitions
      At line 144 in file Adjust.s
   Uses
      At line 141 in file Adjust.s
Comment: endSetMaskWhile used once
endiLoop 00000140

Symbol: endiLoop
   Definitions
      At line 178 in file Adjust.s
   Uses
      At line 162 in file Adjust.s
Comment: endiLoop used once
endjLoop 0000013C

Symbol: endjLoop
   Definitions
      At line 176 in file Adjust.s
   Uses
      At line 165 in file Adjust.s
Comment: endjLoop used once
getMaskWhile 000000AC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: getMaskWhile
   Definitions
      At line 119 in file Adjust.s
   Uses
      At line 123 in file Adjust.s
Comment: getMaskWhile used once
getPixel 0000000C

Symbol: getPixel
   Definitions
      At line 14 in file Adjust.s
   Uses
      At line 168 in file Adjust.s
Comment: getPixel used once
getPixelError 00000000

Symbol: getPixelError
   Definitions
      At line 10 in file Adjust.s
   Uses
      None
Comment: getPixelError unused
getPixelFinally 00000018

Symbol: getPixelFinally
   Definitions
      At line 29 in file Adjust.s
   Uses
      At line 13 in file Adjust.s
Comment: getPixelFinally used once
getValueFromMask 000000A8

Symbol: getValueFromMask
   Definitions
      At line 109 in file Adjust.s
   Uses
      At line 68 in file Adjust.s
      At line 73 in file Adjust.s
      At line 78 in file Adjust.s

iLoop 00000100

Symbol: iLoop
   Definitions
      At line 159 in file Adjust.s
   Uses
      At line 177 in file Adjust.s
Comment: iLoop used once
jLoop 0000010C

Symbol: jLoop
   Definitions
      At line 163 in file Adjust.s
   Uses
      At line 175 in file Adjust.s
Comment: jLoop used once
putPixel 0000002C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: putPixel
   Definitions
      At line 44 in file Adjust.s
   Uses
      At line 174 in file Adjust.s
Comment: putPixel used once
rowColToIndex 00000020

Symbol: rowColToIndex
   Definitions
      At line 33 in file Adjust.s
   Uses
      At line 27 in file Adjust.s
      At line 52 in file Adjust.s

setMaskWhile 000000C8

Symbol: setMaskWhile
   Definitions
      At line 139 in file Adjust.s
   Uses
      At line 143 in file Adjust.s
Comment: setMaskWhile used once
setValueFromMask 000000C0

Symbol: setValueFromMask
   Definitions
      At line 127 in file Adjust.s
   Uses
      At line 70 in file Adjust.s
      At line 75 in file Adjust.s
      At line 80 in file Adjust.s

start 000000E0

Symbol: start
   Definitions
      At line 148 in file Adjust.s
   Uses
      At line 8 in file Adjust.s
Comment: start used once
stop 00000144

Symbol: stop
   Definitions
      At line 182 in file Adjust.s
   Uses
      At line 182 in file Adjust.s
Comment: stop used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file Adjust.s
   Uses
      At line 149 in file Adjust.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file Adjust.s
   Uses
      At line 151 in file Adjust.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file Adjust.s
   Uses
      At line 153 in file Adjust.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 3 in file Adjust.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file Adjust.s
   Uses
      At line 179 in file Adjust.s
Comment: putPic used once
5 symbols
364 symbols in table
