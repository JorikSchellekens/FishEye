


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Adjust, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 IMPORT           main
    4 00000000                 IMPORT           getPicAddr
    5 00000000                 IMPORT           putPic
    6 00000000                 IMPORT           getPicWidth
    7 00000000                 IMPORT           getPicHeight
    8 00000000                 EXPORT           start
    9 00000000         
   10 00000000         getPixelError
   11 00000000 E59F0150        LDR              R0, =-1
   12 00000004 E59F114C        LDR              R1, =-1
   13 00000008 EA000002        B                getPixelFinally
   14 0000000C         getPixel                             ; address, RGBval =
                                                             getPixel(row, col)
                                                            
   15 0000000C         ; Parameters:
   16 0000000C         ; R0 = row
   17 0000000C         ; R1 = column
   18 0000000C         ; Stack > base address, height and width
   19 0000000C         ; Returns:
   20 0000000C         ; R0 = RGBvalue
   21 0000000C E92D4000        STMFD            SP!, {LR}
   22 00000010         
   23 00000010         ;CMP R0, R5  ; if (row >= height || col >= width):
   24 00000010         ;BHS getPixelError ; return -1; (throw error)
   25 00000010         ;CMP R1, R6
   26 00000010         ;BHS getPixelError
   27 00000010         
   28 00000010 EB000002        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   29 00000014 E7940100        LDR              R0, [R4, R0, LSL #2] ; RGBvalue
                                                             = Memmory.word(pic
                                                            tureaddress + addre
                                                            ssOffset * 4)
   30 00000018         getPixelFinally
   31 00000018 E8BD4000        LDMFD            SP!, {LR}
   32 0000001C E12FFF1E        BX               LR
   33 00000020         
   34 00000020         rowColToIndex
   35 00000020         ; converts row and colum to index
   36 00000020         ; Parameters
   37 00000020         ; R0 = row
   38 00000020         ; R1 = col
   39 00000020         ; Return Values
   40 00000020         ; R0 addressIndex
   41 00000020 E0000096        MUL              R0, R6, R0  ; addressOffset = r
                                                            ow * WIDTH
   42 00000024 E0800001        ADD              R0, R0, R1  ; addressOffset += 
                                                            col
   43 00000028 E12FFF1E        BX               LR
   44 0000002C         
   45 0000002C         putPixel
   46 0000002C         ; Stores a given RGB to an pixel of at row, col
   47 0000002C         ; Parameters
   48 0000002C         ; R0 = row
   49 0000002C         ; R1 = col
   50 0000002C         ; R2 = RGB



ARM Macro Assembler    Page 2 


   51 0000002C E92D4000        STMFD            SP!, {LR}
   52 00000030         
   53 00000030 EBFFFFFA        BL               rowColToIndex ; addressOffset =
                                                             rowColToIndex(row,
                                                             col)
   54 00000034 E7842100        STR              R2, [R4, R0, LSL #2] ; Memory.w
                                                            ord(pictureAddress 
                                                            + addressOffset * 4
                                                            )
   55 00000038         
   56 00000038 E8BD4000        LDMFD            SP!, {LR}
   57 0000003C E12FFF1E        BX               LR
   58 00000040         
   59 00000040         adjustPixel
   60 00000040         ; adjustedVal = adjustPixel(value, contrast, brightness)
                       
   61 00000040         ; Applies a given contrast and brightness value
   62 00000040         ; Parameters:
   63 00000040         ; R0 = RGB
   64 00000040         ; R2 = contrast   (0 <= contrast) contrast has no effect
                        at 16
   65 00000040         ; R3 = brightness
   66 00000040         
   67 00000040 E92D400C        STMFD            SP!, {R2, R3, LR} ; save link r
                                                            egister and pass pa
                                                            ramters contrast an
                                                            d brightness
   68 00000044         
   69 00000044 E3A018FF        LDR              R1, = 0x00FF0000 
                                                            ; mask = redMask
   70 00000048 EB000016        BL               getValueFromMask ; val = getVal
                                                            ueFromMask(RGB, mas
                                                            k)
   71 0000004C EB00000A        BL               adjustColor ; val = adjustColor
                                                            (val, contrast, bri
                                                            ghtness)
   72 00000050 EB00001C        BL               setValueFromMask ; RGB = setVal
                                                            ueFromMask(RGB, mas
                                                            k, value)
   73 00000054         
   74 00000054 E3A01CFF        LDR              R1, = 0x0000FF00
   75 00000058 EB000012        BL               getValueFromMask
   76 0000005C EB000006        BL               adjustColor
   77 00000060 EB000018        BL               setValueFromMask
   78 00000064         
   79 00000064 E3A010FF        LDR              R1, = 0x000000FF
   80 00000068 EB00000E        BL               getValueFromMask
   81 0000006C EB000002        BL               adjustColor
   82 00000070 EB000014        BL               setValueFromMask
   83 00000074         
   84 00000074 E8BD400C        LDMFD            SP!, {R2, R3, LR}
   85 00000078 E12FFF1E        BX               LR
   86 0000007C         
   87 0000007C         adjustColor
   88 0000007C         ; val = adjustColor(color, contrast, brightness)
   89 0000007C         ; applies the brightness contrast formula
   90 0000007C         ; Paramters:
   91 0000007C         ; R2 = color
   92 0000007C         ; Stack > contrast, brightness that order.



ARM Macro Assembler    Page 3 


   93 0000007C         ; Return Values
   94 0000007C         ; R2 = color
   95 0000007C         ; Stack > contrast, brightness that order.
   96 0000007C E92D0030        STMFD            SP!, {R4, R5}
   97 00000080 E59D4008        LDR              R4, [SP, #8] ; contrast = stack
                                                            .getParameter()
   98 00000084 E59D500C        LDR              R5, [SP, #12] ; brightness = st
                                                            ack.getParameter()
   99 00000088 E0020294        MUL              R2, R4, R2  ; color *= contrast
                                                            
  100 0000008C E1A02222        LSR              R2, R2, #4  ; color /= 16
  101 00000090 E0922005        ADDS             R2, R2, R5  ; color += brightne
                                                            ss
  102 00000094 43A02000        LDRMI            R2, =0      ; if (color < 0): c
                                                            olor = 0
  103 00000098 E35200FF        CMP              R2, #255    ; else if (color > 
                                                            255):
  104 0000009C C3A020FF        LDRGT            R2, =255    ; color = 255
  105 000000A0 E8BD0030        LDMFD            SP!, {R4, R5} 
                                                            ; restore pointers
  106 000000A4 E12FFF1E        BX               LR
  107 000000A8         
  108 000000A8         
  109 000000A8         
  110 000000A8         
  111 000000A8         getValueFromMask
  112 000000A8         ; Gets the color value under a congruent mask
  113 000000A8         ; Expects masks of type FF
  114 000000A8         ; eg mask 00FF0000 will return the value under FF in thi
                       s case the value of red
  115 000000A8         ; Parameters
  116 000000A8         ; R0 = RGB
  117 000000A8         ; R1 = mask
  118 000000A8         ; Return Values
  119 000000A8         ; R1 = mask
  120 000000A8         ; R2 = colorValue
  121 000000A8 E0002001        AND              R2, R0, R1  ; value = RGB & mas
                                                            k
  122 000000AC E52D1004        PUSH             {R1}
  123 000000B0         getMaskWhile
  124 000000B0 E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  125 000000B4 2A000001        BCS              endGetMaskWhile ; {
  126 000000B8 E1A02222        LSR              R2, R2, #4  ; value >> 4
  127 000000BC EAFFFFFB        B                getMaskWhile ; }
  128 000000C0         endGetMaskWhile
  129 000000C0 E49D1004        POP              {R1}
  130 000000C4 E12FFF1E        BX               LR
  131 000000C8         
  132 000000C8         setValueFromMask
  133 000000C8         ; Sets the color value under a congruent mask
  134 000000C8         ; Expects masks of type FF
  135 000000C8         ; Takes in a value and a location in form FF
  136 000000C8         ; Parameters
  137 000000C8         ; R0 = RGB
  138 000000C8         ; R1 = mask
  139 000000C8         ; R2 = colorValue
  140 000000C8         ; Return Values
  141 000000C8         ; R0 = RGB



ARM Macro Assembler    Page 4 


  142 000000C8 E1C00001        BIC              R0, R0, R1  ; RGB = RGB & mask 
                                                            // remove color
  143 000000CC         setMaskWhile
  144 000000CC E1B01221        LSRS             R1, R1, #4  ; while (mask >> 4 
                                                            doesn't carry)
  145 000000D0 2A000001        BCS              endSetMaskWhile ; {
  146 000000D4 E1A02202        LSL              R2, R2, #4  ; value >> 4
  147 000000D8 EAFFFFFB        B                setMaskWhile ; }
  148 000000DC         endSetMaskWhile                      ;
  149 000000DC E0800002        ADD              R0, R0, R2  ; RGB = RGB + value
                                                            
  150 000000E0 E12FFF1E        BX               LR
  151 000000E4         
  152 000000E4         start
  153 000000E4 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
  154 000000E8 E1A04000        MOV              R4, R0
  155 000000EC EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
  156 000000F0 E1A05000        MOV              R5, R0
  157 000000F4 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
  158 000000F8 E1A06000        MOV              R6, R0
  159 000000FC         
  160 000000FC E3A09064        LDR              R9, = 100   ;  Contrast
  161 00000100 E3A0A000        LDR              R10, = 0    ; Brightness
  162 00000104         
  163 00000104 E1A07005        MOV              R7, R5
  164 00000108 E1A08006        MOV              R8, R6
  165 0000010C         
  166 0000010C         iLoop
  167 0000010C E2577001        SUBS             R7, R7, #1
  168 00000110 4A00000E        BMI              endiLoop
  169 00000114 E1A08006        MOV              R8, R6
  170 00000118         jLoop
  171 00000118 E2588001        SUBS             R8, R8, #1
  172 0000011C 4A00000A        BMI              endjLoop
  173 00000120 E1A00007        MOV              R0, R7
  174 00000124 E1A01008        MOV              R1, R8
  175 00000128 EBFFFFB7        BL               getPixel
  176 0000012C E1A02009        MOV              R2, R9
  177 00000130 E1A0300A        MOV              R3, R10
  178 00000134 EBFFFFC1        BL               adjustPixel
  179 00000138 E1A02000        MOV              R2, R0
  180 0000013C E1A00007        MOV              R0, R7
  181 00000140 E1A01008        MOV              R1, R8
  182 00000144 EBFFFFB8        BL               putPixel
  183 00000148 EAFFFFF2        B                jLoop
  184 0000014C         endjLoop
  185 0000014C EAFFFFEE        B                iLoop
  186 00000150         endiLoop
  187 00000150 EBFFFFFE        BL               putPic
  188 00000154         ; re-display the updated image
  189 00000154         
  190 00000154 EAFFFFFE 
                       stop    B                stop



ARM Macro Assembler    Page 5 


  191 00000158         
  192 00000158         
  193 00000158                 END
              FFFFFFFF 
Command Line: --debug --xref --apcs=interwork --depend=.\adjust.d -o.\adjust.o 
-IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --
predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK
_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1
" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\adjust.lst 
Adjust.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Adjust 00000000

Symbol: Adjust
   Definitions
      At line 1 in file Adjust.s
   Uses
      None
Comment: Adjust unused
adjustColor 0000007C

Symbol: adjustColor
   Definitions
      At line 87 in file Adjust.s
   Uses
      At line 71 in file Adjust.s
      At line 76 in file Adjust.s
      At line 81 in file Adjust.s

adjustPixel 00000040

Symbol: adjustPixel
   Definitions
      At line 59 in file Adjust.s
   Uses
      At line 178 in file Adjust.s
Comment: adjustPixel used once
endGetMaskWhile 000000C0

Symbol: endGetMaskWhile
   Definitions
      At line 128 in file Adjust.s
   Uses
      At line 125 in file Adjust.s
Comment: endGetMaskWhile used once
endSetMaskWhile 000000DC

Symbol: endSetMaskWhile
   Definitions
      At line 148 in file Adjust.s
   Uses
      At line 145 in file Adjust.s
Comment: endSetMaskWhile used once
endiLoop 00000150

Symbol: endiLoop
   Definitions
      At line 186 in file Adjust.s
   Uses
      At line 168 in file Adjust.s
Comment: endiLoop used once
endjLoop 0000014C

Symbol: endjLoop
   Definitions
      At line 184 in file Adjust.s
   Uses
      At line 172 in file Adjust.s
Comment: endjLoop used once
getMaskWhile 000000B0



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: getMaskWhile
   Definitions
      At line 123 in file Adjust.s
   Uses
      At line 127 in file Adjust.s
Comment: getMaskWhile used once
getPixel 0000000C

Symbol: getPixel
   Definitions
      At line 14 in file Adjust.s
   Uses
      At line 175 in file Adjust.s
Comment: getPixel used once
getPixelError 00000000

Symbol: getPixelError
   Definitions
      At line 10 in file Adjust.s
   Uses
      None
Comment: getPixelError unused
getPixelFinally 00000018

Symbol: getPixelFinally
   Definitions
      At line 30 in file Adjust.s
   Uses
      At line 13 in file Adjust.s
Comment: getPixelFinally used once
getValueFromMask 000000A8

Symbol: getValueFromMask
   Definitions
      At line 111 in file Adjust.s
   Uses
      At line 70 in file Adjust.s
      At line 75 in file Adjust.s
      At line 80 in file Adjust.s

iLoop 0000010C

Symbol: iLoop
   Definitions
      At line 166 in file Adjust.s
   Uses
      At line 185 in file Adjust.s
Comment: iLoop used once
jLoop 00000118

Symbol: jLoop
   Definitions
      At line 170 in file Adjust.s
   Uses
      At line 183 in file Adjust.s
Comment: jLoop used once
putPixel 0000002C




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: putPixel
   Definitions
      At line 45 in file Adjust.s
   Uses
      At line 182 in file Adjust.s
Comment: putPixel used once
rowColToIndex 00000020

Symbol: rowColToIndex
   Definitions
      At line 34 in file Adjust.s
   Uses
      At line 28 in file Adjust.s
      At line 53 in file Adjust.s

setMaskWhile 000000CC

Symbol: setMaskWhile
   Definitions
      At line 143 in file Adjust.s
   Uses
      At line 147 in file Adjust.s
Comment: setMaskWhile used once
setValueFromMask 000000C8

Symbol: setValueFromMask
   Definitions
      At line 132 in file Adjust.s
   Uses
      At line 72 in file Adjust.s
      At line 77 in file Adjust.s
      At line 82 in file Adjust.s

start 000000E4

Symbol: start
   Definitions
      At line 152 in file Adjust.s
   Uses
      At line 8 in file Adjust.s
Comment: start used once
stop 00000154

Symbol: stop
   Definitions
      At line 190 in file Adjust.s
   Uses
      At line 190 in file Adjust.s
Comment: stop used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 4 in file Adjust.s
   Uses
      At line 153 in file Adjust.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 7 in file Adjust.s
   Uses
      At line 155 in file Adjust.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 6 in file Adjust.s
   Uses
      At line 157 in file Adjust.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 3 in file Adjust.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 5 in file Adjust.s
   Uses
      At line 187 in file Adjust.s
Comment: putPic used once
5 symbols
364 symbols in table
